<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>VUE回顾与拓展</title>
    <url>/2023/06/28/VUE%E5%9B%9E%E9%A1%BE%E4%B8%8E%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="VUE回顾"><a href="#VUE回顾" class="headerlink" title="VUE回顾"></a>VUE回顾</h2><p>Vue.js是一个流行的JavaScript框架，提供了双向绑定的能力。双向绑定意味着当数据发生变化时，视图会自动更新，并且当视图发生变化时，数据也会自动更新。</p>
<p>在Vue.js中，你可以使用v-model指令来实现双向绑定。v-model指令可以与表单元素（如input、textarea、select等）一起使用，将表单元素的值与Vue实例的数据进行绑定。</p>
<p>以下是一个简单的示例，展示了如何在<strong>Vue.js中实现双向绑定：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的消息: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>在这个示例中，我们使用v-model指令将input元素的值绑定到Vue实例的message属性上。当用户在输入框中输入文本时，message的值会自动更新。同时，我们使用双括号语法（）将message的值显示在p元素中，当message的值发生变化时，p元素也会自动更新。</p>
<p>通过v-model指令，Vue.js实现了数据的双向绑定，使得开发者无需手动处理数据的更新和视图的更新，大大简化了开发流程。</p>
<p><strong>双括号语法（）在Vue.js中被称为插值语法，</strong>它用于在HTML模板中插入变量的值。通过使用双括号语法，可以将Vue实例中的数据绑定到HTML中，实现数据和视图的自动更新。当Vue实例中的数据发生变化时，插值语法会自动更新对应的DOM元素，显示最新的数据值。这种机制被称为双向绑定。</p>
<p>Vue.js还有以下几个<strong>特点</strong>：</p>
<ol>
<li>组件化开发：Vue.js采用组件化的开发方式，将页面拆分成多个独立的组件，每个组件负责自己的逻辑和视图。这样可以提高代码的可读性和复用性，同时也方便团队协作开发。</li>
<li>轻量级框架：Vue.js的体积很小，压缩后只有约30KB左右，加载速度快，性能优秀。这使得它非常适合在移动端或低带宽环境下使用。</li>
<li>渐进式框架：Vue.js是一个渐进式框架，它的核心库只关注视图层的渲染，可以与其他库或现有项目进行逐步集成。这样可以方便开发者根据项目的实际需求进行选择和使用。</li>
<li>易学易用：Vue.js的语法简单明了，学习曲线较低。它提供了丰富的指令和组件，使得开发者可以更快速地构建复杂的交互界面。</li>
<li>生态系统丰富：Vue.js拥有庞大的社区支持，有大量的第三方插件和库可供选择。这些插件和库可以提供更多的功能和扩展，帮助开发者更高效地开发应用。</li>
</ol>
<p>Vue.js有许多常用的<strong>指令</strong>，以下是其中几个常用的指令及其功能：</p>
<ol>
<li>v-bind：用于绑定数据到元素的属性上，可以动态地更新元素的属性值。例如，v-bind:href=”url” 可以将数据中的url绑定到元素的href属性上。</li>
<li>v-model：用于在表单元素和Vue实例之间建立双向绑定。它可以自动监听用户输入的变化，并将其更新到Vue实例中的数据上。例如，v-model=”message” 可以将用户在输入框中输入的内容实时更新到Vue实例的message属性上。</li>
<li>v-if / v-else / v-else-if：用于条件性地渲染元素。通过设置条件表达式，可以决定是否显示或隐藏元素。例如，v-if=”isShow” 可以根据isShow的值决定元素是否显示。</li>
<li>v-for：用于循环渲染数组或对象中的数据，生成多个对应的元素。例如，v-for=”item in items” 可以循环遍历items数组，并为每个item生成一个对应的元素。</li>
<li>v-on：用于绑定事件监听器，当指定的事件触发时，执行相应的方法。例如，v-on:click=”handleClick” 可以在点击事件触发时调用handleClick方法。</li>
</ol>
<p>在编辑模式方面，Vue.js提供两种主要的编辑模式：</p>
<ol>
<li>模板语法：使用类似HTML的模板语法来描述视图，通过Vue实例中的数据和指令来动态渲染页面。这种模式适合对于前端开发者来说更加直观和容易理解。</li>
<li>单文件组件：这是一种将模板、样式和逻辑代码封装在一个文件中的方式。这种方式使得组件的开发更加模块化和可复用，适合复杂的应用程序开发。</li>
</ol>
<h2 id="vue与微信双向绑定的区别"><a href="#vue与微信双向绑定的区别" class="headerlink" title="vue与微信双向绑定的区别"></a>vue与微信双向绑定的区别</h2><p>在微信小程序开发中，可以通过使用表单组件的value属性和bindinput事件来实现双向绑定。</p>
<p>例如，如果你有一个输入框和一个文本框，你可以将输入框的值绑定到一个数据变量上，并在输入框值改变时更新文本框的值。以下是一个示例代码：</p>
<p>WXML部分：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">&quot;&#123;&#123;inputValue&#125;&#125;&quot;</span> <span class="attr">bindinput</span>=<span class="string">&quot;handleInput&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;inputValue&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>JS部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">inputValue</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">handleInput</span>: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">      <span class="attr">inputValue</span>: e.detail.value</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们使用了input组件的value属性将输入框的值绑定到data对象中的inputValue变量上。然后，我们使用bindinput事件监听输入框的输入事件，并在事件处理函数中通过setData方法更新inputValue的值。这样，当输入框的值改变时，文本框的值也会自动更新。</p>
<p>这种方式虽然不像Vue.js那样自动实现双向绑定，但通过监听输入事件和手动更新数据，我们可以实现类似的效果。</p>
<h2 id="微信小程序常用API"><a href="#微信小程序常用API" class="headerlink" title="微信小程序常用API"></a>微信小程序常用API</h2><p>微信小程序提供了丰富的API，可以实现各种功能和交互效果。以下是一些常用的微信小程序API：</p>
<ol>
<li><p>界面交互相关API：</p>
<ul>
<li>wx.showToast：显示消息提示框，如成功、失败或加载中的提示。</li>
<li>wx.showModal：显示模态对话框，可用于确认操作或显示提示信息。</li>
<li>wx.showActionSheet：显示操作菜单，可供用户选择操作。</li>
<li>wx.navigateTo / wx.redirectTo：跳转到其他页面，支持页面间的导航。</li>
</ul>
</li>
<li><p>网络请求相关API：</p>
<ul>
<li>wx.request：发起网络请求，可获取远程数据。</li>
<li>wx.uploadFile：上传文件。</li>
<li>wx.downloadFile：下载文件。</li>
</ul>
</li>
<li><p>数据缓存相关API：</p>
<ul>
<li>wx.setStorage / wx.getStorage：设置和获取本地缓存数据。</li>
<li>wx.setStorageSync / wx.getStorageSync：同步设置和获取本地缓存数据。</li>
</ul>
</li>
<li><p>用户授权相关API：</p>
<ul>
<li>wx.login：获取用户登录凭证（code）。</li>
<li>wx.getUserInfo：获取用户信息，需用户授权。</li>
</ul>
</li>
<li><p>位置服务相关API：</p>
<ul>
<li>wx.getLocation：获取用户当前的地理位置。</li>
<li>wx.openLocation：打开地图选择位置或导航。</li>
</ul>
</li>
<li><p>图片相关API：</p>
<ul>
<li>wx.chooseImage：从相册或相机选择图片。</li>
<li>wx.previewImage：预览图片。</li>
</ul>
</li>
<li><p>设备相关API：</p>
<ul>
<li>wx.getSystemInfo：获取设备信息，如屏幕宽高、操作系统版本等。</li>
<li>wx.onAccelerometerChange：监听重力感应数据。</li>
</ul>
</li>
<li><p>媒体相关API：</p>
<ul>
<li>wx.createAudioContext / wx.createVideoContext：创建音频或视频上下文，可用于控制音频和视频播放。</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>FastAdmin上手记录</title>
    <url>/2023/06/01/FastAdmin%E4%B8%8A%E6%89%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="FastAdmin上手记录"><a href="#FastAdmin上手记录" class="headerlink" title="FastAdmin上手记录"></a>FastAdmin上手记录</h1><p><strong>FastAdmin是一个基于ThinkPHP框架开发的快速开发后台管理系统工具，</strong>具有以下特点：</p>
<ol>
<li><p>快速开发：FastAdmin提供了丰富的后台管理系统功能模块，包括用户管理、权限管理、菜单管理、日志管理等，使用FastAdmin可以快速搭建一个功能完善的后台管理系统。</p>
</li>
<li><p>灵活可扩展：FastAdmin基于ThinkPHP框架，使用了模块化的开发结构，可以方便地进行功能扩展和定制，满足不同项目的需求。</p>
</li>
<li><p>丰富的插件支持：FastAdmin支持插件扩展机制，可以通过安装插件来增加系统功能，如文件管理、消息推送等，提供了更多的灵活性和可定制性。</p>
</li>
<li><p>多主题支持：FastAdmin提供了多个主题样式可供选择，可以根据需求进行切换，使得后台管理系统更加美观和个性化。</p>
</li>
<li><p>安全性：FastAdmin内置了丰富的安全机制，包括权限控制、用户登录验证、防止SQL注入等，保障系统的安全性。</p>
</li>
</ol>
<p>总体来说，FastAdmin是一个功能丰富、易于扩展和定制的快速开发后台管理系统工具，适用于各种中小型项目的快速开发和部署。</p>
<h4 id="1-dubug模式开启"><a href="#1-dubug模式开启" class="headerlink" title="1.dubug模式开启"></a>1.dubug模式开启</h4><p>配置项：   .env—-         <code>debug=true</code></p>
<h4 id="2-一键CRUD"><a href="#2-一键CRUD" class="headerlink" title="2.一键CRUD"></a>2.一键CRUD</h4><p>通过在线命令—————-对应数据库字段————–一键生成控制器—————一键生成菜单栏</p>
<p>根据官方文档对应特殊字段进行操作 <a href="https://doc.fastadmin.net/doc/database.html">数据库 - FastAdmin框架文档</a></p>
<h4 id="3-控制器"><a href="#3-控制器" class="headerlink" title="3.控制器"></a>3.控制器</h4><h5 id="3-1登录与鉴权"><a href="#3-1登录与鉴权" class="headerlink" title="3.1登录与鉴权"></a>3.1登录与鉴权</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    protected $noNeedLogin = [&#x27;mywork&#x27;];</span><br><span class="line">    protected $noNeedRight = [&#x27;mywork1&#x27;];</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">        public function mywork()&#123;</span><br><span class="line">        return &#x27;无需登录和鉴权 work&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * mywork1</span><br><span class="line">     **/</span><br><span class="line">    public function mywork1()&#123;</span><br><span class="line">        return &#x27;无需鉴权但要登录 work1&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-2-数据校验"><a href="#3-2-数据校验" class="headerlink" title="3.2 数据校验"></a>3.2 数据校验</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">protected $modelValidate = true; //是否开启Validate验证，默认是false关闭状态</span><br><span class="line">protected $modelSceneValidate = true; //是否开启模型场景验证，默认是false关闭状态</span><br></pre></td></tr></table></figure>

<h4 id="4-API注册"><a href="#4-API注册" class="headerlink" title="4.API注册"></a>4.API注册</h4><p>controller控制器传参</p>
<h4 id="5-JS"><a href="#5-JS" class="headerlink" title="5.JS"></a>5.JS</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"> $this-&gt;assignconfig(&#x27;userinfo&#x27;, [</span><br><span class="line">  &#x27;usertoken&#x27;=&gt;$this-&gt;auth-&gt;token,</span><br><span class="line">  &#x27;userid&#x27;=&gt;$this-&gt;auth-&gt;id,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>



<h4 id="5-携带参数"><a href="#5-携带参数" class="headerlink" title="5.携带参数"></a>5.携带参数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$this-&gt;succesi(“成功&#x27;&#x27;, ur1 ( &quot;index/index/ceshi2 &#x27; , [ &#x27;abc &#x27;=&gt; &#x27;1234&#x27;]), [ &#x27;ceshi &#x27;=&gt;1 , &#x27; ceshi2&#x27;=&#x27;22222&#x27;]);</span><br></pre></td></tr></table></figure>

<h4 id="6-模拟登陆注册"><a href="#6-模拟登陆注册" class="headerlink" title="6.模拟登陆注册"></a>6.模拟登陆注册</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$openid=&quot;999&quot;;</span><br><span class="line">        $username=&quot;999&quot;;</span><br><span class="line"></span><br><span class="line">$search_res=Db::name(&quot;user&quot;)-&gt;whereOr(&quot;username&quot;,$username)-&gt;whereOr(&quot;openid&quot;,$openid)-&gt;find();</span><br><span class="line">        if($search_res)&#123;</span><br><span class="line">            $loginRes = $this-&gt;auth-&gt;direct($search_res[&quot;id&quot;]);</span><br><span class="line">            if($loginRes)&#123;</span><br><span class="line"></span><br><span class="line">                Cookie::set(&#x27;uid&#x27;, $this-&gt;auth-&gt;id );</span><br><span class="line">                Cookie::set(&#x27;token&#x27;, $this-&gt;auth-&gt;getToken());</span><br><span class="line">    </span><br><span class="line">                $this-&gt;success(&#x27;登录成功&#x27;,$loginRes);</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                $this-&gt;success(&#x27;登录失败，未找到用户&#x27;,$loginRes);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else&#123;</span><br><span class="line">            $registerRes = $this-&gt;auth-&gt;register($username,$username,&#x27;&#x27;,&#x27;&#x27;,[</span><br><span class="line">               &quot;openid&quot;=&gt;$openid </span><br><span class="line">            ]);</span><br><span class="line">            // Cookie::set(&#x27;uid&#x27;, $this-&gt;auth-&gt;id );</span><br><span class="line">            // Cookie::set(&#x27;token&#x27;, $this-&gt;auth-&gt;getToken());</span><br><span class="line"></span><br><span class="line">            $this-&gt;auth-&gt;logout();</span><br><span class="line">            Cookie::delete(&#x27;uid&#x27;);</span><br><span class="line">            Cookie::delete(&#x27;token&#x27;);</span><br><span class="line">            $this-&gt;success(&#x27;执行注册&#x27;,$registerRes);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>后台管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言易漏易混总结</title>
    <url>/2023/06/27/C%E8%AF%AD%E8%A8%80%E6%98%93%E6%BC%8F%E6%98%93%E6%B7%B7%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="C语言是万码之本"><a href="#C语言是万码之本" class="headerlink" title="C语言是万码之本"></a>C语言是万码之本</h1><h5 id="1-struct-student-s-struct-student-malloc-sizeof-struct-student"><a href="#1-struct-student-s-struct-student-malloc-sizeof-struct-student" class="headerlink" title="1.struct student* s=( struct student* ) malloc(sizeof(struct student) ) ;"></a>1.struct student* s=( struct student* ) malloc(sizeof(struct student) ) ;</h5><p>这段代码是动态分配内存的语句，可以理解为：</p>
<ol>
<li><p><code>struct student* s</code>：定义一个名为 <code>s</code> 的指针变量，其指向类型为 <code>struct student</code> 的结构体。</p>
</li>
<li><p><code>malloc(sizeof(struct student))</code>：调用 <code>malloc</code> 函数，分配 <code>struct student</code> 类型的内存块，并返回指向该内存块的指针，<code>sizeof(struct student)</code> 表示结构体 <code>struct student</code> 的大小。</p>
</li>
<li><p><code>(struct student*)</code>：将 <code>malloc</code> 函数返回的指针强制转换为 <code>struct student*</code> 类型，与 <code>s</code> 指针变量类型相同。</p>
</li>
</ol>
<p>所以，整句话的意思是：为类型为 <code>struct student</code> 的结构体动态分配内存，并将指向该内存块的指针赋值给 <code>s</code> 指针变量。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5>]]></content>
      <categories>
        <category>C</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb回顾</title>
    <url>/2023/05/18/JavaWeb%E5%9B%9E%E9%A1%BE/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="JavaWeb回顾"><a href="#JavaWeb回顾" class="headerlink" title="JavaWeb回顾"></a>JavaWeb回顾</h1><h3 id="1-javascript-客户端的一个脚本语言"><a href="#1-javascript-客户端的一个脚本语言" class="headerlink" title="1.javascript:客户端的一个脚本语言"></a>1.javascript:客户端的一个脚本语言</h3><p>js是一门弱类型语言的语言，变量的数据类型由后面赋的值的类型决定</p>
<p>java方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="string">&quot;hello to&quot;</span>+name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>js方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params">num1,num2,num3</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(num1&gt;num2)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;hello to&quot;</span>+name;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		alert(<span class="string">&quot;HELLo&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//参数不限制，返回值不限制</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>example 1</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showBGColor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//event 当前发生的事件</span></span><br><span class="line">    <span class="comment">//event.srcElement:事件源</span></span><br><span class="line">    <span class="comment">//alert(event.srcElement.tagName);</span></span><br><span class="line">    <span class="keyword">if</span>(event&amp;&amp;event.srcElement&amp;&amp;event.srcElement.tagName==<span class="string">&quot;TD&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> td=event.srcElement;</span><br><span class="line">        <span class="keyword">var</span> tr=td.parentElement;</span><br><span class="line">        tr.style.backgroundColor=<span class="string">&quot;navy&quot;</span>;</span><br><span class="line">        <span class="comment">//tr.cells表示获取这个tr中所有的单元格</span></span><br><span class="line"> 		<span class="keyword">var</span> tds=tr.cells;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tds.length;i++)&#123;</span><br><span class="line">            tds[i].style.color=<span class="string">&quot;white&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clearBgcolor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(event&amp;&amp;event.srcElement&amp;&amp;event.srcElement.tagName==<span class="string">&quot;TD&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> td=event.srcElement;</span><br><span class="line">        <span class="keyword">var</span> tr=td.parentElement;</span><br><span class="line">        tr.style.backgroundColor=<span class="string">&quot;transparent&quot;</span>;</span><br><span class="line">        <span class="comment">//tr.cells表示获取这个tr中所有的单元格</span></span><br><span class="line"> 		<span class="keyword">var</span> tds=tr.cells;</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span>;i&lt;tds.length;i++)&#123;</span><br><span class="line">            tds[i].style.color=<span class="string">&quot;threeddarkshadom&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>example 2   JS</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">//当页面加载完成,我们需要绑定各种事件</span></span><br><span class="line">    <span class="comment">//根据id获取到表格</span></span><br><span class="line">	<span class="keyword">var</span> fruitTbl = <span class="built_in">document</span>.getElementById(<span class="string">&quot;tbl_fruit&quot;</span>);<span class="comment">//获取表格中的所有的行</span></span><br><span class="line">	<span class="keyword">var</span> rows = fruitTbl.rows ;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i&lt;rows. length ; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> tr = rows[i];</span><br><span class="line">		<span class="comment">//1.绑定鼠标悬浮设置背景颜色事件</span></span><br><span class="line">    	tr. onmouseover=showBGColor;<span class="comment">//无小括号，绑定事件按，未执行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// .innerHTML=&quot; &quot;; 赋值</span></span><br></pre></td></tr></table></figure>

<p>1)JS是客户端（浏览器端）运行的脚本语言，语法风格和java比较类似.</p>
<p>2)JS是弱类型的语言var str = 99 ;</p>
<h3 id="2-JavaWeb是指基于Java语言的Web开发技术"><a href="#2-JavaWeb是指基于Java语言的Web开发技术" class="headerlink" title="2.JavaWeb是指基于Java语言的Web开发技术"></a>2.JavaWeb是指基于Java语言的Web开发技术</h3><p>它是一种创建Web应用程序的技术框架。JavaWeb应用程序可以在多个平台上运行，并且可以处理来自Web浏览器的请求和响应。</p>
<p><strong>JavaWeb应用程序一般包括三个主要组件：</strong><em><strong>Servlet、JSP和JavaBean。Servlet是JavaWeb应用程序中处理客户端请求的Java类，</strong></em>*它用于处理Web容器（如Tomcat）收到的HTTP请求。Servlet是JavaWeb应用程序中处理客户端请求的Java类。它们通常被用来处理HTTP请求和响应。Servlet可以接收来自客户端的请求并生成响应，这些响应可以是HTML页面、XML文档、JSON数据等等。Servlet是基于Java编写的，因此可以跨平台运行。Servlet可以在web服务器中部署并由web容器管理。Web容器负责加载Servlet、初始化Servlet、调用Servlet的服务方法等。Servlet可以通过编写Java代码来实现各种功能，例如用户管理、订单管理、商品管理等。Servlet还可以与JSP（JavaServer Pages）结合使用，JSP可以用来生成动态页面，而Servlet可以用来处理页面请求并生成响应。最后，Servlet还有一些重要的接口，例如ServletConfig、ServletContext、HttpServletRequest、HttpServletResponse等，它们提供了一些常用的方法和属性，可以帮助我们更好地编写Servlet应用程序。</p>
<p><strong>JSP是一种动态生成HTML页面的技术</strong>，它可以将HTML标记和Java代码混合在一起使用，使页面具有交互性和动态性。JSP(JavaServer Pages)是一种动态生成HTML页面的技术。它是一种基于Java的服务器端技术，用于生成动态的、交互式的Web页面。与Servlet不同的是，JSP是一种模板引擎技术，它将Java代码嵌入到HTML中，通过在运行时动态生成HTML页面来响应客户端请求。</p>
<p>JSP页面通常包含HTML标记和JSP标记（JSP标记以&lt;%和%&gt;包围）。JSP页面中的Java代码可以直接嵌入到HTML标记之间，也可以使用JSP标记来包含Java代码块和表达式。通过使用JSP标记，可以将Java代码分离出来，使得页面更加简洁和易于维护。 JSP还提供了一些内置对象，例如request、response、session和application等，这些对象可以用来访问请求和响应信息以及应用程序数据。此外，JSP还可以使用标签库(Tag Library)来扩展页面的功能。</p>
<p>JSP技术的优点包括：</p>
<p>1.易于学习和使用，因为它使用标准的HTML语法和Java语法。</p>
<p>2.可重用性高，因为可以将一些常用的代码封装成标签库来实现代码复用。</p>
<p>3.可维护性好，因为可以将Java代码和HTML代码分离处理，易于维护和修改。</p>
<p>4.性能好，因为在页面请求量较大时，JSP页面只需要编译一次即可，后续请求可以直接使用编译后的结果，提高了页面响应速度。</p>
<p>总之，JSP是一种强大的动态Web页面技术，它为Web开发人员提供了更加灵活和高效的开发方式。</p>
<p><strong>JavaBean是一种Java类</strong>，用于封装应用程序的业务逻辑和数据。</p>
<p>JavaBean是指遵循JavaBean规范的Java类，通常用于数据传输和业务处理。JavaBean具有以下几个特点：</p>
<ol>
<li><p>公共无参构造方法：JavaBean必须提供一个公共的无参构造方法，以便容器可以实例化JavaBean。</p>
</li>
<li><p>私有属性：JavaBean的属性必须是私有的，不能直接从外部访问。</p>
</li>
<li><p>Getter和Setter方法：JavaBean必须提供公共的Getter和Setter方法，以便访问和修改JavaBean的属性。</p>
</li>
<li><p>实现Serializable接口：JavaBean必须实现Serializable接口，以便它可以被序列化和反序列化。</p>
</li>
<li><p>继承自Object类：JavaBean必须继承自Object类。</p>
</li>
</ol>
<p>JavaBean通常用于封装数据，例如用户信息、订单信息、商品信息等。它们被广泛应用于JavaWeb开发中，作为数据传输对象（DTO）来传递数据。JavaBean还可以用于业务处理，例如计算、验证等。通过封装属性和提供Getter和Setter方法，可以使JavaBean更加灵活和易于维护。</p>
<p>在JavaBean中，通常使用IDE（如Eclipse、IntelliJ IDEA等）来生成Getter和Setter方法，以及toString、equals和hashCode方法等，以提高开发效率。此外，JavaBean还可以使用注解来简化代码，例如@JsonIgnore、@JsonInclude等，以控制JavaBean的序列化和反序列化行为。</p>
<p>JavaWeb技术还包括一些基础设施组件，如JavaServer Pages标准标签库（JSTL）、Java Servlet API和JavaServer Faces（JSF）。这些组件为JavaWeb应用程序提供了许多基本功能，例如会话管理、安全性和数据持久性等。</p>
<p>与其他Web开发技术相比，JavaWeb应用程序具有更好的可扩展性、可靠性和安全性。它还支持各种开发模式和编程语言，使得开发人员可以更加灵活地设计和构建Web应用程序。</p>
<p><strong>Tomcat是一个开源的Web应用服务器，</strong>它是Java Servlet和JavaServer Pages（JSP）的一个实现。它支持Java平台上的多种Web开发技术，如Java Servlet、JavaServer Pages、Java Expression Language和Java WebSocket。Tomcat是使用Java语言编写的，可以在各种操作系统上运行，例如Windows、Linux和Mac OS等。它是一种轻量级的Web服务器，可作为独立的服务器或嵌入到其他应用程序中使用。</p>
<p>Tomcat是一个Java Servlet<strong>容器</strong>。Java Servlet是一种基于Java语言的Web编程技术，它能够处理客户端的请求并返回响应，可以用于构建动态Web应用程序。Tomcat提供了一个环境，让我们可以在其中部署和运行Java Servlet和JavaServer Pages应用程序。它还提供了许多其他功能，如连接池、安全管理、负载均衡和集群等。</p>
<p>在Java Web应用程序开发中，通常需要一个Web服务器来运行和测试应用程序。Tomcat就是这样一个服务器，我们可以将Web应用程序部署到Tomcat中进行测试和运行。Tomcat的安装和配置都比较简单，而且它的性能也比较高，因此成为了Java Web开发中最流行的Web服务器之一。</p>
<p><strong>JavaSE和JavaEE都是Java编程语言的不同版本。</strong></p>
<p>JavaSE（Java Standard Edition）是Java编程语言的标准版本，它包含了Java编程语言的基本功能，如Java语言核心库、Java虚拟机、Java开发工具包等，它可以用于开发桌面应用程序、嵌入式系统、游戏等。</p>
<p>JavaEE（Java Enterprise Edition）是针对企业级应用开发的Java版本，它包含了JavaSE的所有功能，并增加了一些企业级应用开发所需的高级功能，如Web应用程序开发、分布式应用程序开发、企业级服务开发等。JavaEE还提供了一些标准的API和技术，如Java Servlet、JavaServer Pages（JSP）、Java Message Service（JMS）等，使得企业级应用程序的开发更加容易和高效。</p>
<p>总的来说，JavaSE适用于开发基本的应用程序，而JavaEE适用于开发更加复杂和高级的企业级应用程序。</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb</tag>
      </tags>
  </entry>
  <entry>
    <title>分治法</title>
    <url>/2021/05/14/%E5%88%86%E6%B2%BB%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="分治法"><a href="#分治法" class="headerlink" title="分治法"></a>分治法</h1><p>分治法是一种解决问题的思想，它将一个大问题分解为若干个小问题，然后递归地解决每个小问题，最终将各个小问题的结果合并起来得到大问题的解。分治法通常包括以下三个步骤：</p>
<ol>
<li><p>分解问题：将原问题划分为若干个规模较小、相互独立、与原问题形式相同的子问题。</p>
</li>
<li><p>解决问题：递归地解决各个子问题。如果子问题的规模足够小，可以直接求解。</p>
</li>
<li><p>合并问题：将各个子问题的结果合并为原问题的解。</p>
</li>
</ol>
<p>分治法的典型应用包括排序算法（例如归并排序、快速排序）、查找算法（例如二分查找）、计算几何问题（例如最近点对问题）等。在使用分治法时，需要注意以下几点：</p>
<ol>
<li><p>确定好子问题的规模和划分方式。</p>
</li>
<li><p>确定好递归终止条件，避免出现死递归。</p>
</li>
<li><p>合并子问题的结果时要注意合并顺序和合并规则。</p>
</li>
<li><p>对于一些复杂的问题，可以考虑采用优化策略，例如记忆化搜索、动态规划等。</p>
</li>
</ol>
<p>总之，分治法是一种有力的问题解决方法，能够有效地提高问题的求解效率，但在具体实现时需要注意细节问题。</p>
<p>以下是一个简单的Java代码示例，展示了如何使用分治法递归求解一个数组中的最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DivideAndConquerExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[start];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> leftMax = max(nums, start, mid);</span><br><span class="line">        <span class="keyword">int</span> rightMax = max(nums, mid + <span class="number">1</span>, end);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftMax, rightMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">2</span>, <span class="number">5</span>, -<span class="number">3</span>, <span class="number">10</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> max = max(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Max number is &quot;</span> + max);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的代码中，max方法使用了递归的方式，将原问题分解成两个子问题，分别求解左半部分和右半部分的最大值，最后将两个子问题的解合并起来，得到原问题的解。在每次递归中，都将数组的范围缩小一半，直到范围只有一个数，这时直接返回该数作为结果。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>过河卒</title>
    <url>/2020/06/22/%E8%BF%87%E6%B2%B3%E5%8D%92/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="洛谷-P１００２"><a href="#洛谷-P１００２" class="headerlink" title="洛谷-P１００２"></a>洛谷-P１００２</h1><p>棋盘上 A<em>A</em> 点有一个过河卒，需要走到目标 B<em>B</em> 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C<em>C</em>点有一个对方的马，该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。</p>
<p>棋盘用坐标表示，A<em>A</em> 点 (0, 0)(0,0)、B<em>B</em> 点 (n, m)(<em>n</em>,<em>m</em>)，同样马的位置坐标是需要给出的。</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/vg6k477j.png" alt="img"></p>
<p>现在要求你计算出卒从 A<em>A</em> 点能够到达 B<em>B</em> 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> x,y,mx,my;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">30</span>][<span class="number">30</span>],map[<span class="number">30</span>][<span class="number">30</span>];<span class="comment">//地图位置</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bj</span><span class="params">(<span class="keyword">int</span> mmx,<span class="keyword">int</span> mmy)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    map[mmx][mmy]=<span class="number">1</span>;</span><br><span class="line">    map[mmx<span class="number">-1</span>][mmy<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx<span class="number">-2</span>][mmy<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx<span class="number">-2</span>][mmy+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx<span class="number">-1</span>][mmy+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx+<span class="number">1</span>][mmy<span class="number">-2</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx+<span class="number">2</span>][mmy<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx+<span class="number">2</span>][mmy+<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    map[mmx+<span class="number">1</span>][mmy+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="comment">//被控制点位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;</span><br><span class="line">    a[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;mx&gt;&gt;my;</span><br><span class="line">    <span class="built_in">bj</span>(mx,my);<span class="comment">//调用</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=x+<span class="number">1</span>;i++)<span class="comment">//x+1移动位置,避免负数,下同</span></span><br><span class="line">    &#123;    <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=y+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">           a[i][j]=a[i<span class="number">-1</span>][j]+a[i][j<span class="number">-1</span>];<span class="comment">//加法原理</span></span><br><span class="line">			<span class="keyword">if</span>(map[i<span class="number">-1</span>][j<span class="number">-1</span>])a[i][j]=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">    cout&lt;&lt;a[x+<span class="number">1</span>][y+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="解题思想"><a href="#解题思想" class="headerlink" title="解题思想"></a>解题思想</h2><h3 id="1-递推"><a href="#1-递推" class="headerlink" title="1.递推"></a>1.递推</h3><p>a[i][j]=a[i-1][j]+a[i][j-1]</p>
<h3 id="2-加法原理"><a href="#2-加法原理" class="headerlink" title="2.加法原理"></a>2.加法原理</h3><p>加法原理是分类<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=68529775&ss_c=ssc.citiao.link">计数原理</a>，常用于排列组合中，具体是指：做一件事，完成它可以有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10026/20171026064801-1372440496.jpg/0" alt="img"></a>类方法，在第一类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/22553/20171026064801-940139457.jpg/0" alt="img"></a>种不同方法，在第二类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/6598/20171026064801-334726554.jpg/0" alt="img"></a>种不同方法，……，在第<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10026/20171026064801-1372440496.jpg/0" alt="img"></a>类方法中有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/10627/20171026064801-1296215814.jpg/0" alt="img"></a>种不同方法，那么完成这件事共有<a href="javascript:"><img src="https://pic.baike.soso.com/ugc/baikepic2/7294/20171026064801-809325235.jpg/0" alt="img"></a>种不同的方法。</p>
<h3 id="3-动态分配"><a href="#3-动态分配" class="headerlink" title="3.动态分配"></a>3.动态分配</h3><p>动态分配是指在程序运行过程中根据需要动态地分配内存空间。在静态分配中，程序在编译时就已经确定了变量的内存空间大小，而在动态分配中，程序可以根据实际需要动态地分配所需的内存空间，这样可以更加灵活地使用内存，避免浪费。在C++中，可以使用new关键字动态分配内存，使用delete关键字释放内存。在Java中，可以使用new关键字动态分配内存，但是Java具有自动内存管理机制，所以不需要手动释放内存，由垃圾回收机制来回收没有被使用的内存空间。</p>
<h3 id="4-避免越界"><a href="#4-避免越界" class="headerlink" title="4.避免越界"></a>4.避免越界</h3><p>越界是指访问数组或指针指向的内存空间时，访问了超过其边界的部分，这种行为是不安全的，可能会导致程序崩溃、数据丢失等问题。为了避免越界，可以采取以下措施：</p>
<ol>
<li><p>在编写代码时，要注意数组和指针的边界，不要越界访问。</p>
</li>
<li><p>使用一些工具来辅助检测越界问题，例如静态代码分析工具、动态内存分析工具、代码审查等。</p>
</li>
<li><p>对于数组和指针的访问，可以使用一些防止越界的技术，例如使用STL容器代替原生数组、使用智能指针代替裸指针、使用异常处理机制等。</p>
</li>
<li><p>在使用数组和指针时，要注意变量的范围和生命周期，避免因为变量已经被销毁而导致访问已经失效的内存空间。</p>
</li>
<li><p>如果需要访问超过数组或指针边界之外的内存空间，可以考虑使用边界检查技术或者使用安全的库函数，例如memcpy_s、strncpy_s等。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>递归算法设计</title>
    <url>/2021/05/14/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="递归算法设计"><a href="#递归算法设计" class="headerlink" title="递归算法设计"></a>递归算法设计</h1><h1 id="递归定义"><a href="#递归定义" class="headerlink" title="递归定义"></a>递归定义</h1><p>递归：函数在定义中又调用函数自身的方法</p>
<p>递归算法是一种函数自己调用自己的算法，它通常用于解决具有递归结构的问题。递归算法的设计通常包括以下步骤：</p>
<ol>
<li><p>定义递归函数的输入和输出：确定递归函数的输入参数和输出结果，这有助于我们理解问题的本质和解决方案。</p>
</li>
<li><p>确定递归结束条件：在设计递归算法时，必须明确递归结束的条件，否则递归可能会无限进行下去，导致栈溢出等问题。</p>
</li>
<li><p>确定递归调用的规则：递归算法必须满足向基本情况逼近的原则，即每次递归调用都必须使问题规模减小，最终到达递归结束条件。</p>
</li>
<li><p>确定递归合并的规则：在递归算法中，需要将每次递归调用的结果合并起来得到最终的结果。</p>
</li>
<li><p>优化递归算法：递归算法在处理大规模数据时可能会导致栈溢出等问题，因此需要进行一些优化，如尾递归优化、循环迭代等。</p>
</li>
</ol>
<p>需要注意的是，递归算法的设计需要注意递归深度和空间复杂度，尽量避免递归深度过深或空间复杂度过高的情况。</p>
<p>下面是一些Java的示例代码：</p>
<ol>
<li>MyBatis框架的示例代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 配置文件mybatis-config.xml中定义了数据源和SQL映射文件，可以通过如下方式获取SqlSessionFactory对象</span><br><span class="line">String resource = &quot;mybatis-config.xml&quot;;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">// 获取SqlSession对象，用于执行SQL语句</span><br><span class="line">SqlSession session = sqlSessionFactory.openSession();</span><br><span class="line">try &#123;</span><br><span class="line">  // 执行查询操作</span><br><span class="line">  List&lt;User&gt; userList = session.selectList(&quot;com.example.mapper.UserMapper.selectUsers&quot;);</span><br><span class="line"></span><br><span class="line">  // 执行插入操作</span><br><span class="line">  User user = new User(&quot;Tom&quot;, 20);</span><br><span class="line">  session.insert(&quot;com.example.mapper.UserMapper.insertUser&quot;, user);</span><br><span class="line">  session.commit();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">  session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>static关键字的示例代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MyClass &#123;</span><br><span class="line">  // 静态变量</span><br><span class="line">  static int count = 0;</span><br><span class="line"></span><br><span class="line">  // 静态方法</span><br><span class="line">  public static void increaseCount() &#123;</span><br><span class="line">    count++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 实例方法</span><br><span class="line">  public void printCount() &#123;</span><br><span class="line">    System.out.println(&quot;Count: &quot; + count);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用静态变量和方法</span><br><span class="line">MyClass.increaseCount();</span><br><span class="line">MyClass obj1 = new MyClass();</span><br><span class="line">obj1.printCount(); // Output: Count: 1</span><br><span class="line"></span><br><span class="line">// 再次使用静态变量和方法</span><br><span class="line">MyClass.increaseCount();</span><br><span class="line">MyClass obj2 = new MyClass();</span><br><span class="line">obj2.printCount(); // Output: Count: 2</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>递归算法的示例代码</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class RecursiveAlgorithm &#123;</span><br><span class="line">  // 计算n的阶乘</span><br><span class="line">  public static int factorial(int n) &#123;</span><br><span class="line">    if (n == 0) &#123;</span><br><span class="line">      return 1; // 结束条件</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return n * factorial(n - 1); // 调用规则</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 计算斐波那契数列的第n项</span><br><span class="line">  public static int fibonacci(int n) &#123;</span><br><span class="line">    if (n &lt;= 1) &#123;</span><br><span class="line">      return n; // 结束条件</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      return fibonacci(n - 1) + fibonacci(n - 2); // 调用规则</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用递归算法计算阶乘和斐波那契数列</span><br><span class="line">int n = 5;</span><br><span class="line">int factorial = RecursiveAlgorithm.factorial(n);</span><br><span class="line">int fibonacci = RecursiveAlgorithm.fibonacci(n);</span><br><span class="line">System.out.println(n + &quot;! = &quot; + factorial); // Output: 5! = 120</span><br><span class="line">System.out.println(&quot;Fibonacci(&quot; + n + &quot;) = &quot; + fibonacci); // Output: Fibonacci(5) = 5</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>static局部变量辨析</title>
    <url>/2020/08/29/static%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="普通局部变量与static局部变量的区别"><a href="#普通局部变量与static局部变量的区别" class="headerlink" title="普通局部变量与static局部变量的区别"></a>普通局部变量与static局部变量的区别</h2><h3 id="内存分配和释放"><a href="#内存分配和释放" class="headerlink" title="内存分配和释放"></a>内存分配和释放</h3><h4 id="1、普通局部变量只有执行到变量定义的语句的时候才分配空间。"><a href="#1、普通局部变量只有执行到变量定义的语句的时候才分配空间。" class="headerlink" title="1、普通局部变量只有执行到变量定义的语句的时候才分配空间。"></a>1、普通局部变量只有执行到变量定义的语句的时候才分配空间。</h4><h4 id="2、static局部变量在编译阶段（函数还没有执行），变量的空间已经分配。"><a href="#2、static局部变量在编译阶段（函数还没有执行），变量的空间已经分配。" class="headerlink" title="2、static局部变量在编译阶段（函数还没有执行），变量的空间已经分配。"></a>2、static局部变量在编译阶段（函数还没有执行），变量的空间已经分配。</h4><h4 id="3、普通局部变量离开作用域-，自动释放其空间，也就无法使用此变量。"><a href="#3、普通局部变量离开作用域-，自动释放其空间，也就无法使用此变量。" class="headerlink" title="3、普通局部变量离开作用域{}，自动释放其空间，也就无法使用此变量。"></a>3、普通局部变量离开作用域{}，自动释放其空间，也就无法使用此变量。</h4><h4 id="4、static局部变量只有在整个程序结束的时候才将其自动释放。"><a href="#4、static局部变量只有在整个程序结束的时候才将其自动释放。" class="headerlink" title="4、static局部变量只有在整个程序结束的时候才将其自动释放。"></a>4、static局部变量只有在整个程序结束的时候才将其自动释放。</h4><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><h4 id="1、普通局部变量不初始化，为随机值。"><a href="#1、普通局部变量不初始化，为随机值。" class="headerlink" title="1、普通局部变量不初始化，为随机值。"></a>1、普通局部变量不初始化，为随机值。</h4><h4 id="2、static局部变量不初始化，为0。"><a href="#2、static局部变量不初始化，为0。" class="headerlink" title="2、static局部变量不初始化，为0。"></a>2、static局部变量不初始化，为0。</h4><h4 id="3、static局部变量初始化语句只有第一次执行时有效，但是可以赋值多次。"><a href="#3、static局部变量初始化语句只有第一次执行时有效，但是可以赋值多次。" class="headerlink" title="3、static局部变量初始化语句只有第一次执行时有效，但是可以赋值多次。"></a>3、static局部变量初始化语句只有第一次执行时有效，但是可以赋值多次。</h4><h4 id="4、static局部变量只能用它常量初始化。"><a href="#4、static局部变量只能用它常量初始化。" class="headerlink" title="4、static局部变量只能用它常量初始化。"></a>4、static局部变量只能用它常量初始化。</h4><p><strong>成员变量和局部变量的区别<br>   (1)在类中的位置不同<br>     成员变量：类中方法外<br>     局部变量：方法定义中或者方法声明上<br>   (2)在内存中的位置不同<br>     成员变量：在堆中<br>     局部变量：在栈中<br>   (3)生命周期不同<br>     成员变量：随着对象的创建而存在，随着对象的消失而消失<br>     局部变量：随着方法的调用而存在，随着方法的调用完毕而消失<br>   (4)初始化值不同<br>     成员变量：有默认值<br>     局部变量：没有默认值，必须定义，赋值，然后才能使用</strong></p>
<h3 id="5-static是Java中的关键字"><a href="#5-static是Java中的关键字" class="headerlink" title="5.static是Java中的关键字"></a>5.<code>static</code>是Java中的关键字</h3><p>表示静态的、共享的意思。在Java中，<code>static</code>可以用来修饰类、方法和变量。</p>
<p>当<code>static</code>修饰一个变量时，该变量被称为静态变量或类变量，可以被类的所有实例共享。在内存中，静态变量被存储在静态存储区中，只会被初始化一次。由于静态变量的共享性，它们可以用来表示所有对象共有的属性，比如类的常量。</p>
<p>当<code>static</code>修饰一个方法时，该方法被称为静态方法或类方法，可以直接通过类名调用，不需要实例化类对象。静态方法只能访问静态变量和静态方法，不能访问非静态的实例变量和实例方法。</p>
<p>当<code>static</code>修饰一个类时，该类被称为静态内部类，可以在外部类的静态方法中直接创建静态内部类的实例，而不需要创建外部类的实例。静态内部类和普通内部类一样，可以访问外部类的静态变量和静态方法，但不能访问非静态的实例变量和实例方法。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis框架</title>
    <url>/2021/02/22/MyBatis%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="1-什么是框架"><a href="#1-什么是框架" class="headerlink" title="1.什么是框架?"></a>1.什么是框架?</h2><pre><code>     **框架（Framework）是整个或部分系统的可重用设计，表现为一组抽象构件及构件实例间交互的方法;另一种定义认为，框架是可被应用开发者定制的应用骨架。前者是从应用方面而后者是从目的方面给出的定义。简而言之，框架其实就是某种应用的半成品，就是一组组件，供你选用完成你自己的系统。就是使用别人搭好的舞台，你来做表演。而且，框架一般是成熟的，不断升级的软件。**
</code></pre>
<h2 id="2-mybatis"><a href="#2-mybatis" class="headerlink" title="2.mybatis"></a>2.mybatis</h2><p><strong>MyBatis是一个开源的持久层框架</strong>，它可以帮助<strong>开发者避免手写JDBC代码，简化数据访问层（DAO）的开发</strong>。MyBatis通过XML或注解的方式将Java对象映射到数据库表中的记录，使得开发者可以通过面向对象的方式来操作数据库，而不必关心底层的SQL语句和数据访问细节。同时，MyBatis支持动态SQL语句的构建，可以根据不同的条件动态生成SQL语句，提高了SQL语句的可重用性和灵活性。MyBatis还提供了多种高级特性，例如缓存、事务管理、延迟加载等，可以帮助开发者更加高效地使用数据库。</p>
<p>MyBatis的优点不仅仅局限于简化DAO开发和动态SQL语句的构建，它还可以与Spring框架等其他框架无缝集成，提高开发的效率和可维护性。此外，MyBatis还具备良好的扩展性和灵活性，可以根据项目实际需求进行自定义开发和配置。总的来说，MyBatis是一个非常优秀的持久层框架，被广泛应用于各种Java项目中。</p>
<p><strong>MyBatis的整合能力非常强大，可以与Spring、Spring Boot、Spring MVC等框架无缝集成</strong>，使得开发者可以更加方便地使用MyBatis进行数据访问。同时，MyBatis还具有良好的可扩展性和灵活性，可以通过自定义插件、类型处理器等方式满足项目实际需求。此外，MyBatis的性能也非常出色，通过缓存机制和延迟加载等技术可以有效地提高数据库访问的效率。综上所述，MyBatis是一个非常优秀的持久层框架，被广泛应用于各种Java项目中。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java框架</tag>
      </tags>
  </entry>
  <entry>
    <title>DFS迷宫</title>
    <url>/2021/07/28/DFS%E8%BF%B7%E5%AE%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="DFS迷宫"><a href="#DFS迷宫" class="headerlink" title="DFS迷宫"></a>DFS迷宫</h1><p>DFS（深度优先搜索）可以用来解决迷宫问题。以下是一个使用DFS算法解决迷宫问题的示例代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义迷宫</span></span><br><span class="line"><span class="variable">$maze</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义起点和终点</span></span><br><span class="line"><span class="variable">$start</span> = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">0</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">0</span>);</span><br><span class="line"><span class="variable">$end</span> = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span> =&gt; <span class="number">4</span>, <span class="string">&#x27;y&#x27;</span> =&gt; <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义搜索函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params"><span class="variable">$maze</span>, <span class="variable">$start</span>, <span class="variable">$end</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 标记已经访问过的位置</span></span><br><span class="line">    <span class="variable">$visited</span> = <span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="number">0</span>; <span class="variable">$i</span> &lt; count(<span class="variable">$maze</span>); <span class="variable">$i</span>++) &#123;</span><br><span class="line">        <span class="variable">$visited</span>[<span class="variable">$i</span>] = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="variable">$j</span> = <span class="number">0</span>; <span class="variable">$j</span> &lt; count(<span class="variable">$maze</span>[<span class="variable">$i</span>]); <span class="variable">$j</span>++) &#123;</span><br><span class="line">            <span class="variable">$visited</span>[<span class="variable">$i</span>][<span class="variable">$j</span>] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方向数组</span></span><br><span class="line">    <span class="variable">$directions</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="keyword">array</span>(<span class="number">0</span>, <span class="number">1</span>),   <span class="comment">// 右</span></span><br><span class="line">        <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">0</span>),   <span class="comment">// 下</span></span><br><span class="line">        <span class="keyword">array</span>(<span class="number">0</span>, -<span class="number">1</span>),  <span class="comment">// 左</span></span><br><span class="line">        <span class="keyword">array</span>(-<span class="number">1</span>, <span class="number">0</span>)   <span class="comment">// 上</span></span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义DFS函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params"><span class="variable">$maze</span>, <span class="variable">$visited</span>, <span class="variable">$start</span>, <span class="variable">$end</span>, <span class="variable">$directions</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 判断是否到达终点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$start</span>[<span class="string">&#x27;x&#x27;</span>] == <span class="variable">$end</span>[<span class="string">&#x27;x&#x27;</span>] &amp;&amp; <span class="variable">$start</span>[<span class="string">&#x27;y&#x27;</span>] == <span class="variable">$end</span>[<span class="string">&#x27;y&#x27;</span>]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 标记当前位置已经访问过</span></span><br><span class="line">        <span class="variable">$visited</span>[<span class="variable">$start</span>[<span class="string">&#x27;x&#x27;</span>]][<span class="variable">$start</span>[<span class="string">&#x27;y&#x27;</span>]] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历四个方向</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$directions</span> <span class="keyword">as</span> <span class="variable">$d</span>) &#123;</span><br><span class="line">            <span class="variable">$next</span> = <span class="keyword">array</span>(<span class="string">&#x27;x&#x27;</span> =&gt; <span class="variable">$start</span>[<span class="string">&#x27;x&#x27;</span>] + <span class="variable">$d</span>[<span class="number">0</span>], <span class="string">&#x27;y&#x27;</span> =&gt; <span class="variable">$start</span>[<span class="string">&#x27;y&#x27;</span>] + <span class="variable">$d</span>[<span class="number">1</span>]);</span><br><span class="line">            <span class="comment">// 判断下一个位置是否可以访问</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$next</span>[<span class="string">&#x27;x&#x27;</span>] &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$next</span>[<span class="string">&#x27;x&#x27;</span>] &lt; count(<span class="variable">$maze</span>) &amp;&amp;</span><br><span class="line">                <span class="variable">$next</span>[<span class="string">&#x27;y&#x27;</span>] &gt;= <span class="number">0</span> &amp;&amp; <span class="variable">$next</span>[<span class="string">&#x27;y&#x27;</span>] &lt; count(<span class="variable">$maze</span>[<span class="variable">$next</span>[<span class="string">&#x27;x&#x27;</span>]]) &amp;&amp;</span><br><span class="line">                <span class="variable">$maze</span>[<span class="variable">$next</span>[<span class="string">&#x27;x&#x27;</span>]][<span class="variable">$next</span>[<span class="string">&#x27;y&#x27;</span>]] == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                !<span class="variable">$visited</span>[<span class="variable">$next</span>[<span class="string">&#x27;x&#x27;</span>]][<span class="variable">$next</span>[<span class="string">&#x27;y&#x27;</span>]]) &#123;</span><br><span class="line">                <span class="comment">// 递归搜索下一个位置</span></span><br><span class="line">                <span class="keyword">if</span> (dfs(<span class="variable">$maze</span>, <span class="variable">$visited</span>, <span class="variable">$next</span>, <span class="variable">$end</span>, <span class="variable">$directions</span>)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用DFS函数</span></span><br><span class="line">    <span class="keyword">return</span> dfs(<span class="variable">$maze</span>, <span class="variable">$visited</span>, <span class="variable">$start</span>, <span class="variable">$end</span>, <span class="variable">$directions</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用搜索函数</span></span><br><span class="line"><span class="keyword">if</span> (search(<span class="variable">$maze</span>, <span class="variable">$start</span>, <span class="variable">$end</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;可以到达终点&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;无法到达终点&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>以上代码定义了一个迷宫，起点为左上角，终点为右下角。然后使用DFS算法搜索从起点到终点的路径。如果可以找到路径，输出“可以到达终点”，否则输出“无法到达终点”。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>实践</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP语法</title>
    <url>/2021/03/13/PHP%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="PHP语法"><a href="#PHP语法" class="headerlink" title="PHP语法"></a>PHP语法</h1><p>PHP是一种脚本语言，用于开发Web应用程序。下面是PHP的基本语法：</p>
<ol>
<li>PHP代码必须以<?php开始，以?>结束。</li>
<li>PHP中的语句必须以分号（;）结尾。</li>
<li>PHP不区分大小写，但是建议使用小写字母。</li>
<li>PHP中的注释可以使用//或者#，也可以使用多行注释/* */。</li>
<li>变量必须以$符号开始，后面跟着变量名。</li>
<li>PHP中的变量不需要先声明，可以直接使用。</li>
<li>字符串可以使用单引号或双引号括起来。</li>
<li>PHP中可以使用if、else、for、foreach、while等控制结构。</li>
</ol>
<p>下面是一个简单的PHP代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 输出Hello World</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>1.PHP echo 和 print 语句</strong></p>
<p>echo 和 print 区别:</p>
<ul>
<li>echo - 可以输出一个或多个字符串</li>
<li>print - 只允许输出一个字符串，返回值总为 1</li>
</ul>
<p><strong>提示：</strong>echo 输出的速度比 print 快， echo 没有返回值，print有返回值1。</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   </span><br><span class="line">    <span class="variable">$name</span> =<span class="string">&#x27;小明&#x27;</span>;<span class="comment">//$定义变量</span></span><br><span class="line">    <span class="variable">$score</span> = <span class="number">78</span>;</span><br><span class="line">    <span class="keyword">if</span> (is_int(<span class="variable">$score</span>) ||is_float(<span class="variable">$score</span>)) &#123;<span class="comment">//判断成绩为数字</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$score</span>&gt;=<span class="number">90</span> &amp;&amp; <span class="variable">$score</span>&lt;=<span class="number">100</span>)&#123;</span><br><span class="line">      <span class="variable">$str</span> =<span class="string">&#x27;A级&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$score</span>&gt;=<span class="number">80</span> &amp;&amp; <span class="variable">$score</span>&lt;<span class="number">90</span>) &#123;</span><br><span class="line">      <span class="variable">$str</span>=<span class="string">&#x27;B级&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$score</span>&gt;=<span class="number">70</span> &amp;&amp; <span class="variable">$score</span>&lt;<span class="number">80</span>) &#123;</span><br><span class="line">      <span class="variable">$str</span>=<span class="string">&#x27;C级&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$score</span>&gt;=<span class="number">60</span> &amp;&amp; <span class="variable">$score</span>&lt;<span class="number">70</span>) &#123;</span><br><span class="line">      <span class="variable">$str</span>=<span class="string">&#x27;D级&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">elseif</span>(<span class="variable">$score</span>&gt;=<span class="number">0</span> &amp;&amp; <span class="variable">$score</span>&lt;<span class="number">60</span>) &#123;</span><br><span class="line">      <span class="variable">$str</span>=<span class="string">&#x27;E级&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$str</span> =<span class="string">&#x27;学生成绩必须在0-100之间&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable">$str</span> =<span class="string">&#x27;输入学生的成绩不是数值&#x27;</span>;</span><br><span class="line">    &#125;<span class="comment">//根据不同情况定义不同需要输出的信息字符串</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;h2&gt;学生成绩等级&lt;/h2&gt;&lt;p&gt;学生姓名：&quot;</span>.<span class="variable">$name</span>.<span class="string">&quot;&lt;p&gt;学生分数：&quot;</span>.<span class="variable">$score</span>.<span class="string">&quot;分&lt;p&gt;成绩等级：&quot;</span>.<span class="variable">$str</span>;<span class="comment">//每个变量输出需要用符号隔开, .皆可</span></span><br><span class="line"> <span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>PHP是一种脚本语言，用于开发Web应用程序。下面是PHP的基本语法：</p>
<ol>
<li>PHP代码必须以<?php开始，以?>结束。</li>
<li>PHP中的语句必须以分号（;）结尾。</li>
<li>PHP不区分大小写，但是建议使用小写字母。</li>
<li>PHP中的注释可以使用//或者#，也可以使用多行注释/* */。</li>
<li>变量必须以$符号开始，后面跟着变量名。</li>
<li>PHP中的变量不需要先声明，可以直接使用。</li>
<li>字符串可以使用单引号或双引号括起来。</li>
<li>PHP中可以使用if、else、for、foreach、while等控制结构。</li>
</ol>
<p>下面是一个简单的PHP代码示例：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 输出Hello World</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>uni-app起步</title>
    <url>/2023/05/12/uni-app%E8%B5%B7%E6%AD%A5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="uni-app"><a href="#uni-app" class="headerlink" title="uni-app"></a>uni-app</h1><p>Uniapp是一种流行的开源框架，允许开发人员使用单个代码库创建跨平台移动应用程序。它支持多个平台，包括iOS、Android和Web，并允许开发人员利用他们对HTML、CSS和JavaScript的现有知识构建高质量的应用程序。 Uniapp为开发人员提供了一个灵活且易于使用的环境，用于创建可以分发给各种用户的移动应用。它被全世界的开发人员广泛使用，并拥有一个庞大的贡献者社区，不断改进其功能和功能。</p>
<h2 id="上手步骤"><a href="#上手步骤" class="headerlink" title="上手步骤"></a>上手步骤</h2><p>要开始使用Uniapp，您需要完成以下步骤：</p>
<ol>
<li><p>安装HBuilderX：HBuilderX是Uniapp的官方IDE，您需要安装它才能开始使用Uniapp。您可以从官方网站（<a href="https://www.dcloud.io/hbuilderx.html%EF%BC%89%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85HBuilderX%E3%80%82">https://www.dcloud.io/hbuilderx.html）下载和安装HBuilderX。</a></p>
</li>
<li><p>创建一个Uniapp项目：在HBuilderX中，选择“文件”&gt;“新建”&gt;“项目”&gt;“Uniapp”&gt;“创建新项目”。在创建项目时，您可以选择使用Vue.js或Nvue.js作为框架。</p>
</li>
<li><p>学习Uniapp文档和示例：Uniapp有详细的文档和示例，您可以从官方网站（<a href="https://uniapp.dcloud.io/%EF%BC%89%E8%8E%B7%E5%8F%96%E8%BF%99%E4%BA%9B%E8%B5%84%E6%BA%90%E3%80%82%E5%9C%A8%E5%AD%A6%E4%B9%A0%E6%96%87%E6%A1%A3%E5%92%8C%E7%A4%BA%E4%BE%8B%E6%97%B6%EF%BC%8C%E6%82%A8%E5%8F%AF%E4%BB%A5%E4%BA%86%E8%A7%A3Uniapp%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E3%80%81%E5%A6%82%E4%BD%95%E6%9E%84%E5%BB%BA%E9%A1%B5%E9%9D%A2%E3%80%81%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E7%BB%84%E4%BB%B6%E7%AD%89%E3%80%82">https://uniapp.dcloud.io/）获取这些资源。在学习文档和示例时，您可以了解Uniapp的基本概念、如何构建页面、如何添加组件等。</a></p>
</li>
<li><p>实践和调试：您可以使用HBuilderX的模拟器或将应用程序部署到真实设备上进行调试。在实践和调试过程中，您可以了解Uniapp的工作原理，并学习如何解决常见问题。</p>
</li>
</ol>
<p>学习Uniapp需要时间和耐心，掌握了它，将能够创建<strong>高质量的跨平台移动应用程序。</strong></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title>Revit上手实践</title>
    <url>/2023/06/06/Revit%E4%B8%8A%E6%89%8B%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Revit上手实践"><a href="#Revit上手实践" class="headerlink" title="Revit上手实践"></a>Revit上手实践</h1><h4 id="1-3D模型（Sketch-up-BIM-3D-MAX"><a href="#1-3D模型（Sketch-up-BIM-3D-MAX" class="headerlink" title="1.3D模型（Sketch up, BIM,3D MAX)"></a>1.<strong>3D模型（Sketch up, BIM,3D MAX)</strong></h4><p>revit支持su文件，需要安装插件AutodeskImportSkp</p>
<p>插件将自动转换可以保存为rvt文件</p>
<h4 id="2-Revit标注工具"><a href="#2-Revit标注工具" class="headerlink" title="2.Revit标注工具"></a>2.Revit标注工具</h4><p>常见的图纸标注操作：</p>
<ol>
<li><p>标注尺寸：在视图中选择“尺寸”工具，在需要标注的两个点之间划出一条尺寸线，然后输入数值即可。</p>
</li>
<li><p>标注标高：在视图中选择“标高”工具，在需要标注的墙体或结构上点击一下即可标注出标高。</p>
</li>
<li><p>标注面积：在视图中选择“面积”工具，在需要标注的区域内划出一条边框，然后输入数值即可。</p>
</li>
<li><p>标注体积：在视图中选择“体积”工具，在需要标注的区域内划出一条边框，然后输入数值即可。</p>
</li>
<li><p>标注族参数：在视图中选择“族参数”工具，在需要标注的族上点击一下即可标注出参数名称和数值。</p>
</li>
</ol>
<p>在Revit中，还可以使用注释、标签、文字等工具对图纸进行更加详细的标注和说明。</p>
<h2 id="3-项目取消revit就先搁置了吧"><a href="#3-项目取消revit就先搁置了吧" class="headerlink" title="3.项目取消revit就先搁置了吧"></a>3.项目取消revit就先搁置了吧</h2>]]></content>
      <categories>
        <category>3D建模</category>
      </categories>
      <tags>
        <tag>revit</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL与MongoDB</title>
    <url>/2023/05/29/MySQL%E4%B8%8EMongoDB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="MySQL与MongoDB"><a href="#MySQL与MongoDB" class="headerlink" title="MySQL与MongoDB"></a>MySQL与MongoDB</h1><p>1.MySQL是一个关系型数据库管理系统（Relational Database Management System：RDBMS））由于瑞典[MySQL AB](<a href="https://baike.baidu.com/item/MySQL">https://baike.baidu.com/item/MySQL</a> AB/2620844?fromModule=lemma_inlink) 公司开发，属于 <a href="https://baike.baidu.com/item/Oracle?fromModule=lemma_inlink">Oracle</a> 旗下产品。</p>
<p>常用的关系数据库管理系统产品是<a href="https://baike.baidu.com/item/Oracle/301207?fromModule=lemma_inlink">Oracle</a>、<a href="https://baike.baidu.com/item/IBM/9190?fromModule=lemma_inlink">IBM</a>的<a href="https://baike.baidu.com/item/DB2/7034285?fromModule=lemma_inlink">DB2</a>和微软的SQL Server。</p>
<p><strong>索引</strong>是一种特殊的文件（InnoDB 数据表上的索引是表空间的一个组成部分），它们包含着对数据表里所有记录的引用指针。索引不是万能的，索引可以<strong>加快数据检索操作</strong>，但会使数据<strong>修改操作变慢</strong>。<strong>每修改数据记录，索引就必须刷新一次。</strong>为了在某种程度上弥补这一缺陷，许多 SQL 命令都有一个 <strong>DELAY_KEY_WRITE</strong> 项。这个选项的作用是暂时制止 MySQL 在该命令每插入一条新记录和每修改一条现有之后立刻对索引进行刷新，对索引的刷新将等到全部记录插入/修改完毕之后再进行。在需要把许多新记录插入某个数据表的场合，DELAY_KEY_WRITE 选项的作用将非常明显。另外，索引还会在硬盘上占用相当大的空间。因此应该只为最经常查询和最经常排序的数据列建立索引。</p>
<p>1.添加索引后，查询速度可以更快的原因是因为索引可以在某个字段上创建一个排序的快速访问结构。在MySQL中，索引是一种特殊的数据结构，它可以加速数据的查找和访问速度。当你在关系型数据库中执行一个查询时，MySQL会尽可能地使用索引来加速查询。</p>
<p>2.当你在查询中使用了索引字段时，MySQL会使用索引数据结构来快速定位符合条件的数据。这是因为索引会按照特定的顺序排序，并且可以快速定位到符合条件的数据。这个过程类似于使用字典查找单词，索引就像是字典中的目录，可以让你快速找到需要的内容。</p>
<p>3.索引可以减少数据库的扫描量，因为它可以帮助MySQL跳过不需要的行。在使用索引时，MySQL会首先检查索引，然后只扫描满足条件的行。这样可以减少需要扫描的行数，从而提高查询效率。</p>
<p>但是，在创建索引时需要注意，索引会占用磁盘空间，并且可能会降低插入和更新操作的速度。因此，需要仔细考虑在哪些字段上创建索引，并避免过多的索引。</p>
<p>2.<strong>MongoDB</strong>是一个开源的文档型数据库管理系统，采用分布式文件存储方式。它将数据存储为一个<strong>文档</strong>，数据结构非常灵活，可以存储复杂的层级结构数据。MongoDB的数据模型支持<strong>动态查询、索引、内嵌文档、动态数组</strong>等特性，使得数据的存储和检索变得非常方便和高效。MongoDB还具有很好的<strong>扩展性和可用性</strong>，能够支持海量数据存储和高并发访问。此外，MongoDB还提供了丰富的工具和API，可以轻松地进行数据的可视化和分析。</p>
<h5 id="常用命令"><a href="#常用命令" class="headerlink" title="#常用命令"></a>#常用命令</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show dbs	//显示所有数据库</span><br><span class="line"></span><br><span class="line">use	数据库名 //进入指定数据库</span><br><span class="line"></span><br><span class="line">db 			//显示当前数据库</span><br><span class="line">show collections //展示所有集合</span><br><span class="line">			CRDU</span><br><span class="line">			</span><br><span class="line">db.&lt;collection&gt;.insert()</span><br></pre></td></tr></table></figure>

<p>查询文档</p>
<p>查询集合 <code>users</code> 中的所有文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find()</span><br></pre></td></tr></table></figure>

<p>查询集合 <code>users</code> 中 <code>age</code> 大于 18 的文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find(&#123;age: &#123;$gt: 18&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>插入文档</p>
<p>向集合 <code>users</code> 中插入一条文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.insertOne(&#123;name: &quot;Alice&quot;, age: 20&#125;)</span><br></pre></td></tr></table></figure>

<p>向集合 <code>users</code> 中插入多条文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.insertMany([&#123;name: &quot;Alice&quot;, age: 20&#125;, &#123;name: &quot;Bob&quot;, age: 25&#125;])</span><br></pre></td></tr></table></figure>

<p>更新文档</p>
<p>将集合 <code>users</code> 中 <code>name</code> 为 “Alice” 的文档的 <code>age</code> 值改为 21：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.updateOne(&#123;name: &quot;Alice&quot;&#125;, &#123;$set: &#123;age: 21&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>将集合 <code>users</code> 中 <code>age</code> 大于等于 20 的文档的 <code>age</code> 值都增加 1：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.updateMany(&#123;age: &#123;$gte: 20&#125;&#125;, &#123;$inc: &#123;age: 1&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>删除文档</p>
<p>删除集合 <code>users</code> 中 <code>name</code> 为 “Alice” 的文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.deleteOne(&#123;name: &quot;Alice&quot;&#125;)</span><br></pre></td></tr></table></figure>

<p>删除集合 <code>users</code> 中 <code>age</code> 大于等于 30 的文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.deleteMany(&#123;age: &#123;$gte: 30&#125;&#125;)</span><br></pre></td></tr></table></figure>

<p>创建索引</p>
<p>在集合 <code>users</code> 中为 <code>name</code> 字段创建索引：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.createIndex(&#123;name: 1&#125;)</span><br></pre></td></tr></table></figure>

<p>聚合查询</p>
<p>对集合 <code>orders</code> 中的数据进行聚合，计算每个用户的订单总金额：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.orders.aggregate([</span><br><span class="line">  &#123;$group: &#123;_id: &quot;$user_id&quot;, total_amount: &#123;$sum: &quot;$amount&quot;&#125;&#125;&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure>

<p>分组查询</p>
<p>对集合 <code>orders</code> 中的数据按照用户分组，并计算每个用户的订单总金额：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.orders.group(&#123;</span><br><span class="line">  key: &#123;user_id: 1&#125;,</span><br><span class="line">  reduce: function(prev, cur) &#123;prev.total_amount += cur.amount&#125;,</span><br><span class="line">  initial: &#123;total_amount: 0&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>计数</p>
<p>计算集合 <code>users</code> 中的文档数量：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.count()</span><br></pre></td></tr></table></figure>

<p>排序</p>
<p>查询集合 <code>users</code> 中的所有文档，并按照 <code>age</code> 字段降序排序：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find().sort(&#123;age: -1&#125;)</span><br></pre></td></tr></table></figure>

<p>分页查询</p>
<p>查询集合 <code>users</code> 中的第 11 到 20 条文档：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.users.find().skip(10).limit(10)</span><br></pre></td></tr></table></figure>

<p>$or使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.emp.find(&#123;$or:[&#123;sal:&#123;$lt:1000&#125;&#125;,&#123;sal:&#123;$gt:2500&#125;&#125;]&#125;);</span><br><span class="line">//查询工资小于1000或大于2500的员工</span><br></pre></td></tr></table></figure>

<h4 id="MongoDB处理以亿为量级的数据"><a href="#MongoDB处理以亿为量级的数据" class="headerlink" title="MongoDB处理以亿为量级的数据"></a>MongoDB处理以亿为量级的数据</h4><p>MongoDB适合存储大规模数据，它的存储方式是基于文档的，而不是基于表的。在MongoDB中，数据以文档的形式存储在集合(collection)中，每个文档都是一个键值对的集合，可以包含嵌套文档、数组和其他复杂数据类型。</p>
<p>当需要存储亿级别的数据时，需要考虑集合的分片(sharding)和索引(indexing)两个方面。</p>
<ol>
<li>分片：MongoDB支持将数据分片存储在多个服务器上，以支持大规模数据存储和高并发查询。分片可以按照某个字段范围或哈希值进行分配，每个分片都是一个独立的MongoDB实例，可以水平扩展。</li>
<li>索引：索引可以提高查询的效率，特别是在大规模数据下。MongoDB支持多种类型的索引，如单键索引、组合索引、全文索引、地理位置索引等。在设计索引时需要考虑查询的频率和复杂度，以及索引的大小和内存占用。</li>
</ol>
<p>分片示例：假设我们有一个用户行为日志的数据库，其中包含了用户ID、行为类型、行为时间等字段。我们想要将这个数据库进行分片，以提高查询性能和可扩展性。</p>
<ol>
<li><p>定义分片键：我们可以选择用户ID作为分片键，因为用户ID是唯一的，而且用户行为可能会集中在某些用户身上，如果按照用户ID分片，可以尽可能地将数据均匀地分散到不同的分片节点上。</p>
</li>
<li><p>部署分片节点：假设我们有3台服务器可以用于存储分片数据。我们可以将用户ID分别按照范围分为3个部分，例如0-9999、10000-19999、20000-29999三个范围，然后将这三个范围的数据分别存储到三个不同的分片节点上。</p>
</li>
<li><p>路由查询请求：当客户端发送一个查询请求时，如果查询条件中包含了用户ID，我们可以根据用户ID的值将查询请求路由到对应的分片节点上。例如，如果查询条件中的用户ID为12345，则查询请求将被路由到存储范围为10000-19999的分片节点上。</p>
</li>
<li><p>聚合查询结果：如果查询请求涉及多个分片节点，我们需要将各个节点的查询结果合并起来，并返回给客户端。例如，如果我们想要查询所有行为时间在2021年1月1日到2021年1月31日之间的用户行为记录，这个查询请求可能会涉及到多个分片节点。我们需要将各个节点的查询结果合并起来，然后再返回给客户端。</p>
</li>
</ol>
<p>需要注意的是，在实际应用中，可能会遇到一些分片时的问题，例如数据不均匀、数据迁移、数据一致性等，需要采取一些措施来解决。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>数据处理入库实操</title>
    <url>/2023/05/22/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E5%85%A5%E5%BA%93%E5%AE%9E%E6%93%8D/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="python数据处理"><a href="#python数据处理" class="headerlink" title="python数据处理"></a>python数据处理</h1><h4 id="1-PyMySQL"><a href="#1-PyMySQL" class="headerlink" title="1.PyMySQL"></a>1.PyMySQL</h4><p> 一个纯 Python 实现的 MySQL 客户端库，它实现了 Python DB-API v2.0 规范，可以用于连接和操作 MySQL 数据库。</p>
<p>使用 PyMySQL 可以通过 Python 程序连接 MySQL 数据库服务器，并执行 SQL 语句进行数据的查询、插入、更新和删除等操作。PyMySQL 提供了一系列的 API 和方法，可以方便地进行数据库操作，例如连接数据库、查询数据、插入数据、更新数据、删除数据、提交事务、回滚事务等。</p>
<p>以下是使用 PyMySQL 连接 MySQL 数据库的基本步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 安装 PyMySQL 库，可以使用 pip 命令进行安装：`pip install pymysql`</span><br><span class="line"></span><br><span class="line">2. 导入 PyMySQL 模块：`import pymysql`</span><br><span class="line"></span><br><span class="line">3. 建立数据库连接：`conn = pymysql.connect(host=&#x27;localhost&#x27;, port=3306, user=&#x27;root&#x27;, passwd=&#x27;password&#x27;, db=&#x27;database_name&#x27;)`</span><br><span class="line"></span><br><span class="line">4. 创建游标对象：`cursor = conn.cursor()`</span><br><span class="line"></span><br><span class="line">5. 执行 SQL 语句：`cursor.execute(sql)`</span><br><span class="line"></span><br><span class="line">6. 获取查询结果或提交数据更改：`conn.commit()` 或 `result = cursor.fetchone()`</span><br><span class="line"></span><br><span class="line">7. 关闭游标和数据库连接：`cursor.close()` 和 `conn.close()`</span><br></pre></td></tr></table></figure>

<p>通过使用 PyMySQL，可以在 Python 程序中轻松地进行 MySQL 数据库操作，实现数据的存储、查询和处理等功能。</p>
<h4 id="2-xlrd"><a href="#2-xlrd" class="headerlink" title="2.xlrd"></a>2.xlrd</h4><p>xlrd是Python中的一个库，可以用于读取Excel文件。它可以读取Excel文件中的单元格数据，包括单元格中的文本、日期、数字等内容。使用xlrd库可以将Excel文件中的数据导入到Python程序中进行处理和分析。在使用xlrd库之前需要先安装，并通过import语句导入到Python程序中。</p>
<h4 id="3-RE"><a href="#3-RE" class="headerlink" title="3.RE"></a>3.RE</h4><p>Python中的re模块是用于处理正则表达式的模块。正则表达式是一种强大的文本匹配工具，可以用来实现字符串的搜索、替换、分割等操作。</p>
<p>以下是re模块中常用的函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- re.match(pattern, string, flags=0): 从字符串的开头开始匹配，如果匹配成功返回一个匹配对象，否则返回None。</span><br><span class="line">- re.search(pattern, string, flags=0): 在字符串中搜索匹配，如果匹配成功返回一个匹配对象，否则返回None。</span><br><span class="line">- re.findall(pattern, string, flags=0): 在字符串中搜索匹配，返回所有匹配的结果，以列表形式返回。</span><br><span class="line">- re.sub(pattern, repl, string, count=0, flags=0): 在字符串中搜索匹配，将匹配到的部分替换为指定字符串，并返回替换后的字符串。</span><br></pre></td></tr></table></figure>

<p>以上函数中的pattern参数就是正则表达式，可以使用一系列的元字符和特殊字符来表示不同的匹配规则，例如\d表示任意一个数字字符，\w表示任意一个字母数字字符等等</p>
<h4 id="4-正则表达式"><a href="#4-正则表达式" class="headerlink" title="4.正则表达式"></a>4.正则表达式</h4><p>正则表达式是一种用于匹配文本的模式，它使用一些特殊字符和元字符来表示不同的匹配规则。正则表达式可以用于搜索、替换、分割、验证等操作。</p>
<p>以下是一些常用的正则表达式元字符：</p>
<ul>
<li><pre><code> .：匹配任意一个字符，除了换行符。
 []：匹配方括号中任意一个字符，例如[A-Z]匹配任意一个大写字母。
 \d：匹配任意一个数字字符，等价于[0-9]。
 \D：匹配任意一个非数字字符，等价于[^0-9]。
 \w：匹配任意一个字母数字字符，等价于[A-Za-z0-9_]。
 \W：匹配任意一个非字母数字字符，等价于[^A-Za-z0-9_]。
 \s：匹配任意一个空白字符，包括空格、制表符、换行符等。
 \S：匹配任意一个非空白字符。
 ^：匹配字符串的开头。
 $：匹配字符串的结尾。
 *：匹配前面的字符0次或多次。
 +：匹配前面的字符1次或多次。
 ?：匹配前面的字符0次或1次。
 &#123;m,n&#125;：匹配前面的字符至少m次，至多n次。
</code></pre>
</li>
</ul>
<p>除了以上元字符外，正则表达式还支持一些特殊字符，例如\转义字符、|或操作符、()分组等。</p>
<p>需要注意的是，不同编程语言中对正则表达式的支持可能有所不同，因此在使用时需要查看相应语言的文档或教程。</p>
<p>如果需要测试正则表达式的匹配效果，可以使用一些在线工具，例如Regex101、RegExr等。</p>
]]></content>
      <categories>
        <category>数据清洗</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA回顾与拓展</title>
    <url>/2023/05/05/JAVA%E5%9B%9E%E9%A1%BE%E4%B8%8E%E6%8B%93%E5%B1%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="java回顾与拓展"><a href="#java回顾与拓展" class="headerlink" title="java回顾与拓展"></a>java回顾与拓展</h3><p>1.publicstaticvoidmain(String[] args){}</p>
<p>String[]表示的是<strong>字符串类型的数组</strong>，args表示的是<strong>传入的参数名</strong>，所以整体的意思就是主方法main(String[] args)可以接收一个<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>类型的数组，数组名字为args。（相当于<strong>入参</strong>）</p>
<p>2.抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong></p>
<p>3.synchronized 关键字声明的方法同一时间只能被一个线程访问。</p>
<p>4.transient 修饰符<br>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>
<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>
<p><code>public transient int limit = 55;   // 不会持久化</code><br><code>public int b; // 持久化</code><br>volatile 修饰符<br>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。一个 volatile 对象引用可能是 null。<br><code>public class MyRunnable implements Runnable</code><br><code>&#123;</code><br>    <code>private volatile boolean active;</code><br>    <code>public void run() &#123;</code><br>        <code>active = true;</code><br>        <code>while (active) &#123; // 第一行</code><br>            <code>// 代码</code><br>        <code>&#125;</code><br>    <code>&#125;</code><br>    <code>public void stop() &#123;</code><br>        <code>active = false; // 第二行</code><br>    <code>&#125;</code><br><code>&#125;</code><br>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 第一行 中缓冲区的 active 值被使用，那么在 第二行 的 active 值为 false 时循环不会停止。</p>
<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>
<p>5.instanceof 运算符<br><strong>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</strong></p>
<p>instanceof运算符使用格式如下：<br><code>( Object reference variable ) instanceof  (class/interface type)</code><br>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。</p>
<p>下面是一个例子：<br><code>String name = &quot;James&quot;;</code><br><code>boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</code><br>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>
<p>看下面的例子：<br><code>class Vehicle &#123;&#125;</code></p>
<p><code>public class Car extends Vehicle &#123;</code><br>   <code>public static void main(String[] args)&#123;</code><br>      <code>Vehicle a = new Car();</code><br>      <code>boolean result =  a instanceof Car;</code><br>      <code>System.out.println( result);</code><br>   <code>&#125;</code><br><code>&#125;</code><br>以上实例编译运行结果如下：true</p>
<p>6.数组定义</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      // 数组大小</span><br><span class="line">      int size = 10;</span><br><span class="line">      // 定义数组</span><br><span class="line">      double[] myList = new double[size];</span><br><span class="line">      myList[0] = 5.6;</span><br><span class="line">      myList[1] = 4.5;</span><br><span class="line">      myList[2] = 3.3;</span><br><span class="line">      myList[3] = 13.2;</span><br><span class="line">      myList[4] = 4.0;</span><br><span class="line">      myList[5] = 34.33;</span><br><span class="line">      myList[6] = 34.0;</span><br><span class="line">      myList[7] = 45.45;</span><br><span class="line">      myList[8] = 99.993;</span><br><span class="line">      myList[9] = 11123;</span><br><span class="line">      // 计算所有元素的总和</span><br><span class="line">      double total = 0;</span><br><span class="line">      for (int i = 0; i &lt; size; i++) &#123;</span><br><span class="line">         total += myList[i];</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(&quot;总和为： &quot; + total);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.封装：是指一种将抽象性函式接口的实现细节部份包装、隐藏起来的方法。<br>良好的封装能够减少耦合。<br>类内部的结构可以自由修改。<br>可以对成员变量进行更精确的控制。<br>隐藏信息，实现细节。</p>
<p>8.继承：子类继承父类的特征和行为，使得子类对象（实例）具有父类的实例域和方法，或子类从父类继承方法，使得子类具有父类相同的行为。</p>
<p>extends :<code>publicclassPenguin  extends  Animal</code>{}</p>
<p>implements:<code>public class C implements A,B &#123;&#125;</code></p>
<p><code>void eatTest() &#123;</code><br>    <code>this.eat();   // this 调用自己的方法</code><br>    <code>super.eat();  // super 调用父类方法</code><br>  }`</p>
<p><strong>如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</strong></p>
<p>9.抽象类总结规定<br>       抽象类不能被实例化(初学者很容易犯的错)，如果被实例化，就会报错，编译无法通过。只有抽象类的非抽象子类可以创建对象。<br>      抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类。<br>      抽象类中的抽象方法只是声明，不包含方法体，就是不给出方法的具体实现也就是方法的具体功能。<br>      构造方法，类方法（用 static 修饰的方法）不能声明为抽象方法。<br>      抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类。</p>
<p>10.在Java中，类的多继承是不合法，但接口允许多继承。</p>
<p>11.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Main &#123;</span><br><span class="line">    public static void main(String args[]) &#123; </span><br><span class="line">        System.out.println(fun());</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    int fun()</span><br><span class="line">    &#123;</span><br><span class="line">        return 20;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>Main 类中 main() 是一个静态函数， fun() 是一个非静态函数， Java 静态函数中不能调用非静态函数的方法</p>
<p>12.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Main &#123; </span><br><span class="line">    public static void main(String args[]) &#123; </span><br><span class="line">       String x = null; </span><br><span class="line">       giveMeAString(x); </span><br><span class="line">       System.out.println(x); </span><br><span class="line">    &#125; </span><br><span class="line">    static void giveMeAString(String y) </span><br><span class="line">    &#123; </span><br><span class="line">       y = &quot;NOWCODER&quot;; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Java 中参数通过值传递，所以 x 传到函数中不会影响原来的值。</p>
<p>13.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class intWrap &#123;</span><br><span class="line">   int x;</span><br><span class="line">&#125; </span><br><span class="line">public class Main &#123; </span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">       intWrap i = new intWrap();</span><br><span class="line">       i.x = 10;</span><br><span class="line">       intWrap j = new intWrap();</span><br><span class="line">       j.x = 20;</span><br><span class="line">       swap(i, j);</span><br><span class="line">       System.out.println(&quot;i.x = &quot; + i.x + &quot;, j.x = &quot; + j.x);</span><br><span class="line">    &#125; </span><br><span class="line">    public static void swap(intWrap i, intWrap j) &#123;</span><br><span class="line">       int temp = i.x;</span><br><span class="line">       i.x = j.x;</span><br><span class="line">       j.x = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 Java 应用程序中永远不会传递对象，而只传递对象引用。因此是按引用传递对象。</p>
<p>14.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Main &#123;</span><br><span class="line">    public static void main(String args[]) &#123;   </span><br><span class="line">        System.out.println(fun());</span><br><span class="line">    &#125;   </span><br><span class="line">    static int fun(int x = 0)</span><br><span class="line">    &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//</span><br><span class="line">编程错误</span><br><span class="line">Java 函数不允许参数设置默认值。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>15.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Test implements Cloneable</span><br><span class="line">&#123;</span><br><span class="line">    int a;</span><br><span class="line">  </span><br><span class="line">    Test cloning()</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            return (Test) super.clone();</span><br><span class="line">        &#125;</span><br><span class="line">        catch(CloneNotSupportedException e)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(&quot;CloneNotSupportedException is caught&quot;);</span><br><span class="line">            return this;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line">class Main</span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">    public static void main(String args[])</span><br><span class="line">    &#123;</span><br><span class="line">        Test obj1 = new Test();</span><br><span class="line">        Test obj2;</span><br><span class="line">        obj1.a = 10;</span><br><span class="line">        obj2 = obj1.cloning();</span><br><span class="line">        obj2.a = 20;</span><br><span class="line">  </span><br><span class="line">        System.out.println(&quot;obj1.a = &quot; + obj1.a);</span><br><span class="line">        System.out.println(&quot;obj2.a = &quot; + obj2.a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>clone( ) 方法调用时会生成多个对象的拷贝。 类只有在实现 Cloneable 接口才可以实现克隆。</p>
<p>16.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Main</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        String str = &quot;nowcoder&quot;;</span><br><span class="line">        str.toUpperCase();</span><br><span class="line">        str += &quot;wwwnowcodercom&quot;;</span><br><span class="line">        String string = str.substring(2,13);</span><br><span class="line">        string = string + str.charAt(4);;</span><br><span class="line">        System.out.println(string);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//str.toUpperCase() 将字符串小写字母转换为大写字母，但是它不会改变原始的字符串。 str.substring(x, y) 返回 ‘x&#x27;(包含) 到 ‘y&#x27;(不包含) 位置的字符串。 str.charAt(x) 返回 x 位置的字符。</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Java小实例记录</title>
    <url>/2023/05/12/Java%E5%B0%8F%E5%AE%9E%E4%BE%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="java实例"><a href="#java实例" class="headerlink" title="java实例"></a><strong>java实例</strong></h2><h3 id="1-汉诺塔算法"><a href="#1-汉诺塔算法" class="headerlink" title="1.汉诺塔算法"></a>1.汉诺塔算法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> nDisks = <span class="number">3</span>;<span class="comment">//杆子数</span></span><br><span class="line">        doTowers(nDisks, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>);</span><br><span class="line">        <span class="comment">//       碟子数/起点/中转点/终点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归 分而治之，减而治之</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doTowers</span><span class="params">(<span class="keyword">int</span> topN, <span class="keyword">char</span> from, <span class="keyword">char</span> inter, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (topN == <span class="number">1</span>)&#123;<span class="comment">//如果杆子上只剩一个碟子，即最小的碟子</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Disk 1 from &quot;</span>+ from + <span class="string">&quot; to &quot;</span> + to);</span><br><span class="line">            <span class="comment">//不再递归</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            doTowers(topN - <span class="number">1</span>, from, to, inter);</span><br><span class="line">            <span class="comment">//完成一个移动碟子数量n-1/A/C/B</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Disk &quot;</span>+ topN + <span class="string">&quot; from &quot;</span> + from + <span class="string">&quot; to &quot;</span> + to);</span><br><span class="line">            doTowers(topN - <span class="number">1</span>, inter, from, to);</span><br><span class="line">            <span class="comment">//          n-1/B/A/C</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>A上有n到C必须经历的操作就是：</p>
<p>(1)使n-1个圆盘整体移动到<strong>B柱（中转位置）</strong>上</p>
<p>(2)再使第n个圆盘移动到C柱（目的位置）上</p>
<p>(3)再将n-1个圆盘整体移动到C柱（目的位置）上</p>
<p>上一操作中的第(1)步又可以细分到：</p>
<p>(1)将n-2个圆盘通过 (1)使n-2个圆盘整体移动到<strong>C柱（中转位置）</strong>上，</p>
<p>(2)再使第n-1个圆盘移动到B柱（目的位置）上，</p>
<p>(3)再将n-2个圆盘整体移动到B柱（目的位置）上。</p>
<p>上一操作中的第(3)步又可以细分到：</p>
<p>(1)将n-2个圆盘通过 (1)使n-2个圆盘整体移动到<strong>A柱（中转位置）</strong>上，</p>
<p>(2)再使第n-1个圆盘移动到C柱（目的位置）上，</p>
<p>(3)再将n-2个圆盘整体移动到C柱（目的位置）上。</p>
<p>逐步缩小，终止条件为<strong>杆子上只剩一个碟子需要移动</strong></p>
<ol start="2">
<li><h4 id="打印结果为false"><a href="#打印结果为false" class="headerlink" title="打印结果为false"></a>打印结果为false</h4></li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        String s1 = &quot;nowcoder&quot;;</span><br><span class="line">        String s2 = &quot;nowcoder&quot;;</span><br><span class="line">        System.out.println(&quot;s1 == s2 is:&quot; + s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">/*输出结果为 false。</span><br><span class="line">因为在 Java 中 + 操作法的优先级大于 ==，所以输出部分表达式等于 “s1 == s2 is:nowcoder” == “nowcoder”，该表达式计算结果为 false。*/</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>​        c=A</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        char c = 65;</span><br><span class="line">        System.out.println(&quot;c = &quot;+c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//c 变量为 char 类型，65 对应的 ASCII 码为 A。</span><br></pre></td></tr></table></figure>

<p>4.delete</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Test</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        StringBuffer a = new StringBuffer(&quot;Nowcoder&quot;);</span><br><span class="line">        StringBuffer b = new StringBuffer(&quot;Google&quot;);</span><br><span class="line">        a.delete(1,3);</span><br><span class="line">        a.append(b);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//delete(x, y) 删除从字符串 x 的索引位置开始到 y-1 的位置，append() 函数用于连接字符串。</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-子类可以访问所有（子类与超类）的-public-和-protected-方法"><a href="#5-子类可以访问所有（子类与超类）的-public-和-protected-方法" class="headerlink" title="5.子类可以访问所有（子类与超类）的 public 和 protected 方法"></a>5.子类可以访问所有（子类与超类）的 public 和 protected 方法</h4><p>protected为保护类型，同一个包里和public一样，都可以访问到。    但在不同包里protected类型的成员变量只能通过子类来访问，方法可通过super.方法名调用。 </p>
<h4 id="6-private修饰符定义了方法与属性只能在同一个类中访问"><a href="#6-private修饰符定义了方法与属性只能在同一个类中访问" class="headerlink" title="6.private修饰符定义了方法与属性只能在同一个类中访问"></a>6.private修饰符定义了方法与属性只能在同一个类中访问</h4><h4 id="7-Java-中-float-类型的在内存中的大小为4字节"><a href="#7-Java-中-float-类型的在内存中的大小为4字节" class="headerlink" title="7.Java 中 float 类型的在内存中的大小为4字节"></a>7.Java 中 float 类型的在内存中的大小为4字节</h4><h4 id="8-Java-中变量一定要初始化"><a href="#8-Java-中变量一定要初始化" class="headerlink" title="8.Java 中变量一定要初始化"></a>8.Java 中变量一定要初始化</h4><h4 id="9-所有异常类的基类是Java-Lang-throwable"><a href="#9-所有异常类的基类是Java-Lang-throwable" class="headerlink" title="9.所有异常类的基类是Java.Lang.throwable"></a>9.所有异常类的基类是Java.Lang.throwable</h4><h4 id="10-public-static-void-main-String-args"><a href="#10-public-static-void-main-String-args" class="headerlink" title="10.public static void main(String[] args)"></a>10.public static void main(String[] args)</h4><h4 id="11-is-开头的命名方式一般用于布尔值判断。"><a href="#11-is-开头的命名方式一般用于布尔值判断。" class="headerlink" title="11.is 开头的命名方式一般用于布尔值判断。"></a>11.is 开头的命名方式一般用于布尔值判断。</h4><h4 id="12-Java-是区分大小写的-，java关键字也不例外。"><a href="#12-Java-是区分大小写的-，java关键字也不例外。" class="headerlink" title="12.Java 是区分大小写的 ，java关键字也不例外。"></a>12.Java 是区分大小写的 ，java关键字也不例外。</h4><h4 id="13-空引用可用于访问静态变量或方法"><a href="#13-空引用可用于访问静态变量或方法" class="headerlink" title="13.空引用可用于访问静态变量或方法"></a>13.空引用可用于访问静态变量或方法</h4><p>当我们通过一个对象的引用访问静态成员属性或者方法时 ，访问操作只与所声明的引用类型相关 ；与引用对象是否为 null 无关 ，因为访问静态成员不需要实例化对象 ；即便引用不为 null ，也与运行时多态无关 ，因为静态成员是类相关的 。</p>
<h4 id="14-double-a-float-a"><a href="#14-double-a-float-a" class="headerlink" title="14.double a=(float) a"></a>14.double a=(float) a</h4><p>double的范围要比float的范围大，float要比int的范围大</p>
<p>类型转换分两种： </p>
<p>自动类型转换（隐式）  </p>
<p>特点： 代码不需要进行特殊处理，自动完成<br>规则： 数据范围从小到大<br>安全性：安全 </p>
<p>强制类型转换</p>
<p>特点：代码需要进行特殊的格式处理，不能自动完成<br>格式：范围小的类型 范围小的变量名 = (范围小的类型) 原本范围大的数据<br>安全性：不安全 </p>
<h4 id="15-基本类型类型以及对象的引用变量是存储在栈内存中-；而对象本身的值或者说-new-创建的对象和数组是存储在堆内存中。"><a href="#15-基本类型类型以及对象的引用变量是存储在栈内存中-；而对象本身的值或者说-new-创建的对象和数组是存储在堆内存中。" class="headerlink" title="15.基本类型类型以及对象的引用变量是存储在栈内存中 ；而对象本身的值或者说 new 创建的对象和数组是存储在堆内存中。"></a>15.基本类型类型以及对象的引用变量是存储在栈内存中 ；而对象本身的值或者说 new 创建的对象和数组是存储在堆内存中。</h4><h4 id="16-三种表达式"><a href="#16-三种表达式" class="headerlink" title="16.三种表达式"></a>16.三种表达式</h4><p>1、中缀表达式：</p>
<pre><code>    操作符以中缀形式位于运算数中间（如：3+2），是我们日常通用的算术和逻辑公式表示方法。
</code></pre>
<p>2、后缀表达式：</p>
<pre><code>    又称逆波兰式（Reverse Polish Notation - RPN），操作符以后缀形式位于两个运算数后（如：3+2的后缀表达形式就是3 2 +）。
</code></pre>
<p>3、前缀表达式：</p>
<pre><code>    又称波兰式（Polish Notation），操作符以前缀形式位于两个运算数前（如：3+2的前缀表达形式就是+ 3 2）。
</code></pre>
<h4 id="17-求输出结果"><a href="#17-求输出结果" class="headerlink" title="17.求输出结果"></a>17.求输出结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        ChangeIt.doIt( myArray );</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;myArray.length; j++)</span><br><span class="line">            System.out.print( myArray[j] + <span class="string">&quot; &quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeIt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">( <span class="keyword">int</span>[] z )</span> </span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        z = <span class="keyword">null</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果12345</span></span><br></pre></td></tr></table></figure>

<p><strong>java 基本数据类型传递参数时是值传递 ；引用类型传递参数时是引用传递 。然而数组虽然是引用传递 ，但是将引用 z = null 只是将引用z不指向任何对象 ，并不会对原先指向的对象数据进行修改 。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChangeIt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">doIt</span><span class="params">( <span class="keyword">int</span>[] z )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] A = z;</span><br><span class="line">        A[<span class="number">0</span>] = <span class="number">99</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestIt</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] myArray = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        ChangeIt.doIt(myArray);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; myArray.length; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.print(myArray[i] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结果99 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<p><strong>引用的是地址</strong></p>
<h4 id="18"><a href="#18" class="headerlink" title="18."></a>18.</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&amp;lt; //小于(&lt;)</span><br><span class="line">&amp;gt; //大于(&gt;)</span><br><span class="line">&amp;le; //小于或等于(≤)</span><br><span class="line">&amp;ge; // 大于或等于(≥)</span><br></pre></td></tr></table></figure>

<h4 id="19-错误-索引超出范围"><a href="#19-错误-索引超出范围" class="headerlink" title="19.错误!   索引超出范围"></a>19.错误!   索引超出范围</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int[] arr = new int[9];</span><br><span class="line">System.out.println(arr[9]);//arr[8]=0</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程同步 死锁 通讯.md</title>
    <url>/2020/12/03/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%20%E6%AD%BB%E9%94%81%20%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="线程同步-死锁-通讯"><a href="#线程同步-死锁-通讯" class="headerlink" title="线程同步 死锁 通讯"></a>线程同步 死锁 通讯</h1><h2 id="1-线程与进程"><a href="#1-线程与进程" class="headerlink" title="1.线程与进程"></a>1.线程与进程</h2><p><strong>进程：</strong></p>
<p>进程是一个具有一定独立功能的程序在一个数据集合上依次动态执行的过程。</p>
<p>进程是一个正在执行的程序的实例，包括程序计数器、寄存器和程序变量的当前值。</p>
<p>特点：</p>
<ol>
<li>进程依赖于程序运行而存在，进程是动态的，程序是静态的；</li>
<li><strong>进程是操作系统进行资源分配和调度的一个独立单位（</strong>CPU除外，<strong>线程是处理器任务调度和执行的基本单位</strong>）；</li>
<li>每个进程拥有独立的地址空间，地址空间包括代码区、数据区和堆栈区，进程之间的地址空间是隔离的，互不影响。</li>
</ol>
<p><strong>线程：</strong></p>
<p>一个进程中,可以同时有多条执行链路, 这些执行链路称为线程, 线程是CPU的调度与分配最小单位, 同一个进程多个线程共享这个进程的内存资源</p>
<p>Java 线程的生命周期中，在 Thread 类里有一个枚举类型 State，定义了线程的几种状态，分别有：</p>
<ul>
<li>New</li>
<li>Runnable</li>
<li>Blocked</li>
<li>Waiting</li>
<li>Timed Waiting</li>
<li>Terminated</li>
</ul>
<p><strong>进程与线程的区别总结：</strong></p>
<p><strong>本质区别</strong>：进程是操作系统资源分配的基本单位，而线程是处理器任务调度和执行的基本单位。</p>
<p><strong>包含关系</strong>：一个进程至少有一个线程，线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程。</p>
<p><strong>资源开销</strong>：每个进程都有独立的地址空间，进程之间的切换会有较大的开销；线程可以看做轻量级的进程，同一个进程内的线程共享进程的地址空间，每个线程都有自己独立的运行栈和程序计数器，线程之间切换的开销小。</p>
<p><strong>影响关系</strong>：一个进程崩溃后，在保护模式下其他进程不会被影响，但是一个线程崩溃可能导致整个进程被操作系统杀掉，所以多进程要比多线程健壮。</p>
<h2 id="2-同步Synchronized"><a href="#2-同步Synchronized" class="headerlink" title="2.同步Synchronized"></a>2.同步<strong>Synchronized</strong></h2><p><strong>Java对于多线程的安全问题提供了专业的解决方式：</strong></p>
<p> <strong>同步机制</strong></p>
<p>1.synchronized还可以放在方法声明中，表示整个方法为同步方法。</p>
<p><strong>例如：</strong></p>
<p>  public synchronized void show (String name){</p>
<p>​      <strong>….</strong></p>
<p>  <strong>}</strong></p>
<p>2.synchronized (对象）{</p>
<p>​     <strong>//</strong> <strong>需要被同步的代码；</strong></p>
<p>  <strong>}</strong></p>
<h2 id="3-线程的死锁问题"><a href="#3-线程的死锁问题" class="headerlink" title="3.线程的死锁问题"></a>3.<strong>线程的死锁问题</strong></h2><p>死锁产生的四个必要条件：</p>
<ol>
<li><strong>互斥使用</strong>，即当资源被一个线程使用(占有)时，别的线程不能使用</li>
<li><strong>不可抢占</strong>，资源请求者不能强制从资源占有者手中夺取资源，资源只能由资源占有者主动释放。</li>
<li><strong>请求和保持</strong>，即当资源请求者在请求其他的资源的同时保持对原有资源的占有。</li>
<li><strong>循环等待</strong>，即存在一个等待队列：P1占有P2的资源，P2占有P3的资源，P3占有P1的资源。这样就形成了一个等待环路。</li>
</ol>
<p>当上述四个条件都成立的时候，便形成死锁。当然，死锁的情况下如果打破上述任何一个条件，便可让死锁消失。</p>
<p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnLockTest</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj1 = <span class="string">&quot;obj1&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a1 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String obj2 = <span class="string">&quot;obj2&quot;</span>;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Semaphore a2 = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      LockAa la = <span class="keyword">new</span> LockAa();</span><br><span class="line">      <span class="keyword">new</span> Thread(la).start();</span><br><span class="line">      LockBb lb = <span class="keyword">new</span> LockBb();</span><br><span class="line">      <span class="keyword">new</span> Thread(lb).start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockAa</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj1&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockA 锁住 obj2&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj2 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockA 锁 obj1 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>); <span class="comment">// 马上进行尝试，现实情况下do something是不确定的</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LockBb</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 开始执行&quot;</span>);</span><br><span class="line">         <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (UnLockTest.a2.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj2&quot;</span>);</span><br><span class="line">               <span class="keyword">if</span> (UnLockTest.a1.tryAcquire(<span class="number">1</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot; LockB 锁住 obj1&quot;</span>);</span><br><span class="line">                  Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>); <span class="comment">// do something</span></span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                  System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj1 失败&quot;</span>);</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               System.out.println(<span class="keyword">new</span> Date().toString() + <span class="string">&quot;LockB 锁 obj2 失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            UnLockTest.a1.release(); <span class="comment">// 释放</span></span><br><span class="line">            UnLockTest.a2.release();</span><br><span class="line">            Thread.sleep(<span class="number">10</span> * <span class="number">1000</span>); <span class="comment">// 这里只是为了演示，所以tryAcquire只用1秒，而且B要给A让出能执行的时间，否则两个永远是死锁</span></span><br><span class="line">         &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-线程通讯"><a href="#4-线程通讯" class="headerlink" title="4.线程通讯"></a>4.线程通讯</h2><p>wait() 与 notify() 和 notifyAll()</p>
<p>**wait()**：令当前线程挂起并放弃CPU、同步资源，使别的线程可访问并修改共享资源，而当前线程排队等候再次对资源的访问</p>
<p>**notify()**：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</p>
<p><strong>notifyAll</strong> **()**：唤醒正在排队等待资源的所有线程结束等待.</p>
<p><strong>Java.lang.Object提供的这三个方法只有在synchronized方法或synchronized代码块中才能使用，否则会报java.lang.IllegalMonitorStateException异常</strong></p>
<p>生产者消费者问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerConsumerTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      CubbyHole c = <span class="keyword">new</span> CubbyHole();</span><br><span class="line">      Producer p1 = <span class="keyword">new</span> Producer(c, <span class="number">1</span>);</span><br><span class="line">      Consumer c1 = <span class="keyword">new</span> Consumer(c, <span class="number">1</span>);</span><br><span class="line">      p1.start(); </span><br><span class="line">      c1.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CubbyHole</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> contents;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> available = <span class="keyword">false</span>;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (available == <span class="keyword">false</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      available = <span class="keyword">false</span>;</span><br><span class="line">      notifyAll();</span><br><span class="line">      <span class="keyword">return</span> contents;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">while</span> (available == <span class="keyword">true</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            wait();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">catch</span> (InterruptedException e) &#123; </span><br><span class="line">         &#125; </span><br><span class="line">      &#125;</span><br><span class="line">      contents = value;</span><br><span class="line">      available = <span class="keyword">true</span>;</span><br><span class="line">      notifyAll();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> CubbyHole cubbyhole;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(CubbyHole c, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">      cubbyhole = c;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> value = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            value = cubbyhole.get();</span><br><span class="line">            System.out.println(<span class="string">&quot;消费者 #&quot;</span> + <span class="keyword">this</span>.number+ <span class="string">&quot; got: &quot;</span> + value);</span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> CubbyHole cubbyhole;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(CubbyHole c, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">      cubbyhole = c;</span><br><span class="line">      <span class="keyword">this</span>.number = number;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">         cubbyhole.put(i);</span><br><span class="line">         System.out.println(<span class="string">&quot;生产者 #&quot;</span> + <span class="keyword">this</span>.number + <span class="string">&quot; put: &quot;</span> + i);</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep((<span class="keyword">int</span>)(Math.random() * <span class="number">100</span>));</span><br><span class="line">         &#125; <span class="keyword">catch</span> (InterruptedException e) &#123; &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>人才培养方案编制系统</title>
    <url>/2023/04/25/%E4%BA%BA%E6%89%8D%E5%9F%B9%E5%85%BB%E6%96%B9%E6%A1%88%E7%BC%96%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>阅读源码步骤</p>
<p><strong>1.了解项目依赖</strong></p>
<p> composer.json文件定义了您当前项目的依赖项，以及依赖项的一些相关信息</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;require&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;php&quot;</span>: <span class="string">&quot;&gt;=7.1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;topthink/framework&quot;</span>: <span class="string">&quot;dev-master&quot;</span>,</span><br><span class="line">    <span class="string">&quot;topthink/think-captcha&quot;</span>: <span class="string">&quot;^1.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;topthink/think-installer&quot;</span>: <span class="string">&quot;^1.0.14&quot;</span>,</span><br><span class="line">    <span class="string">&quot;topthink/think-queue&quot;</span>: <span class="string">&quot;1.1.6&quot;</span>,</span><br><span class="line">    <span class="string">&quot;topthink/think-helper&quot;</span>: <span class="string">&quot;^1.0.7&quot;</span>,</span><br><span class="line">    <span class="string">&quot;karsonzhang/fastadmin-addons&quot;</span>: <span class="string">&quot;~1.3.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overtrue/pinyin&quot;</span>: <span class="string">&quot;^3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;phpoffice/phpspreadsheet&quot;</span>: <span class="string">&quot;1.12&quot;</span>,</span><br><span class="line">    <span class="string">&quot;overtrue/wechat&quot;</span>: <span class="string">&quot;4.2.11&quot;</span>,</span><br><span class="line">    <span class="string">&quot;nelexa/zip&quot;</span>: <span class="string">&quot;^3.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ext-json&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ext-curl&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ext-pdo&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ext-bcmath&quot;</span>: <span class="string">&quot;*&quot;</span>,</span><br><span class="line">    <span class="string">&quot;txthinking/mailer&quot;</span>: <span class="string">&quot;^2.0&quot;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p><strong>2.了解项目结构</strong></p>
<p>addons目录：插件存放目录</p>
<p>application: 应用目录 (.htaccess文件为apche可识别的配置文件)</p>
<p>dist:  distribution 编译的代码/库</p>
<p>error: 错误页面</p>
<p>extend: 扩展类库目录 用于存放一些自定义的类</p>
<p>runtime: 记录日志</p>
<p><img src="https://s2.loli.net/2023/04/25/W9kirsK65doJMUa.png" alt="image-20230425143125533.png"></p>
<p>project  应用部署目录<br>├─application           应用目录（可设置）<br>│  ├─common             公共模块目录（可更改）<br>│  ├─index              模块目录(可更改)<br>│  │  ├─config.php      模块配置文件<br>│  │  ├─common.php      模块函数文件<br>│  │  ├─controller      控制器目录<br>│  │  ├─model           模型目录<br>│  │  ├─view            视图目录<br>│  │  └─ …            更多类库目录<br>│  ├─command.php        命令行工具配置文件<br>│  ├─common.php         应用公共（函数）文件<br>│  ├─config.php         应用（公共）配置文件<br>│  ├─database.php       数据库配置文件<br>│  ├─tags.php           应用行为扩展定义文件<br>│  └─route.php          路由配置文件<br>├─extend                扩展类库目录（可定义）<br>├─public                WEB 部署目录（对外访问目录）<br>│  ├─static             静态资源存放目录(css,js,image)<br>│  ├─index.php          应用入口文件<br>│  ├─router.php         快速测试文件<br>│  └─.htaccess          用于 apache 的重写<br>├─runtime               应用的运行时目录（可写，可设置）<br>├─vendor                第三方类库目录（Composer）<br>├─thinkphp              框架系统目录<br>│  ├─lang               语言包目录<br>│  ├─library            框架核心类库目录<br>│  │  ├─think           Think 类库包目录<br>│  │  └─traits          系统 Traits 目录<br>│  ├─tpl                系统模板目录<br>│  ├─.htaccess          用于 apache 的重写<br>│  ├─.travis.yml        CI 定义文件<br>│  ├─base.php           基础定义文件<br>│  ├─composer.json      composer 定义文件<br>│  ├─console.php        控制台入口文件<br>│  ├─convention.php     惯例配置文件<br>│  ├─helper.php         助手函数文件（可选）<br>│  ├─LICENSE.txt        授权说明文件<br>│  ├─phpunit.xml        单元测试配置文件<br>│  ├─README.md          README 文件<br>│  └─start.php          框架引导文件<br>├─build.php             自动生成定义文件（参考）<br>├─composer.json         composer 定义文件<br>├─LICENSE.txt           授权说明文件<br>├─README.md             README 文件<br>├─think                 命令行入口文件</p>
<p><strong>3.追踪请求</strong></p>
<ol>
<li>parent::_initialize()</li>
</ol>
<p>父类初始化的时候有内容,子类是会继承的,</p>
<p>但是子类如果也有初始化的时候,父类是会被覆盖掉的,为了<strong>保留父类的初始化内容</strong>就会使用</p>
<ol start="2">
<li><p>简单的验证手机号码是否正确的正则表达式   /^1\d{10}$/ </p>
<p>/正则/，</p>
<p>^表示开头，</p>
<p>$表示结尾，</p>
<p>\d表示数字，</p>
<p>{10}表示前面的\d有10位</p>
</li>
<li><p> Test::$test    </p>
</li>
</ol>
   <figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">static</span> <span class="variable">$test</span> = <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<pre><code>Test::$test            取得$test属性的值
</code></pre>
<p>   类中静态方法和静态属性的引用方法</p>
<p>   （两个冒号(::)是对类中的方法的静态引用；也就是不需要实例化对象,直接通过类名对类中的方法进行引用）</p>
<p>4 .闭包</p>
<p>​    1.对闭包的理解<br>​    闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，创建的函数可以访问到当前函数的局部变量。</p>
<p>​    2.闭包的特点<br>​            1.让外部访问函数内部变量变成可能</p>
<p>​            2.变量会常驻在内存中</p>
<p>​            3.可以避免使用全局变量,防止全局变量污染;</p>
<p>​    3.闭包的好处和坏处<br>​            好处：可以读取其他函数内部的变量，并将其一直保存在内存中。</p>
<p>​            坏处：可能会造成内存泄漏或溢出。</p>
<p>5.PHP双引号和单引号区别</p>
<pre><code>1.双引号解析变量，但是单引号不解析变量。
2.在双引号里面插入变量，变量后面如果有英文或中文字符，它会把这个字符和变量拼接起来，视为一整个变量。一定要在变量后面接上特殊字符，例如空格等分开。
3.如果在双引号里面插变量的时候，后面不想有空格，可以拿大括号将变量包起来。
4.双引号解析转义字符，单引号不解析转义字符。但，单引号能解析\&#39; 和\
5.单引号效率高于双引号，尽可能使用单引号
6.双号和单引号可以互插！！！双引号当中插入单引号，单引号当中插入变量，这个变量会被解析。
&lt;?php
$legend = &#39;猛虎&#39;;
$NoAlike = &quot;心有&#39;$legend&#39;,细嗅蔷薇&quot;;
echo $NoAlike;
?&gt;
7.神奇的字符串拼接胶水——（.）点，用来拼接字符串。
8.我们将定界符声明字符串视为双引号一样的功能来看待。
</code></pre>
<p>6.var_dump() 是一个函数。向括号()中间插入变量。这个函数，会打印出来数据类型，还会对应显示变量的长度和值。</p>
<p>7.XML</p>
<p>可扩展标记语言 (Extensible Markup Language, XML) ，标准通用标记语言的子集，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 XML是标准通用标记语言 可扩展性良好,内容与形式分离,遵循严格的语法要求,保值性良好等优点</p>
]]></content>
      <categories>
        <category>实习项目</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>sql多表查寻与索引</title>
    <url>/2021/05/28/sql%E5%A4%9A%E8%A1%A8%E6%9F%A5%E5%AF%BB%E4%B8%8E%E7%B4%A2%E5%BC%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="sql多表查寻与索引"><a href="#sql多表查寻与索引" class="headerlink" title="sql多表查寻与索引"></a>sql多表查寻与索引</h1><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p>​    总结：内连接就是两个表的交集 ,左外连接就是左边表加两表交集 ,右外连接就是右边表加两表交集</p>
<h3 id="1-外连接"><a href="#1-外连接" class="headerlink" title="1.外连接"></a>1.外连接</h3><p>1.左连接  left join 或 left outer join</p>
<p>SQL语句：<strong>select * from student left join score on student.Num=score.Stu_id;</strong></p>
<p>2.右连接  right join 或 right outer join</p>
<p>SQL语句：<strong>select * from student right join score on student.Num=score.Stu_id;</strong></p>
<p>3.完全外连接  full join 或 full outer join</p>
<p>SQL语句：<strong>select * from student full join score on student.Num=score.Stu_id;</strong></p>
<p>通过上面这三种方法就可以把不同的表连接到一起，变成一张大表，之后的查询操作就简单一些了。</p>
<h3 id="2-内连接"><a href="#2-内连接" class="headerlink" title="2.内连接"></a>2.内连接</h3><p>join 或 inner join</p>
<p>SQL语句：<strong>select * from student inner join score on student.Num=score.Stu_id;</strong></p>
<p>此时的语句就相当于：<strong>select * from student,score where student.ID=course.ID;</strong></p>
<h4 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h4><p>select * from A，B where 条件                                         </p>
<p>隐式连接使用别名：</p>
<p>select * from A 别名1，B 别名2 where 别名1.xx=别名2.xx；</p>
<h4 id="显式内连接"><a href="#显式内连接" class="headerlink" title="显式内连接"></a>显式内连接</h4><p>select * from A inner join B on 条件 （inner可以省略） </p>
<p>显式连接使用别名：</p>
<p>select * from A 别名1 inner join B 别名2 on 别名1.xx=别名2.xx</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>对数据库表中一列或多列的值进行排序的一种结构，只有当经常查询索引列中的数据时，才需要在表上创建索引。</p>
<p>merit：查询速度快</p>
<p>defect：占用磁盘空间，并且降低添加、删除和更新行的速度</p>
<h3 id="常用索引类型"><a href="#常用索引类型" class="headerlink" title="常用索引类型"></a>常用索引类型</h3><p>普通索引：没有任何限制 create index index_name on table（column（length））<br>唯一索引：索引列的值必须唯一，但允许为空值：不允许任何两行具有相同索引值的索引。<br>主键索引：主键，一个表，只能有一个逐渐，不允许为空<br>组合索引：指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用，组合索引遵循最左前缀集合。</p>
<h4 id="MySQL数据库底层默认使用的索引数据库结构是B树中的B-树"><a href="#MySQL数据库底层默认使用的索引数据库结构是B树中的B-树" class="headerlink" title="MySQL数据库底层默认使用的索引数据库结构是B树中的B+树"></a>MySQL数据库底层默认使用的索引数据库结构是B树中的B+树</h4><h5 id="B-Tree-B-Tree变种"><a href="#B-Tree-B-Tree变种" class="headerlink" title="B+Tree(B-Tree变种)"></a>B+Tree(B-Tree变种)</h5><p>B+Tree特性：<br>1.非叶子节点不存储data，只存储索引（冗余），可以放更多的索引<br>2.叶子节点包含所有索引字段<br>3.叶子节点用指针连接，提高区间访问的性能</p>
<h5 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX ind_user_info_name <span class="keyword">ON</span> user_info(name);</span><br></pre></td></tr></table></figure>

<h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX uni_user_info_pass <span class="keyword">ON</span> user_info(pass);</span><br></pre></td></tr></table></figure>

<p>唯一性索引的另一个作用，控制该列不能有相同值</p>
<h6 id="复合性索引"><a href="#复合性索引" class="headerlink" title="复合性索引"></a>复合性索引</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE UNIQUE INDEX uni_user_info_pass ON user_info(name,pass);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>sql</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>npm和yarn的区别</title>
    <url>/2023/04/26/npm%E5%92%8Cyarn%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="npm和yarn的区别"><a href="#npm和yarn的区别" class="headerlink" title="npm和yarn的区别"></a>npm和yarn的区别</h2><p><code>yarn</code>，<code>npm</code> 都是构建和打包 javascript 代码的工具（包管理工具）</p>
<h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><ol>
<li>不用单独安装，它随 node 一起提供，node装好了npm就自动装好了【node是一个JS运行环境】</li>
<li>npm是一个包，这个包可以管理（下载、更新、删除）别的包</li>
<li>npm在下载包的时候有一个缓存的过程，我们一般不会使用npm默认下载缓存目录，而会自定义指定npm下载缓存目录<br>执行 npm config set cache “C:\Program Files\nodejs\npm_cache”</li>
<li>npm下载包分为本地下载和全局下载，本地下载会下载到指定的文件夹，而全局下载会下载到默认的全局包保存路径，我们一般不会使用npm默认的全局包下载保存路径，而会自定义指定npm全局包下载路径。<br>执行 npm config set prefix “C:\Program Files\nodejs\npm_global”</li>
</ol>
<p>注意：npm自定义修改了全局包存放路径，还需要去设置环境变量，将自定义全局包路径加到环境变量中，否则全局装的包没法在命令行窗口中正常使用</p>
<h3 id="yarn："><a href="#yarn：" class="headerlink" title="yarn："></a>yarn：</h3><p>Yarn是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具（取代npm） ,是为了弥补 npm 的一些缺陷而出现。</p>
<ol>
<li>这个包默认没有，需要使用npm来进行安装<br>　　执行命令：npm install -g yarn</li>
<li>yarn在下载包的时候有一个缓存的过程，我们一般不会使用yarn默认下载缓存目录，而会自定义指定yarn下载缓存目录<br>执行 yarn config set cache-folder “C:\Program Files\nodejs\yarn_cache”  </li>
<li>yarn下载包分为本地下载和全局下载，本地下载会下载到指定的文件夹，而全局下载会下载到默认的全局包保存路径，我们一般不会使用yarn默认的全局包下载保存路径，而会自定义指定yarn全局包下载路径。<br>执行 yarn config set global-folder “C:\Program Files\nodejs\yarn_global”<br>注意：yarn自定义修改了全局包存放路径，还需要去设置环境变量，将自定义全局包路径加到环境变量中，否则全局装的包没法在命令行窗口中正常使用</li>
</ol>
<h3 id="二、Npm和Yarn优劣对比"><a href="#二、Npm和Yarn优劣对比" class="headerlink" title="二、Npm和Yarn优劣对比"></a>二、Npm和Yarn优劣对比</h3><h4 id="Npm的劣势"><a href="#Npm的劣势" class="headerlink" title="Npm的劣势"></a>Npm的劣势</h4><p>npm install太慢。特别是新的项目拉下来要等半天，删除node_modules，重新install的时候依旧如此。<br>同一个项目，安装的时候模块版本无法保持一致性。这是由于package.json文件中版本号的缘故。同一个项目，安装的时候无法保持一致性。由于package.json文件中版本号的特点，下面三个版本号在安装的时候代表不同的含义。 “5.0.3”表示安装指定的5.0.3版本，“～5.0.3”表示安装5.0.X中最新的版本，“^5.0.3”表示安装5.X.X中最新的版本。这就麻烦了，常常会出现同一个项目，有的同事是OK的，有的同事会由于安装的版本不一致出现bug。</p>
<p>安装报错被覆盖。安装的时候，包会在同一时间下载和安装，中途某个时候，一个包抛出了一个错误，但是npm会继续下载和安装包。</p>
<h4 id="Yarn的优势"><a href="#Yarn的优势" class="headerlink" title="Yarn的优势"></a>Yarn的优势</h4><p>安装速度快 (服务器速度快 , 并且是并行下载)<br>版本锁定，安装版本统一<br>离线缓存机制，如果之前已经安装过一个软件包，用Yarn再次安装时从缓存中获取，就不用像npm那样再从网络下载了</p>
<p>离线缓存，yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。<br>安装版本一致：在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。并且为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。<br>简洁语义：yarn改变了一些npm命令的名称，比如 yarn add/remove，感觉上比 npm 原本的 install/uninstall 要更清晰。</p>
<h4 id="yarn常用命令"><a href="#yarn常用命令" class="headerlink" title="yarn常用命令"></a>yarn常用命令</h4><p>安装yarn命令: npm install -g yarn<br>查看版本号yarn version<br>初始化项目yarn init , 根据提示输入项目相关信息即可。<br>查看全部配置项 yarn config list<br>显示某配置项yarn config get <key><br>删除某配置项yarn config delete <key><br>设置配置项yarn config set <key> <value> [-g|–global]<br>安装包命令：yarn install ，该命令会根据packge.json文件安装依赖包，生成node_modules文件夹。<br>强制重新下载所有包 yarn install –force<br>添加包yarn add [package]，该命令会自动更新package.json和yarn.lock<br>删除包yarn remove <packageName> 该命令会自动更新package.json和yarn.lock<br>发布包yarn publish<br>查看缓存yarn cache<br>运行脚本yarn run 该命令执行在 package.json 中 scripts 属性下定义的脚本。<br>yarn build 该命令将源码编译成dist目录下发行文件。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>linux总结</title>
    <url>/2021/08/15/Linux%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="目录操作"><a href="#目录操作" class="headerlink" title="目录操作"></a>目录操作</h3><p>切换目录 <code>cd</code></p>
<p>查看目录 <code>ls</code></p>
<ul>
<li><code>-l</code>  列出文件详细信息 或者直接<code>ll</code></li>
<li><code>-a</code>  列出当前目录下所有文件及目录，包括隐藏的a(all)</li>
</ul>
<p>创建目录 <code>mkdir</code></p>
<ul>
<li>-p    创建目录，若无父目录，则创建p(parent)</li>
</ul>
<p>输出信息 <code>echo</code></p>
<p>打印文件到命令行(查看文件) <code>cat</code></p>
<p>改变文件所属用户 <code>chown</code></p>
<p>改变文件所属组 <code>chgrp</code></p>
<p>下载文件 <code>wget</code></p>
<p>在文本文件中查找某个字符串 <code>grep</code></p>
<p>统计文本中行数、字数、字符数 <code>wc</code></p>
<p>部分显示 <code>more/less</code></p>
<p>查找文件 <code>find / -name &#39;auto.cnf&#39;</code></p>
<p>创建空文件 <code>touch</code></p>
<p>复制文件 <code>cp</code></p>
<p>移动或重命名 <code>mv</code></p>
<p>删除文件 <code>rm</code></p>
<ul>
<li>-r   递归删除，可删除子目录及文件</li>
<li>-f   强制删除</li>
</ul>
<p>删除空目录 <code>rmdir</code></p>
<p>树形结构显示目录，需要安装tree包  <code>tree</code></p>
<p>显示当前目录 <code>pwd</code></p>
<p>创建链接文件 <code>ln</code></p>
<p>分页显示文本文件内容 <code>more、less</code></p>
<p>显示文件头、尾内容  <code>head、tail</code></p>
<h3 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h3><p>进入编辑器 <code>vi/vim</code>，vim三种模式：命令模式、插入模式、编辑模式。使用ESC或i或：来切换模式。</p>
<ul>
<li>进入编辑模式插入 <code>i</code></li>
<li>退出编辑模式 <code>esc</code></li>
<li>保存:后面输入<code>w</code></li>
<li>退出:后面输入<code>q</code></li>
<li>不保存退出:后面输入<code>q!</code></li>
<li>显示行号 <code>set number</code></li>
<li>查找关键字 <code>/xxxx</code> 按n跳到下一个，shift+n上一个</li>
<li>复制光标所在行，并粘贴 <code>yyp</code></li>
<li>h(左移一个字符←)、j(下一行↓)、k(上一行↑)、l(右移一个字符→)</li>
</ul>
<h3 id="打包压缩相关命令"><a href="#打包压缩相关命令" class="headerlink" title="打包压缩相关命令"></a>打包压缩相关命令</h3><p>打包压缩 <code>tar\gzip\bzip2</code></p>
<ul>
<li><code>-c</code>归档文件</li>
<li><code>-x</code> 压缩文件</li>
<li><code>-z</code> gzip压缩文件</li>
<li><code>-j</code> bzip2压缩文件</li>
<li><code>-v</code> 显示压缩或解压缩过程 v(view)</li>
<li><code>-f</code> 使用档名</li>
</ul>
<p>例：</p>
<p>只打包，不压缩:<code>tar -cvf /home/abc.tar /home/abc</code></p>
<p>打包，并用gzip压缩:<code>tar -zcvf /home/abc.tar.gz /home/abc</code></p>
<p>打包，并用bzip2压缩:<code>tar -jcvf /home/abc.tar.bz2 /home/abc</code></p>
<p>如果想解压缩，就直接替换上面的命令<code> tar -cvf / tar -zcvf / tar -jcvf</code> 中的“c” 换成“x” 就可以了。</p>
<h3 id="Linux管道"><a href="#Linux管道" class="headerlink" title="Linux管道"></a>Linux管道</h3><p>将一个命令的标准输出作为另一个命令的标准输入。也就是把几个命令组合起来使用，后一个命令除以前一个命令的结果。</p>
<p>例：grep -r “close” /home/* | more   在home目录下所有文件中查找，包括close的文件，并分页输出。</p>
<h2 id="文件权限管理"><a href="#文件权限管理" class="headerlink" title="文件权限管理"></a>文件权限管理</h2><h3 id="三种基本权限"><a href="#三种基本权限" class="headerlink" title="三种基本权限"></a>三种基本权限</h3><p>R：读，数值表示为 4</p>
<p>W：写，数值表示为 2</p>
<p>X：可执行，数值表示为1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-16-2-centos ~]# ll</span><br><span class="line">total 597952</span><br><span class="line">-rw------- 1 root root  12387614 Aug 29  2021 apache-zookeeper-3.7.0-bin.tar.gz</span><br><span class="line">-rw-r--r-- 1 root root 113304268 May  3 12:22 jdk-8u281-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<p>如上所示，<code>jdk-8u281-linux-x64.rpm</code>文件的权限为<code>-rw-r--r--</code>，一共十个字符，分成四段。</p>
<ul>
<li>第一个字符“-”表示普通文件；这个位置还可能会出现<code>l</code>链接；<code>d</code>表示目录</li>
<li>第二三四个字符<code>rw-</code>表示当前所属用户的权限，所以用数值表示为 4+2=6</li>
<li>第五六七个字符<code>r--</code>表示当前所属组的权限，所以用数值表示为 4</li>
<li>第八九十个字符<code>r--</code>表示其他用户权限，所以用数值表示为 4</li>
</ul>
<p>所以操作此文件的权限用数值表示为 644</p>
<h3 id="更改权限"><a href="#更改权限" class="headerlink" title="更改权限"></a>更改权限</h3><p>更改权限：<code>sudo chmod</code> [u所属用户  g所属组  o其他用户  a所有用户]  [+增加权限  -减少权限]  [r  w  x]  目录名</p>
<p>例如：有一个文件 filename，权限为<code>-rw-r----x</code> ,将权限值改为<code>-rwxrw-r-x</code>，用数值表示为765</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chmod u+x g+w o+r filename` 也可以用数值表示 `sudo chmod 765 filename</span><br></pre></td></tr></table></figure>

<h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><h3 id="命令行运行"><a href="#命令行运行" class="headerlink" title="命令行运行"></a>命令行运行</h3><p>运行<code>./filename</code></p>
<p>退出<code>ctrl+c</code></p>
<h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>运行 <code>nohup command &gt;out.file 2&gt;&amp;1 &amp;</code></p>
<p>退出 <code>ps -ef |grep 关键字 |awk &#39;&#123;print $2&#125;&#39;|xarg kill -9</code></p>
<h3 id="服务方式运行"><a href="#服务方式运行" class="headerlink" title="服务方式运行"></a>服务方式运行</h3><p>设置开机启动 <code>systemctl enable</code></p>
<p>启动<code>systemctl start</code></p>
<p>关闭<code>systemctl stop</code></p>
<h2 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h2><h3 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h3><p>显示指定文件的详细信息，比ls更详细 <code>stat</code></p>
<p>显示在线登陆用户 <code>who</code></p>
<p>显示当前操作用户<code>whoami</code></p>
<p>显示主机名<code>hostname</code></p>
<p>显示系统信息<code>uname</code></p>
<p>动态显示当前耗费资源最多进程信息<code>top</code></p>
<p>显示瞬间进程状态  <code>ps \ ps -aux</code></p>
<p>查看目录大小 <code>du -h /home</code> (带有单位显示目录信息)</p>
<p>查看磁盘大小 <code>df -h</code> (带有单位显示磁盘信息)</p>
<p>查看网络情况 <code>ifconfig</code></p>
<p>测试网络连通 <code>ping</code></p>
<p>显示网络状态信息 <code>netstat</code></p>
<p>命令不会用了，看文档 如：<code>man grep</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@VM-16-2-centos ~]# man grep</span><br><span class="line">GREP(1)                    General Commands Manual                       GREP(1)</span><br><span class="line">NAME</span><br><span class="line">       grep, egrep, fgrep - print lines matching a pattern</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       grep [OPTIONS] PATTERN [FILE...]</span><br><span class="line">       grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<p>清屏 <code>clear</code></p>
<p>对命令重命名 <code>alias</code> ，如：<code>alias showmeit=&quot;ps -aux&quot;</code> ，解除使用<code>unaliax showmeit</code></p>
<p>杀死进程 <code>kill</code>，可以先用<code>ps</code> 或 <code>top</code>命令查看进程的id，然后再用kill命令杀死进程。<code>kill -9</code> 强制删除</p>
<h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>查看防火墙状态 <code>firewall-cmd --state</code></p>
<p>停止防火墙 <code>systemctl stop firewalld.service</code></p>
<p>禁止firewall开机启动 <code>systemctl disable firewalld.service</code></p>
<h3 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h3><p>关机 <code>shutdown -h now</code></p>
<ul>
<li>-r 关机重启</li>
<li>-h 关机不重启</li>
<li>now 立刻关机</li>
</ul>
<p>重启 <code>reboot</code></p>
<p>关机  <code>halt</code></p>
<h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><p>查看网卡信息 <code>ifconfig</code></p>
<p>网络配置 <code>/etc/sysconfig/network-script/ifcfg-eth0</code></p>
<p>配置网卡 <code>/etc/udev/rules.d/70-persistent-net.rules</code></p>
<h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><p>创建用户 <code>useradd</code></p>
<p>设置密码 <code>passwd</code></p>
<ul>
<li>存储组账号 <code>/etc/group</code></li>
<li>系统用户配置文件<code> /etc/passwd</code></li>
</ul>
<p>存储用户账号的密码 <code>/etc/shadow</code></p>
<p>存储用户组账号的密码<code>/etc/gshadow</code></p>
<p>用户名<code>useradd</code></p>
<p>用户名<code>userdel</code></p>
<p>用户名<code>adduser</code></p>
<p>组名<code>groupadd</code></p>
<p>组名<code>groupdel</code></p>
<p>给root设置密码<code>passwd root</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su root</span><br><span class="line">su - root</span><br></pre></td></tr></table></figure>

<p>系统环境变量<code>/etc/profile</code></p>
<p>用户环境变量<code>bash_profile</code></p>
<p>用户环境变量<code>.bashrc</code></p>
<p><code>su user</code> 切换用户，加载配置文件.bashrc</p>
<p><code>su - user</code> 切换用户，加载配置文件/etc/profile ，加载bash_profile</p>
<p><strong>更改文件的用户及用户组</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown [-R] owner[:group] &#123;File|Directory&#125;</span><br><span class="line">-rw-r--r-- 1 root root 113304268 May  3 12:22 jdk-8u281-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<p>例如：还以 <code>jdk-8u281-linux-x64.rpm</code> 为例。属于用户root，组root</p>
<p>要想切换此文件所属的用户及组。可以使用命令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo chown daley:java jdk-8u281-linux-x64.rpm</span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><h3 id="下载rpm安装包方式"><a href="#下载rpm安装包方式" class="headerlink" title="下载rpm安装包方式"></a>下载rpm安装包方式</h3><p>安装 <code>rpm -i jdk-XXX_linux-x64_bin.rpm</code></p>
<p>查找 <code>rpm -qa | grep jdk</code></p>
<p>列表 <code>rpm -qa | more</code></p>
<blockquote>
<p>ubuntu dpkg 方式</p>
<p>查找dpkg -I | grep jdk</p>
<p>列表dpkg -I | more</p>
<p>安装dpkg -i jdk-XXX_linux-x64_bin.deb</p>
</blockquote>
<h3 id="yum方式"><a href="#yum方式" class="headerlink" title="yum方式"></a>yum方式</h3><p>搜索 <code>yum search jdk</code></p>
<p>安装 <code>yum install java-11-openjdk.x86_64</code></p>
<p>删除 <code>yum erase java-11 -openjdk.x86 64</code></p>
<p>配置文件 <code>/etc/yum.repos.d/CentOS-Base.repo</code></p>
<blockquote>
<p>ubuntu apt-get 方式</p>
<p>搜索 apt・cache search jdk</p>
<p>安装apt-get install openjdk-9-jdk</p>
<p>删除apt-get purge openjdk-9-jdk</p>
<p>配置文件/etc/apt/sources. Iist</p>
</blockquote>
<h3 id="下载压缩文件方式"><a href="#下载压缩文件方式" class="headerlink" title="下载压缩文件方式"></a>下载压缩文件方式</h3><p>编辑 .bashrc</p>
<p>环境变量配置</p>
<ul>
<li>打开环境变量文件 <code>vi /etc/profile</code></li>
<li>配置环境变量 <code>export JAVA_HOME=/root/j d k-XXX_lin ux-x64</code></li>
<li><code>export PATH=$JAVA HOME/bin:$PATH</code></li>
<li>刷新配置 <code>source /etc/profile</code></li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>BFS最优配餐</title>
    <url>/2021/05/27/BFS%E6%9C%80%E4%BC%98%E9%85%8D%E9%A4%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="BFS广度优先遍历"><a href="#BFS广度优先遍历" class="headerlink" title="BFS广度优先遍历"></a>BFS广度优先遍历</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>宽度优先搜索算法（又称广度优先搜索）是最简便的图的搜索算法之一，这一算法也是很多重要的图的算法的原型。Dijkstra单源最短路径算法和Prim最小生成树算法都采用了和宽度优先搜索类似的思想。其别名又叫BFS，属于一种盲目搜寻法，目的是系统地展开并检查图中的所有节点，以找寻结果。换句话说，它并不考虑结果的可能位置，彻底地搜索整张图，直到找到结果为止。</p>
<h2 id="算法解析"><a href="#算法解析" class="headerlink" title="算法解析"></a>算法解析</h2><p>访问初始顶点V，访问左右未被访问的邻接点Vi…,递归 Vi</p>
<p>类似于波纹传播。</p>
<p>以广度求最优，求值。</p>
<p>走所有路的出最优的算法。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>​            最优配餐</p>
<p><img src="https://i.loli.net/2021/05/27/7gToSfJm28tkFlh.png" alt="QQ截图20210527113840.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.Queue;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Vertex</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">int</span> step;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Vertex</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.x = x;</span><br><span class="line">            <span class="keyword">this</span>.y = y;</span><br><span class="line">            <span class="keyword">this</span>.step = step;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Vertex</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span>[][] map = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        Queue&lt;Vertex&gt; q = <span class="keyword">new</span> LinkedList&lt;Vertex&gt;();</span><br><span class="line">        <span class="keyword">boolean</span>[][] vis = <span class="keyword">new</span> <span class="keyword">boolean</span>[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">int</span>[][] move = &#123; &#123; <span class="number">0</span>, <span class="number">1</span> &#125;, &#123; <span class="number">0</span>, -<span class="number">1</span> &#125;, &#123; <span class="number">1</span>, <span class="number">0</span> &#125;, &#123; -<span class="number">1</span>, <span class="number">0</span> &#125; &#125;;</span><br><span class="line"></span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">long</span> size = in.nextLong();</span><br><span class="line">        <span class="keyword">long</span> m = in.nextLong();</span><br><span class="line">        <span class="keyword">long</span> k = in.nextLong();</span><br><span class="line">        <span class="keyword">long</span> d = in.nextLong();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> step = <span class="number">0</span>;</span><br><span class="line">            q.add(<span class="keyword">new</span> Vertex(x, y, step));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> z = in.nextInt();</span><br><span class="line">            map[x][y] = z;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; d; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> y = in.nextInt();</span><br><span class="line">            vis[x][y] = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">        <span class="keyword">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">            Vertex u = q.remove();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">                Vertex tem = <span class="keyword">new</span> Vertex();</span><br><span class="line"></span><br><span class="line">                tem.x = u.x;</span><br><span class="line">                tem.y = u.y;</span><br><span class="line">                tem.step = u.step;</span><br><span class="line">                tem.x += move[i][<span class="number">0</span>];</span><br><span class="line">                tem.y += move[i][<span class="number">1</span>];</span><br><span class="line">                tem.step++;</span><br><span class="line">                <span class="keyword">if</span> (tem.x &gt; <span class="number">0</span> &amp;&amp; tem.y &lt;= size &amp;&amp; tem.y &gt; <span class="number">0</span> &amp;&amp; tem.x &lt;= size &amp;&amp; !vis[tem.x][tem.y]) &#123;</span><br><span class="line">                    vis[tem.x][tem.y] = <span class="keyword">true</span>;</span><br><span class="line">                    <span class="keyword">if</span> (map[tem.x][tem.y] != <span class="number">0</span>) &#123;</span><br><span class="line">                        ans += map[tem.x][tem.y] * tem.step;</span><br><span class="line">                        ++cnt;</span><br><span class="line">                        <span class="keyword">if</span> (cnt == k)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    q.add(tem);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(ans);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言商品进销存管理系统（1）</title>
    <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="商场进销存管理系统"><a href="#商场进销存管理系统" class="headerlink" title="商场进销存管理系统"></a>商场进销存管理系统</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>​         商场进销存管理系统是典型的信息管理系统，其开发要求具备数据一致性和完整性强，应用程序功能完备，易使用等特点。该软件使用C语言编程实现，本系统主要完成对商场进销存的管理，<strong>包括商品信息录入，显示商品信息，显示商品信息，输入进货信息，输入销售信息，修改商品信息，增加删除商品信息，查询商品信息，保存商品信息到硬盘文件，从硬盘文获得商品信息，商品信息排序等功能。</strong>系统可以完成对各类信息的浏览、查询、添加、删除、修改等功能。此报告主要介绍本课题所完成的功能和开发的过程，重点的说明了系统设计的思想以及主要功能</p>
<h2 id="信息描述"><a href="#信息描述" class="headerlink" title="信息描述"></a>信息描述</h2><p>系统中，关于信息描述的格式采用C语言的<strong>结构体</strong>进行描述</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">product</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> num;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">char</span> name[N];</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> quantity;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">float</span> price;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>所有商品信息，采用数组进行存储。</p>
<h2 id="商品信息录入"><a href="#商品信息录入" class="headerlink" title="商品信息录入"></a>商品信息录入</h2><p>商品信息录入包括通过键盘录入商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可增加其他录入信息。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_goods</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入商品种类数:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n[%d]\t商品编号：&quot;</span>,i+<span class="number">1</span>);<span class="comment">//格式要求</span></span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].num );</span><br><span class="line">		<span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)<span class="comment">//商品种类数控制输入</span></span><br><span class="line">        &#123;	<span class="keyword">if</span>(a[i].num==a[j].num)</span><br><span class="line">            &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\t\t不能重复，请重新输入！\n\n..................................................\n&quot;</span>);</span><br><span class="line"><span class="comment">//格式要求	     </span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;\t[%d]\t商品编号：&quot;</span>,i+<span class="number">1</span>);</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].num );	</span><br><span class="line">				j=<span class="number">-1</span>;<span class="comment">//执行for循环j++，使j=0,重新判断二次输入的标号是否重复</span></span><br><span class="line">			&#125;<span class="comment">//商品编号未重复，退出循环，继续录入余下信息</span></span><br><span class="line">        &#125;	</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t商品名称：&quot;</span>); </span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i].name);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t商品数量：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].quantity);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\t商品单价：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;a[i].price);					<span class="built_in">printf</span>(<span class="string">&quot;\n\n.......................................\n&quot;</span>);  				</span><br><span class="line">	&#125;</span><br><span class="line">	input=<span class="number">1</span>;<span class="comment">//标记，用于后序操作判断商品是否录入</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="商品信息显示"><a href="#商品信息显示" class="headerlink" title="商品信息显示"></a>商品信息显示</h2><p>商品信息显示能将商品种类、商品编号、名称、数量、单价等基本信息显示的一大功能。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output_goods</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">if</span>(input==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">    	&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">            <span class="comment">//注意数字字符格式</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------\n\t\t无可浏览的商品信息\n&quot;</span>); </span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言商品进销存管理系统（2）</title>
    <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="输入进货信息"><a href="#输入进货信息" class="headerlink" title="输入进货信息"></a>输入进货信息</h1><p>​        输入进货信息包括通过键盘录入商品数量的功能。根据实际情况，可增加已有商品数量。输入进货信息的界面如图3-3所示</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">purchase</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,i,y;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(input==<span class="number">1</span>)<span class="comment">//判断是否可进货</span></span><br><span class="line">    &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">		&#125;<span class="comment">//陈列已有商品</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入进货商品编号&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==a[i].num)<span class="comment">//判断是否有对应商品</span></span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入进货量 &quot;</span>);</span><br><span class="line">			 	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">				a[i].quantity+=y; </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);<span class="comment">//完成进货后显示</span></span><br><span class="line">				<span class="keyword">return</span>;<span class="comment">//退出循环！！！</span></span><br><span class="line">            &#125;</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t无此编号商品！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------\n\t\t无可购买的商品信息\n&quot;</span>); </span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="输入销售信息"><a href="#输入销售信息" class="headerlink" title="输入销售信息"></a>输入销售信息</h1><p>输入销售信息包括通过键盘录入商品数量的功能。根据实际情况，可减少已有商品数量信息。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sale</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,i,y;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(input==<span class="number">0</span>)<span class="comment">//判断input的值来确定是否有商品</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无可销售的商品信息!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">output_goods</span>(a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入销售商品编号 &quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==a[i].num)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;请输入销售量&quot;</span>);</span><br><span class="line">			 	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);</span><br><span class="line">			 	<span class="keyword">while</span>(y&gt;a[i].quantity)</span><br><span class="line">				 &#123;</span><br><span class="line">			 		<span class="built_in">printf</span>(<span class="string">&quot;请重新输入&quot;</span>); </span><br><span class="line">			 		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;y);	</span><br><span class="line">				 &#125;</span><br><span class="line">				a[i].quantity-=y; </span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);		</span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line">			&#125;			</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t无可销售的商品信息\n&quot;</span>); </span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注：进货和销售类似，但可分为两种判断方式</p>
<p>区别在于return的使用</p>
<h2 id="return的常用作用有以下两种"><a href="#return的常用作用有以下两种" class="headerlink" title="return的常用作用有以下两种"></a>return的常用作用有以下两种</h2><p>一种是返回参数所用的关键字，假如一个有返回值的方法执行完了之后需要返回一个参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">示例：</span><br><span class="line"><span class="function"><span class="keyword">public</span> string <span class="title">functionTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">String a = “abc”;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





<p>那么这个方法被调用之后就会返回一个值为abc的字符串，string result = functionTest();</p>
<p>第二种用法是，代码执行到此处终止。<br>比如当代码执行到某个地方会出现几种结果，然后其中一种结果就不能执行后续代码，这时候在那里加上一个return就可以终止后面的代码执行。</p>
]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言商品进销存管理系统（3）</title>
    <url>/2020/07/22/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="修改商品信息"><a href="#修改商品信息" class="headerlink" title="修改商品信息"></a>修改商品信息</h1><p>修改商品信息包括通过键盘录入并修改商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可修改已有商品信息。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x,i,y;</span><br><span class="line">	<span class="keyword">char</span> m;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------------&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span>(input==<span class="number">0</span>)<span class="comment">//判断input的值来确定是否有商品</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;无可销售的商品信息!\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入需要修改的商品编号: &quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);		</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(x==a[i].num)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------------------------------------&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\nQ.退出  A.修改名称  B.修改数量  C.修改单价\n请选择:&quot;</span>);</span><br><span class="line">					<span class="built_in">getchar</span>();</span><br><span class="line">					<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,&amp;m);</span><br><span class="line">					<span class="built_in"><span class="keyword">switch</span></span>(m)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;请输入%s商品的名称：&quot;</span>,a[i].name);</span><br><span class="line">								 <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i].name);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">								 <span class="keyword">break</span>;</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">						         <span class="built_in">printf</span>(<span class="string">&quot;\t商品数量：&quot;</span>);</span><br><span class="line">								 <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].quantity);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">								 <span class="keyword">break</span>;			</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">						         <span class="built_in">printf</span>(<span class="string">&quot;\t商品单价：&quot;</span>);</span><br><span class="line">								 <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>,&amp;a[i].price);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">								 <span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%.2f\t\t\n&quot;</span>,a[i].num,a[i].name,a[i].quantity,a[i].price);</span><br><span class="line">								 <span class="keyword">break</span>;	</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">						<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">									<span class="keyword">return</span>;</span><br><span class="line">						<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t输入错误\n&quot;</span>);	</span><br><span class="line">								<span class="keyword">return</span>;</span><br><span class="line">					&#125; 				</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> 	<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t查无此商品\n&quot;</span>);	</span><br><span class="line">			</span><br><span class="line">		&#125;		</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="增加删除商品信息"><a href="#增加删除商品信息" class="headerlink" title="增加删除商品信息"></a>增加删除商品信息</h1><p>增加删除商品信息包括通过键盘录入商品种类、商品编号、名称、数量、单价等基本信息的功能。根据实际情况，可增加商品录入信息，删除功能可删除已有的商品</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp,i;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入所添加商品的编号：&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(temp==a[i].num)</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\t%d商品已存在！\n&quot;</span>,temp);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	n++;</span><br><span class="line"></span><br><span class="line">	a[i].num=temp;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入%d商品的名称：&quot;</span>,temp);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i].name);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入%d商品的数量：&quot;</span>,temp);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i].quantity);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入%d商品的单价：&quot;</span>,temp);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%f&quot;</span>,&amp;a[i].price);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n...............................................................................&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line"></span><br><span class="line">	input=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Delete</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">int</span> temp,i,j;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> choice;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(input==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t无商品信息！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入要删除商品的编号：&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;temp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(temp==a[i].num)</span><br><span class="line"></span><br><span class="line">		&#123;</span><br><span class="line"></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\t确定要删除该商品吗?(Y or N)&quot;</span>);</span><br><span class="line"></span><br><span class="line">			<span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">			choice = <span class="built_in">getchar</span>();			</span><br><span class="line"></span><br><span class="line">			<span class="built_in"><span class="keyword">switch</span></span> (choice)</span><br><span class="line"></span><br><span class="line">			&#123;	</span><br><span class="line"></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;y&#x27;</span>:</span><br><span class="line"></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;Y&#x27;</span>:</span><br><span class="line"></span><br><span class="line">				<span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;n;j++)<span class="comment">//依次往前移动后续商品，覆盖当前商品，实现删除</span></span><br><span class="line"></span><br><span class="line">					a[j<span class="number">-1</span>]=a[j];<span class="comment">//商品信息全部移位</span></span><br><span class="line"></span><br><span class="line">				n--;</span><br><span class="line"></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n\t%d商品已删除！\n&quot;</span>,temp);</span><br><span class="line"></span><br><span class="line">				<span class="keyword">if</span>(n==<span class="number">0</span>)<span class="comment">//当删除的是系统中最后一件商品时，需要设置为系统无商品</span></span><br><span class="line"></span><br><span class="line">					input=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;n&#x27;</span>:</span><br><span class="line"></span><br><span class="line">			<span class="keyword">case</span> <span class="string">&#x27;N&#x27;</span>:</span><br><span class="line"></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n\t输入错误！\n&quot;</span>);	</span><br><span class="line"></span><br><span class="line">				<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">			&#125;	</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t无此编号商品！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">edit</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">char</span> m;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请选择：Q.退出\tA.添加商品信息\tB.删除商品信息    &quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">getchar</span>();</span><br><span class="line"></span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>,&amp;m);</span><br><span class="line"></span><br><span class="line">	<span class="built_in"><span class="keyword">switch</span></span>(m)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line"></span><br><span class="line">		<span class="built_in">add</span>(a);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line"></span><br><span class="line">	<span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line"></span><br><span class="line">		<span class="built_in">Delete</span>(a);</span><br><span class="line"></span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">default</span>:</span><br><span class="line"></span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;\n\t输入错误！\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>二级菜单代码简洁</p>
]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言商品进销存管理系统（4）</title>
    <url>/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="查询商品信息"><a href="#查询商品信息" class="headerlink" title="查询商品信息"></a>查询商品信息</h1><p>查询商品信息包括通过键盘录入查询商品编号或商品名称基本信息的功能。根据实际情况，可查询到该商品所有信息。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">search</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> l[<span class="number">20</span>], m;</span><br><span class="line">	<span class="keyword">int</span> x, i;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="number">1</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n请选择查询方式：Q.退出  A.按商品编号  B.按商品名称\n&quot;</span>);</span><br><span class="line">		<span class="built_in">getchar</span>();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;m);</span><br><span class="line">		<span class="built_in"><span class="keyword">switch</span></span> (m)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的商品编号：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (x == a[i].num)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">            &#125;	</span><br><span class="line">						<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t查无此商品\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入要查询的商品名称：&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, &amp;l);</span><br><span class="line">			<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (<span class="built_in">strcmp</span>(l, a[i].name) == <span class="number">0</span>)<span class="comment">//比较字符串根据结果返回不同值</span></span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line">					<span class="keyword">return</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t查无此商品\n&quot;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t输入错误\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  	<span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------\n\t\t无可查询的商品信息\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h2><p>strcmp()函数有两个参数，即要比较的两个字符串。strcmp()函数对两个字符串进行大小写敏感的(case-sensitiVe)和字典式的(lexicographic)比较，并返回下列值之一：</p>
<pre><code>返  回  值         意  义
</code></pre>
<hr>
<pre><code>&lt;0               第一个字符串小于第二个字符串
 0               两个字符串相等    ·
&gt;0               第一个字符串大于第二个字符串
</code></pre>
<h1 id="商品信息排序"><a href="#商品信息排序" class="headerlink" title="商品信息排序"></a>商品信息排序</h1><p>商品信息排序包括通过键盘录入选择商品编号或商品名称从而进行排序的功能。根据实际情况，可直接观察商品排序后的信息。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,, j, tmp,mark[N];<span class="comment">//标记用于比较排序时的记号处理</span></span><br><span class="line">	<span class="keyword">char</span> m;</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--------------------------------------------------------------------&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n请选择：Q.退出  A.按商品名称排序  B.按商品数量排序\n&quot;</span>);</span><br><span class="line">		getchar();</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;m);</span><br><span class="line">		<span class="keyword">switch</span> (m)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mark[i] = i;</span><br><span class="line">		&#125;</span><br><span class="line">				<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (<span class="built_in">strcmp</span>(a[mark[j]].name, a[mark[j + <span class="number">1</span>]].name) &gt; <span class="number">0</span>)</span><br><span class="line">						&#123;</span><br><span class="line">							tmp = mark[j];</span><br><span class="line">							mark[j] = mark[j + <span class="number">1</span>];</span><br><span class="line">							mark[j + <span class="number">1</span>] = tmp;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[mark[i]].num, a[mark[i]].name, a[mark[i]].quantity, a[mark[i]].price);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			mark[i] = i;</span><br><span class="line">		&#125;</span><br><span class="line">				<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++)</span><br><span class="line">					&#123;</span><br><span class="line">						<span class="keyword">if</span> (a[mark[j]].quantity &lt; a[mark[j + <span class="number">1</span>]].quantity)</span><br><span class="line">						&#123;</span><br><span class="line">							tmp = mark[j];</span><br><span class="line">							mark[j] = mark[j + <span class="number">1</span>];</span><br><span class="line">							mark[j + <span class="number">1</span>] = tmp;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n商品编号\t商品名称\t商品数量\t商品单价\n&quot;</span>);</span><br><span class="line">				<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[mark[i]].num, a[mark[i]].name, a[mark[i]].quantity, a[mark[i]].price);</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;q&#x27;</span>:</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;Q&#x27;</span>:</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t输入错误\n&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n\t\t无可排序的商品信息\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>c语言商品进销存管理系统（5）</title>
    <url>/2020/07/25/c%E8%AF%AD%E8%A8%80%E5%95%86%E5%93%81%E8%BF%9B%E9%94%80%E5%AD%98%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="保存商品信息到硬盘文件"><a href="#保存商品信息到硬盘文件" class="headerlink" title="保存商品信息到硬盘文件"></a>保存商品信息到硬盘文件</h2><p>保存商品信息到硬盘文件包括通过键盘录入路径及名称新建或修改一个文件用于存储已保留的商品信息。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i;</span><br><span class="line">	<span class="keyword">char</span> name[N];</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="keyword">if</span> (input == <span class="number">1</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入文件路径及文件名:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);<span class="comment">//检查 </span></span><br><span class="line">		FILE* fp = fopen(name, <span class="string">&quot;w+&quot;</span>);</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">&quot;商品编号\t\t商品名称\t\t商品数量\t\t商品单价\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%d\t\t%s\t\t%d\t\t%f\t\t\n&quot;</span>, a[i].num, a[i].name, a[i].quantity, a[i].price);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t文件已保存！\n&quot;</span>);</span><br><span class="line">		fclose(fp);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>  	<span class="built_in">printf</span>(<span class="string">&quot;---------------------------------------------------\n\t\t无可保存的商品信息\n&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="从硬盘文件获得商品信息"><a href="#从硬盘文件获得商品信息" class="headerlink" title="从硬盘文件获得商品信息"></a>从硬盘文件获得商品信息</h1><p>从硬盘文件获得商品信息包括通过键盘录入路径及名称查找到一个已存在的文件用于读取文件中的的商品信息。</p>
<h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(struct product a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i, j = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">char</span> name[N];</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	FILE* fp;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\t请输入要读取文件路径或文件名:&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, name);</span><br><span class="line">	<span class="keyword">if</span> ((fp = fopen(name, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t该文件不存在！\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span> (!feof(fp))</span><br><span class="line">		&#123;</span><br><span class="line">			ch = fgetc(fp);</span><br><span class="line">			<span class="keyword">if</span> (ch == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">				j++;</span><br><span class="line">		&#125;</span><br><span class="line">		n = j;</span><br><span class="line">		fclose(fp);</span><br><span class="line">		fp = fopen(name, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">		<span class="built_in">fscanf</span>(fp, <span class="string">&quot;商品编号\t\t商品名称\t\t商品数量\t\t商品单价\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%d%s%d%f&quot;</span>, &amp;a[i].num, a[i].name, &amp;a[i].quantity, &amp;a[i].price);</span><br><span class="line">		&#125;</span><br><span class="line">		fclose(fp);</span><br><span class="line">		input = <span class="number">1</span>;</span><br><span class="line">		output_goods(a);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">product</span> <span class="title">a</span>[<span class="title">N</span>];</span></span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n\t  -小型商场进销存管理系统-\n\t ========================\n&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\t\t1-输入商品信息\n\t\t2-浏览商品信息\n\t\t3-输入进货信息\n\t\t4-输入销售信息\n\t\t5-查询商品信息\n\t\t6-修改商品信息\n\t\t7-增加/删除商品\n\t\t8-商品信息排序\n\t\t9-保存商品信息\n\t\t10-导入商品信息\n\t\t ----------------------\n\t&quot;</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请选择您所需要的操作（选择”0“退出）:&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">		<span class="keyword">switch</span> (m)</span><br><span class="line">		&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>:input_goods(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">2</span>:output_goods(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">3</span>:purchase(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">4</span>:sale(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">5</span>:search(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">6</span>:modify(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">7</span>:edit(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">8</span>:order(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">9</span>:save(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">10</span>:read(a);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t谢谢使用&quot;</span>);</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;\n\t\t选择错误，请重新输入\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">		system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>c</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客搭建</title>
    <url>/2020/08/31/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="1-创建github个人仓库"><a href="#1-创建github个人仓库" class="headerlink" title="1.创建github个人仓库"></a>1.创建github个人仓库</h2><p>github账户你值得拥有！</p>
<p>[Build software better, together]</p>
<p><a href="https://github.com/">https://github.com/</a></p>
<p><img src="https://pic3.zhimg.com/v2-1e6b64cf13587210e41b79fd2086c266_180x120.jpg" alt="图标"></p>
<p>创建一个自己的github账户，用户名设置清楚与仓库建立有关。</p>
<p>在个人主页点击Repositories，然后new一个</p>
<p><img src="https://i.loli.net/2020/09/04/pXrBznIRyhi1ZVj.png" alt="29$V79H2Y_AZXO8LW6XRGNK.png"></p>
<p>注意，仓库名格式：<strong>用户名.github.io</strong></p>
<h2 id="2-环境配置"><a href="#2-环境配置" class="headerlink" title="2.环境配置"></a>2.环境配置</h2><h3 id="1-了解Hexo"><a href="#1-了解Hexo" class="headerlink" title="1.了解Hexo"></a>1.了解Hexo</h3><p><a href="https://github.com/hexojs/hexo">Hexo</a>是高效的静态站点生成框架，她基于Node.js。 通过 Hexo 你可以轻松地使用 Markdown 编写文章，除了 Markdown 本身的语法之外，还可以使用 Hexo 提供的标签插件来快速的插入特定形式的内容，而且相对于其他框架，Hexo在速度上也有很大优势。</p>
<h3 id="2-搭建Node-js环境"><a href="#2-搭建Node-js环境" class="headerlink" title="2.搭建Node.js环境"></a>2.搭建Node.js环境</h3><p>我们了解到Hexo基于Node.js的，那么我们搭建博客网站首先需要安装Node.js环境。 Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，可以在非浏览器环境下，解释运行 JS 代码。<br>下载地址：<a href="http://nodejs.cn/download">http://nodejs.cn/download</a><br>测试安装：命令行使用node -v 、mpm -v，查看显示版本号即成功。</p>
<h3 id="3-安装Hexo博客框架工具"><a href="#3-安装Hexo博客框架工具" class="headerlink" title="3.安装Hexo博客框架工具"></a>3.安装Hexo博客框架工具</h3><p>Hexo是一个建站工具，可以帮助我们快速生成基本的博客文件，安装它需要在控制台下使用如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g1</span><br></pre></td></tr></table></figure>

<p>若报错，请尝试在命令前加上sudo</p>
<h3 id="4-安装Git版本工具"><a href="#4-安装Git版本工具" class="headerlink" title="4.安装Git版本工具"></a>4.安装Git版本工具</h3><p>Git是目前世界上最流行的分布式版本控制系统，是的，没有之一。使用Git可以帮助我们把本地的网页和文章等内容提交到Gihub上，实现同步。<br>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a><br>Windows系统需下载，Mac系统因为自带Git无需操作。<br>测试安装：git - -version，查看显示版本号即成功。</p>
<h2 id="3-开启GitHub-Pages服务"><a href="#3-开启GitHub-Pages服务" class="headerlink" title="3.开启GitHub Pages服务"></a>3.开启GitHub Pages服务</h2><p>搭建我们的个人博客需要一个唯一的域名，当然我们可以申请购买一个域名来使用，但是在不是太必要的情况下，我们也可以通过Github Pages获得一个免费使用的域名。</p>
<p>在第一步自己建立的仓库随后选择Setting进入设置，找到Github Pages如下</p>
<p><a href="https://sm.ms/image/3BHW7rCQmZVwaNy" target="_blank"><img src="https://i.loli.net/2020/09/05/3BHW7rCQmZVwaNy.png" /></a></p>
<p><a href="https://sm.ms/image/FRS2NGOjirQPqaB" target="_blank"><img src="https://i.loli.net/2020/09/05/FRS2NGOjirQPqaB.png" /></a></p>
<p>将你的Git与GitHub帐号绑定，鼠标右击blog文件夹打开Git Bash</p>
<p><img src="https://pic2.zhimg.com/80/v2-8b1cbe253d6e0301bd9a68c6f98a9f52_720w.jpg" alt="img"></p>
<p>或者在菜单里搜索Git Bash，设置user.name和user.email配置信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>生成ssh密钥文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>
<p><img src="https://pic2.zhimg.com/80/v2-d1e47103ec1aa8675f68688c5d63bd27_720w.jpg" alt="img"></p>
<p>打开<a href="https://link.zhihu.com/?target=https://github.com/settings/keys">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>
<p><img src="https://pic1.zhimg.com/80/v2-72a3f22c080e99343c3cc4aabce10e3c_720w.jpg" alt="img"></p>
<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#x40;&#x67;&#x69;&#x74;&#104;&#117;&#x62;&#46;&#x63;&#111;&#x6d;</a> ：</p>
<p><img src="https://pic4.zhimg.com/80/v2-da481ffa686410becd4186c656b4ebd6_720w.jpg" alt="img"></p>
<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>
<h1 id="hexoc初始化"><a href="#hexoc初始化" class="headerlink" title="hexoc初始化"></a>hexoc初始化</h1><ul>
<li>创建一个blog文件夹用于存放hexo。然后右键该文件夹使用</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git bash here</span><br></pre></td></tr></table></figure>

<p>命令就可以直接定位到当前目录。</p>
<p>然后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure>

<p>初始化hexo基础配置文件。初始化时间比较长，不用急，等完成后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>初始化后，接着输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>配置node。然后输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>加载hexo基础html、css、js等文件。<br>在这完成后等于已经在本地创建了一个网页，想查看的话，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>然后相当于开启了一个本地的服务器，在浏览器输入 <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=2886260140,3908419583&fm=26&gp=0.jpg" alt="img"></p>
<p>你就可以看到你的本地博客了。</p>
<p><strong>推送网站</strong></p>
<p>接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点</strong>配置文件，如下图</p>
<p><img src="https://pic2.zhimg.com/80/v2-cb1fd5e5a2e73f513234e434724c7c55_720w.jpg" alt="img"></p>
<p>进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题</strong>配置文件，如下图</p>
<p><img src="https://picb.zhimg.com/80/v2-4252029e5634bf91c7d58916ae2b8ac3_720w.jpg" alt="img"></p>
<p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：</p>
<p>deploy:<br>type: git<br>repo: 这里填入你之前在GitHub上创建仓库的完整路径，记得加上 .git<br>branch: master参考如下：</p>
<p><a href="https://sm.ms/image/rMlEdKaV4NSHk6X" target="_blank"><img src="https://i.loli.net/2020/09/05/rMlEdKaV4NSHk6X.png" /></a></p>
<p>保存站点配置文件。</p>
<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>



<p>这时，我们分别输入三条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即  <a href="http://xxxx.github.io/">http://xxxx.github.io</a></p>
<p> 比如我的xxxx就是我的GitHub用户名</p>
<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>
<p>搭建完成，剩下美化教程就靠自己的资源利用能力了（百度不香吗???）</p>
]]></content>
      <categories>
        <category>材料</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML复习总结</title>
    <url>/2021/01/02/HTML%E5%A4%8D%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">一：HTML5基础</span><br><span class="line">1.图像标签：插入图像时使用标签<span class="tag">&lt;<span class="name">img</span>/&gt;</span>，要求src和alt属性必选</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;text&quot;</span> <span class="attr">title</span>=<span class="string">&quot;text&quot;</span>  <span class="attr">width</span>=<span class="string">&quot;x&quot;</span>  <span class="attr">height</span>=<span class="string">&quot;y&quot;</span> /&gt;</span></span><br><span class="line">2.链接标签</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;path&quot;</span> <span class="attr">target</span>=<span class="string">&quot;目标窗口位置&quot;</span>&gt;</span>链接文本或图像<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">跳转标记</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&quot;marker&quot;</span>&gt;</span>乙位置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">跳转链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#marker&quot;</span>&gt;</span>甲位置<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">功能性链接</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.blog.fadeaway.online/&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">二：列表、表格与媒体元素</span><br><span class="line">1.列表</span><br><span class="line">（1）无序列表ul</span><br><span class="line">	没有顺序，每个<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签独占一行（块元素）</span><br><span class="line">	默认<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签项前面有个实心小圆点</span><br><span class="line">	一般用于无序类型的列表，如导航、侧边栏新闻</span><br><span class="line">（2）有序列表li</span><br><span class="line">	有顺序，每个<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签独占一行（块元素）</span><br><span class="line">	默认<span class="tag">&lt;<span class="name">li</span>&gt;</span>标签项前面有顺序标记</span><br><span class="line">	一般用于排序类型的列表，如试卷、问卷选项等</span><br><span class="line">（3）定义列表dl</span><br><span class="line">	没有顺序，每个<span class="tag">&lt;<span class="name">dt</span>&gt;</span>(声明列表项)标签、<span class="tag">&lt;<span class="name">dd</span>&gt;</span>(定义列表项内容)标签独占一行（块元素）</span><br><span class="line">	默认没有标记</span><br><span class="line">	一般用于一个标题下有一个或多个列表项的情况</span><br><span class="line"></span><br><span class="line">2.表格</span><br><span class="line">	为什么使用表格？（简单通用，结构稳定）</span><br><span class="line">table 整个表格</span><br><span class="line">caption 表格标题</span><br><span class="line">thead 表头</span><br><span class="line">tbody 表格主体</span><br><span class="line">tfoot 表尾</span><br><span class="line">tr 表格行</span><br><span class="line">th 表头单元格（或称标题单元格）</span><br><span class="line">td 普通单元格</span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        	 <span class="tag">&lt;<span class="name">td</span>&gt;</span>第1个单元格的内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         	 <span class="tag">&lt;<span class="name">td</span>&gt;</span>第2个单元格的内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	 	 <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;n&quot;</span>&gt;</span>单元格内容<span class="tag">&lt;/<span class="name">td</span>&gt;</span>//   所跨的列数</span><br><span class="line">	 	 <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span>   //   所跨的行数</span><br><span class="line">       </span><br><span class="line">	<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">&lt;/table &gt;</span><br><span class="line">3.媒体元素</span><br><span class="line">	音频元素 <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;音频路径&quot;</span>  <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	视频元素 <span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;视频路径&quot;</span>  <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line">4.结构元素header footer section article aside nav</span><br><span class="line"></span><br><span class="line">5.框架语言 <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;path&quot;</span> <span class="attr">name</span>=<span class="string">&quot;mainFrame&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"></span><br><span class="line">三：表单</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;url地址&quot;</span> <span class="attr">method</span>=<span class="string">&quot;提交方式&quot;</span> <span class="attr">name</span>=<span class="string">&quot;表单名称&quot;</span>&gt;</span></span><br><span class="line">	各种表单控件</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userid&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>  <span class="attr">readonly</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit &quot;</span>  <span class="attr">disabled</span>   <span class="attr">value</span>=<span class="string">&quot;保存&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">表单验证的好处</span><br><span class="line">减轻服务器的压力</span><br><span class="line">保证数据的可行性和安全性</span><br><span class="line">placeholder</span><br><span class="line">required</span><br><span class="line">pattern</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">四：</span><br><span class="line">css:   </span><br><span class="line">Cascading Style Sheet  级联样式表</span><br><span class="line"></span><br><span class="line">行内样式</span><br><span class="line">	<span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red;&quot;</span>&gt;</span>style属性的应用<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;font-size:14px; color:green;&quot;</span>&gt;</span>直接在HTML标签中设置的样式<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">内部样式</span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        	<span class="selector-tag">h1</span>&#123;<span class="attribute">color</span>: green; &#125;</span></span><br><span class="line"><span class="css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">外部样式</span><br><span class="line">	链接外部样式表</span><br><span class="line">			<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">			  ……</span><br><span class="line">			<span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line">			  ……</span><br><span class="line">			<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	导入外部样式表</span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	……</span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="xml"></span></span><br><span class="line"><span class="xml">	<span class="comment">&lt;!--</span></span></span><br><span class="line"><span class="comment"><span class="xml">	@import url(&quot;style.css&quot;);</span></span></span><br><span class="line"><span class="comment"><span class="xml">	--&gt;</span></span></span><br><span class="line"><span class="xml">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	css:样式优先级 行内样式&gt;内部样式表&gt;外部样式表</span><br><span class="line">		就近原则</span><br><span class="line"></span><br><span class="line">属性选择器</span><br><span class="line">	[属性名字] &#123;&#125;  匹配的是拥有这个属性的元素</span><br><span class="line">	[class] &#123; &#125;</span><br><span class="line">	[id] &#123; &#125;</span><br><span class="line">	[a] &#123; &#125;  a自定义属性</span><br><span class="line">	</span><br><span class="line">五：</span><br><span class="line">	伪类样式</span><br><span class="line">	鼠标悬浮其上的超链接样式</span><br><span class="line">	a:hover &#123;</span><br><span class="line">		color:#B46210;</span><br><span class="line">		text-decoration:underline;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">background-repeat属性</span><br><span class="line">repeat：沿水平和垂直两个方向平铺</span><br><span class="line">no-repeat：不平铺，即只显示一次</span><br><span class="line">repeat-x：只沿水平方向平铺</span><br><span class="line">repeat-y：只沿垂直方向平铺</span><br><span class="line"></span><br><span class="line">CSS3渐变 linear-gradient ( position,  color1,  color2,…)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">六。</span><br><span class="line">	盒子模型总尺寸=border+padding+margin+内容宽度</span><br><span class="line">	</span><br><span class="line">	边框border</span><br><span class="line">​ 	内边距padding</span><br><span class="line">​ 	内容content</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">七：</span><br><span class="line">清除浮动，防止父级边框塌陷的四种方法</span><br><span class="line">浮动元素后面加空div</span><br><span class="line">简单，空div会造成HTML代码冗余</span><br><span class="line">设置父元素的高度</span><br><span class="line">简单，元素固定高会降低扩展性</span><br><span class="line">父级添加overflow属性</span><br><span class="line">简单，下拉列表框的场景不能用</span><br><span class="line">父级添加伪类after</span><br><span class="line">写法比上面稍微复杂一点，但是没有副作用，推荐使用</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer01&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/photo-1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;日用品&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer02&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/photo-2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图书&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer03&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image/photo-3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;鞋子&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layer04&quot;</span>&gt;</span>浮动的盒子……<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">.clear:after&#123;</span><br><span class="line">    content: &#x27;&#x27;;          /*在clear类后面添加内容为空*/</span><br><span class="line">    display: block;      /*把添加的内容转化为块元素*/</span><br><span class="line">    clear: both;         /*清除这个元素两边的浮动*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">八：</span><br><span class="line">position属性：</span><br><span class="line">1.static：默认值，网页没有定位</span><br><span class="line">2.relative:相对定位</span><br><span class="line">（1）设置相对定位的元素，盒子会相对于他原来的位置进行偏移，达到新位置。</span><br><span class="line">（2）设置相对定位的元素，盒子仍然在原来的文本流中，对父级元素和相邻的元素不受影响。，。</span><br><span class="line">（3）设置相对定位的元素，盒子原来的位置会被保留下来。</span><br><span class="line">（4）对于浮动的元素，相对定位也管用</span><br><span class="line">3.absolute:绝对定位</span><br><span class="line">（1）使用了绝对定位的元素以它最近的一个“已经定位”的“祖先”元素为基准进行偏移。如果没有已经定位的祖先元素，那么会以浏览器窗口为基准来进行定位。</span><br><span class="line">（2）绝对定位的元素，从文档流中脱离，这意味着他们对其他元素的定位不会造成影响。</span><br><span class="line">4.fixed:固定定位</span><br><span class="line">（1）相对于浏览器窗口来定位。</span><br><span class="line">（2）偏移量不会随着滚动条的移动而移动。</span><br><span class="line">5.固定定位的使用场景：</span><br><span class="line">（1）一般在网页的左右两边固定广告，返回顶部图标、吸顶导航栏中使用。</span><br><span class="line">6.z-index: 用于调整元素定位时重叠层的上下位置，其语法为：</span><br><span class="line">z-index:9999;</span><br><span class="line">需要注意的是，使用z-index的前提必须该元素已经定位了（relative,absolute,fixed）</span><br><span class="line">7.透明度：opacity:设置值，值为0-1，值越小越透明。eg:0.4</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>考点</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML考点解析</title>
    <url>/2021/01/02/HTML%E8%80%83%E7%82%B9%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="HTML考点解析"><a href="#HTML考点解析" class="headerlink" title="HTML考点解析"></a>HTML考点解析</h1><p>1，选择题30分，15小题：</p>
<p>2，代码填空（20分） 4小题：</p>
<p>3、问答题20分</p>
<pre><code>1）.后代选择器，子选择器，相邻选择器，同辈选择器的基本语法

2）.JS文件按照其引入到网页的方式

3）.标签选择器、类选择器、ID选择器、并集选择器和全局选择器的基本语

4）.BOM里常用的至少5个对象， 列举window对象的常用的5个方法
</code></pre>
<p>4.程序题（30分)</p>
<pre><code>HTML5实现表单页面

JS实现时钟功能

CSS3实现属性选择器实现样式页面
</code></pre>
<p>1.无</p>
<p>2.无</p>
<p>3.</p>
<pre><code>1.      后代选择器  body p&#123;  background: red;  &#125;
        子选择器  body&gt;p&#123;  background: pink;  &#125;
        相邻选择器 active+p &#123;  background: green;  &#125;
        同辈选择器 active~p&#123;  background: yellow;  &#125;

2.    
    内嵌式
        （1）创建一对script标签，在标签中书写js代码
        （2）在HTML页面中任何位置引入该标签
            &lt;script&gt;
                js代码
            &lt;/script&gt;
    外链式
        （1）在外部创建.js文件，并在js文件中书写js代码
        （2）在页面通过script标签中src属性引入.js文件
            &lt;script src=&quot;js文件路径&quot;&gt;&lt;/script&gt;
    事件属性引入
        &lt;div onclick=&quot;alert(&#39;时间属性&#39;)&quot;&gt;xxx&lt;/div&gt;
    注意：
    script标签引入位置通常在head头部或者结束body之前（因为代码执行      顺序的问题，所以最好写在结束body之前）

3.
    标签选择器 p &#123; font-size:16px;&#125;
    类选择器   class &#123; font-size:16px;&#125;
    ID选择器   #id &#123; font-size:16px;&#125;
    
    遵循ID选择器 &gt; class类选择器 &gt; 标签选择器的优先级
    
    并集选择器  p, span&#123;color: skyblue;&#125;
    全局选择器     *&#123;color: red;&#125;

4.      
    对象：window、document、location、screen、history、navigator

    方法：alert()、confirm()、prompt()、open()、close()
</code></pre>
<p>4.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(1)</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span><span class="comment">&lt;!--定义一个表单，表单开始--&gt;</span></span><br><span class="line">        账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span><span class="comment">&lt;!--单行文本框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span>/&gt;</span><span class="comment">&lt;!--密码文本框--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下面是单选按钮，有两个选项，二选一--&gt;</span></span><br><span class="line">        性别：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>/&gt;</span>男</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>/&gt;</span>女</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--下面是复选框，可多选--&gt;</span></span><br><span class="line">        爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ah1&quot;</span> /&gt;</span>游泳</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ah2&quot;</span> /&gt;</span>篮球</span><br><span class="line">              <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;interest&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ah3&quot;</span> /&gt;</span>跑步</span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">        简历：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> /&gt;</span><span class="comment">&lt;!--上传文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span><span class="comment">&lt;!--换行--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span><span class="comment">&lt;!--提交按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span><span class="comment">&lt;!--表单结束--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(2)</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;clock&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> timer;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> last=<span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">settime</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementById(<span class="string">&quot;clock&quot;</span>).innerHTML=<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString();</span></span><br><span class="line"><span class="javascript">	<span class="keyword">if</span>((<span class="keyword">new</span> <span class="built_in">Date</span>().getTime()-last)&gt;<span class="number">10</span>*<span class="number">1000</span>)</span></span><br><span class="line"><span class="javascript">	&#123;</span></span><br><span class="line"><span class="javascript">		<span class="built_in">clearInterval</span>(timer);</span></span><br><span class="line"><span class="javascript">	&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">timer=<span class="built_in">setInterval</span>(<span class="string">&quot;settime()&quot;</span>,<span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">(3)</span><br><span class="line">CSS3属性选择器</span><br><span class="line">下面是CSS3的属性选择器的语法，及使用。</span><br><span class="line"></span><br><span class="line">元素名字[元素类型=“类型名字”]：选择器名字&#123;</span><br><span class="line">  属性：值；</span><br><span class="line">  属性：值；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>考点</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>I/O流</title>
    <url>/2021/04/15/IO%E6%B5%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="I-O流"><a href="#I-O流" class="headerlink" title="I/O流"></a>I/O流</h1><h2 id="流的概念和作用"><a href="#流的概念和作用" class="headerlink" title="流的概念和作用"></a><strong>流的概念和作用</strong></h2><p>流：代表任何有能力产出数据的数据源对象或者是有能力接受数据的接收端对象<Thinking in Java></p>
<p>流的本质:数据传输，根据数据传输特性将流抽象为各种类，方便更直观的进行数据操作。 </p>
<p><strong>作用：为数据源和目的地建立一个输送通道</strong></p>
<h2 id="字符流AND字节流"><a href="#字符流AND字节流" class="headerlink" title="字符流AND字节流"></a>字符流AND字节流</h2><p>1.按处理数据单位不同分为 字节流、字符流 </p>
<p>字节流：每次读取(写出)一个字节，当传输的资源文件有中文时，就会出现乱码，</p>
<p>字符流：每次读取(写出)两个字节，有中文时，使用该流就可以正确传输显示中文。</p>
<p>1字符 = 2字节 、 1字节(byte) = 8位(bit) 、 一个汉字占两个字节长度</p>
<p>2.按功能不同分为 节点流、处理流</p>
<p>节点流：以从或向一个特定的地方（节点）读写数据。如FileInputStream　</p>
<p>处理流：是对一个已存在的流的连接和封装，通过所封装的流的功能调用实现数据读写。如BufferedReader。处理流的构造方法总是要带一个其他的流对象做参数。一个流对象经过其他流的多次包装，</p>
<p>4个基本的抽象流类型，所有的流都继承这四个。</p>
<p>　　　　　　　　　　　输入流　　　　　　输出流</p>
<p>　　　　　　字节流　　InputStream　　outputStream</p>
<p>　　　　　　字符流　　Reader　　　　　　Writer</p>
<p><img src="https://i.loli.net/2021/04/15/B532rCxDnH4uQZf.png"></p>
<h3 id="输入字节流InputStream"><a href="#输入字节流InputStream" class="headerlink" title="输入字节流InputStream"></a>输入字节流InputStream</h3><p>BufferedInputStream：缓冲流，对处理流进行装饰，增强，内部会有一个缓存区，用来存放字节，每次都是将缓存区存满然后发送，而不是一个字节或两个字节这样发送。效率更高</p>
<p>DataInputStream：数据输入流，它是用来装饰其它输入流，它“允许应用程序以与机器无关方式从底层输入流中读取基本 Java 数据类型”</p>
<p>FileInputSream：文件输入流。它通常用于对文件进行读取操作</p>
<h3 id="输出字节流OutputStream"><a href="#输出字节流OutputStream" class="headerlink" title="输出字节流OutputStream"></a>输出字节流OutputStream</h3><p>ByteArrayOutputStream、FileOutputStream 是两种基本的介质流，它们分别向Byte 数组、和本地文件中写入数据。PipedOutputStream 是向与其它线程共用的管道中写入数据，<br>ObjectOutputStream 和所有FilterOutputStream 的子类都是装饰流(序列化中使用)。</p>
<h3 id="输入字符流Read"><a href="#输入字符流Read" class="headerlink" title="输入字符流Read"></a>输入字符流Read</h3><p>InputStreamReader 是一个连接字节流和字符流的桥梁，它将字节流转变为字符流。</p>
<p>FileReader 可以说是一个达到此功能、常用的工具类，在其源代码中明显使用了将FileInputStream 转变为Reader 的方法。我们可以从这个类中得到一定的技巧。Reader 中各个类的用途和使用方法基本和InputStream 中的类使用一致。</p>
<h3 id="输出字符流Write"><a href="#输出字符流Write" class="headerlink" title="输出字符流Write"></a>输出字符流Write</h3><p><strong>OutputStreamWriter</strong> 是OutputStream 到Writer 转换的桥梁，它的子类FileWriter 其实就是一个实现此功能的具体类（具体可以研究一SourceCode）。</p>
<h3 id="字节流和字符流使用情况：（重要）"><a href="#字节流和字符流使用情况：（重要）" class="headerlink" title="字节流和字符流使用情况：（重要）"></a>字节流和字符流使用情况：（重要）</h3><p>字符流和字节流的使用范围：字节流一般用来处理图像，视频，以及PPT，Word类型的文件。字符流一般用于处理纯文本类型的文件，如TXT文件等，字节流可以用来处理纯文本文件，但是字符流不能用于处理图像视频等非文本类型的文件。</p>
<h3 id="字符流与字节流转换"><a href="#字符流与字节流转换" class="headerlink" title="字符流与字节流转换"></a>字符流与字节流转换</h3><p>转换流的作用，文本文件在硬盘中以字节流的形式存储时，通过InputStreamReader读取后转化为字符流给程序处理，程序处理的字符流通过OutputStreamWriter转换为字节流保存。</p>
<p>转换流的特点：</p>
<p>其是字符流和字节流之间的桥梁<br>可对读取到的字节数据经过指定编码转换成字符<br>可对读取到的字符数据经过指定编码转换成字节<br>何时使用转换流？</p>
<p>当字节和字符之间有转换动作时；<br>流操作的数据需要编码或解码时。<br>具体的对象体现：</p>
<p>InputStreamReader:字节到字符的桥梁<br>OutputStreamWriter:字符到字节的桥梁<br>这两个流对象是字符体系中的成员，它们有转换作用，本身又是字符流，所以在构造的时候需要传入字节流对象进来。</p>
<p>OutputStreamWriter(OutStreamout):将字节流以字符流输出。</p>
<p>InputStreamReader(InputStream in)：将字节流以字符流输入</p>
<h3 id="字节流和字符流的区别（重点）"><a href="#字节流和字符流的区别（重点）" class="headerlink" title="字节流和字符流的区别（重点）"></a>字节流和字符流的区别（重点）</h3><p>字节流没有缓冲区，是直接输出的，而字符流是输出到缓冲区的。</p>
<p>因此在输出时，字节流不调用colse()方法时，信息已经输出了，</p>
<p>而字符流只有在调用close()方法关闭缓冲区时，信息才输出。</p>
<p>要想字符流在未关闭时输出信息，则需要手动调用flush()方法。</p>
<p>读写单位不同：字节流以字节（8bit）为单位，字符流以字符为单位，根据码表映射字符，一次可能读多个字节。</p>
<p>处理对象不同：字节流能处理所有类型的数据（如图片、avi等），而字符流只能处理字符类型的数据。</p>
<p>结论：只要是处理纯文本数据，就优先考虑使用字符流。除此之外都使用字节流。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>inputStream类的功能不足被Scanner解决了</p>
<p>OutputStream类的功能不足被PrintStream解决了</p>
<p>Reader类功能不足被BufferReader解决了</p>
<p>Writer类的功能不足被PrintWriter解决了</p>
<p>输出数据用printStream，printwriter</p>
<p>读取数据用Scanner其次是bufferReader</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>1.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">调整以下代码完成功能：</span></span><br><span class="line"><span class="comment">Http server 回送一个图片给浏览器客户端。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebServer</span></span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">		 ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);<span class="comment">//socket实例创建端口为80 本地连接电脑IP  ipconfig</span></span><br><span class="line">		 System.out.println(<span class="string">&quot;waiting for a tcp connection&quot;</span>);</span><br><span class="line">		 Socket s = ss.accept();<span class="comment">//接受连接</span></span><br><span class="line">		 System.out.println(<span class="string">&quot;constructed a tcp connection&quot;</span>);</span><br><span class="line">		 OutputStream oos = s.getOutputStream();<span class="comment">//输出流创建</span></span><br><span class="line">		 <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//缓存数组流1KB</span></span><br><span class="line">		 PrintWriter pw = <span class="keyword">new</span> PrintWriter(oos, <span class="keyword">true</span>);<span class="comment">//java.io.PrintWriter的构造方法并不局限于一下范例，java.io.PrintWriter构造方法的参数也可以是字节流, 即：</span></span><br><span class="line">      PrintWriter的构造方法如果第一个参数为流，那么就可以再传入一个<span class="keyword">boolean</span>型的参数，若该值为<span class="keyword">true</span>，那么当前PrintWriter就具有了自动行刷新功能，这时每当我们使用println方法写出一行字符串后就会自动调用flush().</span><br><span class="line">		 pw.println(<span class="string">&quot;HTTP/1.1 200 OK&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Server: tomcat&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Content-Type: image/png&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Content-Length: 172032&quot;</span>);</span><br><span class="line">		 pw.println();<span class="comment">//让浏览器知道head输出完成，开始正文输出</span></span><br><span class="line">		 InputStream is = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\3.png&quot;</span>);<span class="comment">//创建字节流从磁盘读取文件</span></span><br><span class="line">		 <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		 <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">			 len = is.read(buf);</span><br><span class="line">			 <span class="keyword">if</span> (len == -<span class="number">1</span>) &#123;</span><br><span class="line">				 <span class="keyword">break</span>;</span><br><span class="line">			 &#125;<span class="comment">//读取</span></span><br><span class="line">			 oos.write(buf, <span class="number">0</span>, len);<span class="comment">//写入</span></span><br><span class="line">		 &#125;</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebServer</span></span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">		 ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">80</span>);</span><br><span class="line">		 System.out.println(<span class="string">&quot;waiting for a tcp connection&quot;</span>);</span><br><span class="line">		 Socket s = ss.accept();</span><br><span class="line">		 System.out.println(<span class="string">&quot;constructed a tcp connection&quot;</span>);</span><br><span class="line">		 OutputStream oos = s.getOutputStream();</span><br><span class="line">		 PrintWriter pw = <span class="keyword">new</span> PrintWriter(oos, <span class="keyword">true</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;HTTP/1.1 200 OK&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Server: tomcat&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Content-Type: image/png&quot;</span>);</span><br><span class="line">		 pw.println(<span class="string">&quot;Content-Length: 172032&quot;</span>);</span><br><span class="line">		 pw.println();</span><br><span class="line">		 BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\4.png&quot;</span>));</span><br><span class="line">		 BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(oos);</span><br><span class="line">		 <span class="keyword">byte</span> [] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">		 <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">		 <span class="comment">//边读边写</span></span><br><span class="line">		 <span class="keyword">while</span>((len=bis.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">			 bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">			 bos.flush();</span><br><span class="line">		 &#125;</span><br><span class="line">		 s.close();</span><br><span class="line">		 ss.close();</span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Comparable和Comparator</title>
    <url>/2020/11/13/Java%E4%B8%ADComparable%E5%92%8CComparator/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Java中Comparable和Comparator"><a href="#Java中Comparable和Comparator" class="headerlink" title="Java中Comparable和Comparator"></a>Java中Comparable和Comparator</h2><p> 本文基于JDK1.8源码。</p>
<h3 id="Comparable接口"><a href="#Comparable接口" class="headerlink" title="Comparable接口"></a>Comparable<T>接口</h3><p>​    将Comparable<T>源码中的所有注释去掉后，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparable</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(T o)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面源码可以看到</p>
<p>（1）Comparable是一个泛型接口，泛型是T。</p>
<p>（2）接口中只有一个compareTo方法，返回值为int，它用于比较两个对象的“大小”，如果当前对象小于比较的对象o，返回一个负整数；如果等于比较的对象o，返回0，如果大于比较的对象o，返回一个正整数；</p>
<p>（3）如果compareTo方法中的o对象为null，方法会抛出NullPointerException；</p>
<p><strong>关于compareTo方法实现时，需要注意一下几点：</strong></p>
<p>（1）compareTo方法的实现必须保证sgn(x.compareTo(y))=-sgn(y.compareTo(x))，也就是符号相反，比如说x.compareTo(y)返回值为9，sgn(9)=1，那么y.compareTo(x)返回的一定是一个小于0的整数，比如-7，sgn(-7)=-1。如果前者抛出异常，后者也必须抛出异常；</p>
<p>（2）必须保证序的传递性，也就是说如果x.compareTo(y)&gt;0，并且y.compareTo(z)&gt;0，必然会有x.compareTo(z)&gt;0;</p>
<p>（3）如果x.compareTo(y)==0，则sgn(x.compareTo(z)) == sgn(y.compareTo(z))</p>
<p>（4）一般推荐compareTo方法实现时和equals方法联系起来，满足(x.compareTo(y)==0) == (x.equals(y))，也就是说x.compareTo(y)==0和x.equals(y)有相同的boolean值，也就是说两者要么全部为false，要么全部为true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age - person.age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码中Person类实现了Comparable接口，它是Comparable接口的实现类，按照属性age定义了Person类对象之间的一种“序”。但Person类并未对equals方法进行重写，直接继承了父类Object的equals方法。我们来测试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;lisi&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;wangwu&quot;</span>, <span class="number">10</span>);</span><br><span class="line">        SortedSet&lt;Person&gt; sortedSet=<span class="keyword">new</span> TreeSet();</span><br><span class="line">        <span class="keyword">boolean</span> flag1=sortedSet.add(p1);</span><br><span class="line">        <span class="keyword">boolean</span> flag2=sortedSet.add(p2);</span><br><span class="line">        <span class="keyword">boolean</span> flag3=sortedSet.add(p3);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag1:&quot;</span>+flag1);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag2:&quot;</span>+flag2);</span><br><span class="line">        System.out.println(<span class="string">&quot;flag3:&quot;</span>+flag3);</span><br><span class="line">        System.out.println(sortedSet);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果如下：</p>
<p>flag1:true<br>flag2:false<br>flag3:false<br>集合大小：1</p>
<p>测试类中定义了三个Person对象p1、p2和p3，根据equals方法，它们是三个不同的对象，但从上面定义的“序”的角度来看，三个对象大小是一样的（age都是10），当我们将他们加入到一个有序集合中，p2和p3会加入失败，这会产生一些意想不到的结果，所以推荐在实现compareTo方法时，应当与equals方法保持一致。</p>
<p>如果将上面的三个Person对象改为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">20</span>);</span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(<span class="string">&quot;lisi&quot;</span>, <span class="number">30</span>);</span><br><span class="line">Person p3 = <span class="keyword">new</span> Person(<span class="string">&quot;wangwu&quot;</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>那么最终的输出结果会是三个排序好的对象。</p>
<p>​    事实上，在JDK中实现了Comparable的绝大部分Java核心类中的自然顺序都与equals方法是一致的，当然也有特例，比如java.math.BigDecimal。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal d1=<span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        BigDecimal d2=<span class="keyword">new</span> BigDecimal(<span class="string">&quot;1.00&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;d1的精度：&quot;</span>+d1.scale());</span><br><span class="line">        System.out.println(<span class="string">&quot;d2的精度：&quot;</span>+d2.scale());</span><br><span class="line">        System.out.println(<span class="string">&quot;d1.equals(d2)：&quot;</span>+d1.equals(d2));</span><br><span class="line">        System.out.println(<span class="string">&quot;d1.compareTo(d2)：&quot;</span>+d1.compareTo(d2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序运行结果：</p>
<p>d1的精度：1<br>d2的精度：2<br>d1.equals(d2)：false<br>d1.compareTo(d2)：0</p>
<p>Process finished with exit code 0</p>
<p>程序中定义了两个不同精度的BigDecimal对象d1和d2，对于BigDecimal类，equals会比较对象的值和精度，因为两者精度不同，所以d1.equals(d2)返回false，而compareTo仅仅比较值的大小，d1和d2的大小都是0，所以d1.compareTo(d2)返回0。</p>
<p>按照如下compareTo和equals方法实现就比较合理了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person person)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.name.equals(person.name))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.age - person.age;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name.compareTo(person.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"> </span><br><span class="line">        Person person = (Person) o;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (name != <span class="keyword">null</span> ? !name.equals(person.name) : person.name != <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> age != <span class="keyword">null</span> ? age.equals(person.age) : person.age == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + (age != <span class="keyword">null</span> ? age.hashCode() : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 测试类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.SortedSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * Created by leboop on 2020/5/23.</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;zs&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;zs&quot;</span>,<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;ls&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p4=<span class="keyword">new</span> Person(<span class="string">&quot;zs&quot;</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        SortedSet&lt;Person&gt; sortedSet=<span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sortedSet.add(p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sortedSet.add(p2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sortedSet.add(p3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sortedSet.add(p4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Person p:sortedSet)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(p);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 输出结果：</p>
<p>Person{name=’ls’, age=20}<br>Person{name=’zs’, age=20}<br>Person{name=’zs’, age=30}</p>
<p>符合预期。</p>
<h3 id="Comparable小结"><a href="#Comparable小结" class="headerlink" title="Comparable小结"></a>Comparable<T>小结</h3><p>（1）可以将Comparable<T>接口看成拥有一种可以给实现类某种“序”的神力，谁实现类该接口就具备了一种“序”，而每个实现类可以拥有不同的“序”；</p>
<p>（2）compareTo方法实现时需要与equals方法保持一致，如果不一致必须写明。</p>
<h3 id="Comparator接口"><a href="#Comparator接口" class="headerlink" title="Comparator接口"></a>Comparator<T>接口</h3><p>​    Comparator接口的源码去掉注释后，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> java.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.ToIntFunction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.ToLongFunction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.function.ToDoubleFunction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparators;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Comparator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(T o1, T o2)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">reversed</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Collections.reverseOrder(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">thenComparing</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; other)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Objects.requireNonNull(other);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable) (c1, c2) -&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> res = compare(c1, c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (res != <span class="number">0</span>) ? res : other.compare(c1, c2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;U&gt; <span class="function">Comparator&lt;T&gt; <span class="title">thenComparing</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; keyExtractor,</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            Comparator&lt;? <span class="keyword">super</span> U&gt; keyComparator)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparing(keyExtractor, keyComparator));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> &lt;U extends Comparable&lt;? <span class="keyword">super</span> U&gt;&gt; <span class="function">Comparator&lt;T&gt; <span class="title">thenComparing</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function"></span></span></span><br><span class="line"><span class="params"><span class="function">            Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; keyExtractor)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparing(keyExtractor));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">thenComparingInt</span><span class="params">(ToIntFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparingInt(keyExtractor));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">thenComparingLong</span><span class="params">(ToLongFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> thenComparing(comparingLong(keyExtractor));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Comparator&lt;T&gt; <span class="title">thenComparingDouble</span><span class="params">(ToDoubleFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">	 <span class="keyword">return</span> thenComparing(comparingDouble(keyExtractor));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">Comparator&lt;T&gt; <span class="title">reverseOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.reverseOrder();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Comparable&lt;? <span class="keyword">super</span> T&gt;&gt; <span class="function">Comparator&lt;T&gt; <span class="title">naturalOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt;) Comparators.NaturalOrderComparator.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Comparator&lt;T&gt; <span class="title">nullsFirst</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Comparators.NullComparator&lt;&gt;(<span class="keyword">true</span>, comparator);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Comparator&lt;T&gt; <span class="title">nullsLast</span><span class="params">(Comparator&lt;? <span class="keyword">super</span> T&gt; comparator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Comparators.NullComparator&lt;&gt;(<span class="keyword">false</span>, comparator);</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U&gt; <span class="function">Comparator&lt;T&gt; <span class="title">comparing</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; keyExtractor,</span></span></span><br><span class="line"><span class="params"><span class="function">            Comparator&lt;? <span class="keyword">super</span> U&gt; keyComparator)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        Objects.requireNonNull(keyComparator);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; keyComparator.compare(keyExtractor.apply(c1),                                           keyExtractor.apply(c2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T, U extends Comparable&lt;? <span class="keyword">super</span> U&gt;&gt; <span class="function">Comparator&lt;T&gt; <span class="title">comparing</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">            Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; keyExtractor)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; keyExtractor.apply(c1).compareTo(keyExtractor.apply(c2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Comparator&lt;T&gt; <span class="title">comparingInt</span><span class="params">(ToIntFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Integer.compare(keyExtractor.applyAsInt(c1), keyExtractor.applyAsInt(c2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Comparator&lt;T&gt; <span class="title">comparingLong</span><span class="params">(ToLongFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Long.compare(keyExtractor.applyAsLong(c1), keyExtractor.applyAsLong(c2));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>&lt;T&gt; Comparator&lt;T&gt; <span class="title">comparingDouble</span><span class="params">(ToDoubleFunction&lt;? <span class="keyword">super</span> T&gt; keyExtractor)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(keyExtractor);</span><br><span class="line">        <span class="keyword">return</span> (Comparator&lt;T&gt; &amp; Serializable)</span><br><span class="line">            (c1, c2) -&gt; Double.compare(keyExtractor.applyAsDouble(c1), keyExtractor.applyAsDouble(c2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从上面源码可以看到</p>
<p>（1）Comparator<T>也是一个泛型接口，T是泛型；</p>
<p>（2）接口内部包含很多方法，我们只关注int compare(T o1, T o2)方法。</p>
<p>（3）compare方法中的两个参数有一个是null值都会抛出空指针异常；</p>
<p>现在如果也想实现Person类可以按照age可以排序，Person类就不需要直接实现Comparator接口了，做法是单独为Person类提供一个比较器，这个比较器需要实现Comparator接口，具体如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line"></span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单独定义一个Person类的降序比较器，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DesComparator</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Person</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Person o1, Person o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o2.getAge()-o1.getAge();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试类如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main.compare;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompareTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p1=<span class="keyword">new</span> Person(<span class="string">&quot;zhangsan&quot;</span>,<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p2=<span class="keyword">new</span> Person(<span class="string">&quot;lisi&quot;</span>,<span class="number">29</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p3=<span class="keyword">new</span> Person(<span class="string">&quot;wangwu&quot;</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Person p4=<span class="keyword">new</span> Person(<span class="string">&quot;mazi&quot;</span>,<span class="number">34</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; personList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        personList.add(p1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        personList.add(p2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        personList.add(p3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        personList.add(p4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序前：&quot;</span>+personList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Collections.sort(personList,<span class="keyword">new</span> DesComparator());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span>+personList);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">排序前：[Person&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">10</span>&#125;, Person&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">29</span>&#125;, Person&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">25</span>&#125;, Person&#123;name=<span class="string">&#x27;mazi&#x27;</span>, age=<span class="number">34</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">排序后：[Person&#123;name=<span class="string">&#x27;mazi&#x27;</span>, age=<span class="number">34</span>&#125;, Person&#123;name=<span class="string">&#x27;lisi&#x27;</span>, age=<span class="number">29</span>&#125;, Person&#123;name=<span class="string">&#x27;wangwu&#x27;</span>, age=<span class="number">25</span>&#125;, Person&#123;name=<span class="string">&#x27;zhangsan&#x27;</span>, age=<span class="number">10</span>&#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Process finished with exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>对Comparator的compare方法实现有如下几点要求：</p>
<p>（1）保证sgn(compare(x, y)) 和 -sgn(compare(y, x))相等，compare(x, y)抛出异常当且仅当compare(y, x)也抛出异常；</p>
<p>（2）保证关系传递性，也就是compare(x, y)&gt;0，并且compare(y, z)&gt;0，则compare(x, z)&gt;0；</p>
<p>（3）如果compare(x, y)==0，则sgn(compare(x, z))==sgn(compare(y, z))；</p>
<p>（4）一般推荐实现时，和equals方法相关联，保证compare(x, y)==0 和x.equals(y)要么同时返回false，要么同时返回true</p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="Comparator小结"><a href="#Comparator小结" class="headerlink" title="Comparator小结"></a>Comparator小结</h3><p>（1）Comparator可以看成一个比较器接口，它不能赋予给像Person这样的类比较能力，只能创建一个比较器类，而Person类可以使用这个比较器；</p>
<h3 id="Comparable和Comparator比较"><a href="#Comparable和Comparator比较" class="headerlink" title="Comparable和Comparator比较"></a>Comparable和Comparator比较</h3><p>（1）Comparable接口可以直接赋予实现类一种“序”的能力，而Comparator不能直接赋予这种能力，它通过创建一个“序”给Person用，打个比方，将Comparable和Comparator看成是具备法力的两位神仙，Comparable可以直接给你一种“序”的能力，此时你直接拥有了“序”的能力，而Comparator不能直接给你这种“序”的能力，但是它可以变出一个“序”的法力棒，你去使用法力棒来实现“序”的能力，当法力棒丢失了，你也就没有“序”的能力了；</p>
<p>（2）Comparable的compareTo方法和Comparator的compare方法实现原则基本相同；</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的equals和hashCode方法详解</title>
    <url>/2020/11/16/Java%E4%B8%AD%E7%9A%84equals%E5%92%8ChashCode%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Java中的equals和hashCode方法详解"><a href="#Java中的equals和hashCode方法详解" class="headerlink" title="Java中的equals和hashCode方法详解"></a>Java中的equals和hashCode方法详解</h1><p>本文主要有以下几点来分析：</p>
<ol>
<li><strong>hashCode使用中产生的问题</strong></li>
<li><strong>equals/hashcode的渊源</strong></li>
<li><strong>产生问题的原因</strong></li>
<li><strong>正确的使用姿势</strong></li>
</ol>
<h3 id="hashCode使用中产生的问题"><a href="#hashCode使用中产生的问题" class="headerlink" title="hashCode使用中产生的问题"></a>hashCode使用中产生的问题</h3><p>注：HashSet是一个无序、不可重复的集合，我们做一个小测试运行如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HashEqualsDemo &#123;</span><br><span class="line"></span><br><span class="line">    static class Person &#123;</span><br><span class="line">        private String age;</span><br><span class="line"></span><br><span class="line">        Person(String age) &#123;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;Person&#123;&quot; + &quot;age=&#x27;&quot; + age + &#x27;\&#x27;&#x27; + &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet set1 = new HashSet();</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">        for (Object a : set1) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet set2 = new HashSet();</span><br><span class="line">        Person p1 = new Person(&quot;1&quot;);</span><br><span class="line">        Person p2 = new Person(&quot;1&quot;);</span><br><span class="line">        set2.add(p1);</span><br><span class="line">        set2.add(p2);</span><br><span class="line"></span><br><span class="line">        for (Object a : set2) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">12345678910111213141516171819202122232425262728293031323334353637</span><br></pre></td></tr></table></figure>

<p>由于HashSet是不可重复的集合，所以输出的结果中set1和set2中都应该只有一个元素，那么执行结果是什么呢？如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Person&#123;age=&#x27;1&#x27;&#125;</span><br><span class="line">Person&#123;age=&#x27;1&#x27;&#125;</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>好吧，又双叒叕和我想象的不一样，set1不重复，set2明显发生了重复现象，这是为什么呢？</p>
<blockquote>
<p>这是因为equals、hashCode使用不规范导致的，问题且放在这，我们先看看equals和hashCode的关系</p>
</blockquote>
<h3 id="equals-hashcode的渊源"><a href="#equals-hashcode的渊源" class="headerlink" title="equals/hashcode的渊源"></a>equals/hashcode的渊源</h3><p>同为Object类中的方法</p>
<blockquote>
<p>public boolean equals(Object obj)<br>public int hashCode()</p>
</blockquote>
<ul>
<li>equals(): 用来判断两个对象是否相同，再Object类中是通过判断对象间的内存地址来决定是否相同</li>
<li>hashCode(): 获取哈希码，也称为散列码，返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。</li>
</ul>
<p>由于同为Object类中的方法，所以基本上所有Java类都会继承这两个方法，所以通过阅读hashCode方法的注释发现了：</p>
<p><img src="https://raw.githubusercontent.com/zhengqilong/myImg/master/blogImg/equalsAndHashCode/20190617160647.png" alt="img"></p>
<p>概括为以下几点：</p>
<ol>
<li>该方法返回对象的哈希码，支持该方法是为哈希表提供一些优点，例如，HashMap 提供的哈希表。</li>
<li>同一个对象未发生改变时多次调用hashCode()返回值必须相同，</li>
<li>两个对象equals不相等，那么两对象的hashCode()返回必定不同（此处可用来提高哈希表性能）</li>
<li>两个对象的hashCode()返回值相同，两对象不一定相同，还需要通过equals()再次判断</li>
<li>当equals方法被重写时，通常有必要重写 hashCode 方法</li>
</ol>
<p>通过第1点其实可以看出，hashCode() 在散列表中才有用，在其它情况下没用。在散列表中hashCode() 的作用是获取对象的散列码，进而确定该对象在散列表中的位置，当对象不会用来创建像hashMap、hashSet等散列表时，hashCode()实际上用不上。</p>
<h3 id="产生问题的原因"><a href="#产生问题的原因" class="headerlink" title="产生问题的原因"></a>产生问题的原因</h3><p>了解了两者的关系，我们在回过头来看看产生问题的原因</p>
<p>分析原因前需要了解哈希表的底层实现，hashCode在哈希表中充当的作用：</p>
<p>举一个栗子说明下：</p>
<ul>
<li>假设内存中有0 1 2 3 4 5 6 7 8这8个位置，如果我有个字段叫做ID，那么我要把这个字段存放在以上8个位置之一，如果不用HashCode而任意存放，那么当查找时就需要到8个位置中去挨个查找</li>
<li>使用HashCode则效率会快很多，把ID的HashCode%8，然后把ID存放在取得余数的那个位置，然后每次查找该类的时候都可以通过ID的HashCode%8求余数直接找到存放的位置了</li>
<li>如果ID的HashCode%8算出来的位置上本身已经有数据了怎么办？这就取决于算法的实现了，比如ThreadLocal中的做法就是从算出来的位置向后查找第一个为空的位置，放置数据；HashMap的做法就是通过链式结构连起来。反正，只要保证放的时候和取的时候的算法一致就行了。</li>
<li>如果ID的HashCode%8相等怎么办（这种对应的是第三点说的链式结构的场景）？这时候就需要定义equals了。先通过HashCode%8来判断类在哪一个位置，再通过equals来在这个位置上寻找需要的类。对比两个类的时候也差不多，先通过HashCode比较，假如HashCode相等再判断equals。如果两个类的HashCode都不相同，那么这两个类必定是不同的。</li>
</ul>
<p>其实在HashSet就是采用的这种存储和获取方式，通过HashCode和equals组合的方式来保证集合无重复。也说明了HashCode()在散列表中是发挥作用的</p>
<p>ok，我们分析下最开始的代码，找一下输出结果重复的原因（代码片段）：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">        HashSet set1 = new HashSet();</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        HashSet set2 = new HashSet();</span><br><span class="line">        Person p1 = new Person(&quot;1&quot;);</span><br><span class="line">        Person p2 = new Person(&quot;1&quot;);</span><br><span class="line">        set2.add(p1);</span><br><span class="line">        set2.add(p2);</span><br><span class="line">12345678910</span><br></pre></td></tr></table></figure>

<p>**set1.add(“1”);**：set1集合为空，找到hashCode对应在哈希表中的存储区，直接存入字符串1</p>
<p>**set1.add(“1”);**：首先判断该字符串1的hashCode值对应哈希表中所在的存储区域是否有相同的hashCode，此处调用<code>String类中的hashCode()</code>，显然两次返回了相同的hashCode，接着进行equals()方法的比较，此处调用<code>String类中的equals()</code>,由于两个字符串指向的常量池中的同一个字符串1，所以两个String对象相同，字符串1重复，不进行存储。</p>
<p>**set2.add(p1);**：set2集合为空，找到对象p1的hashCode对应在哈希表中的存储区，直接存入对象p1</p>
<p>**set2.add(p2);**：首先判断该对象p2的hashCode值对应哈希表中所在的存储区域是否有相同的hashCode，Person中未重写hashCode()此处调用<code>Object类中的hashCode()</code>，所以jdk使用默认Object的hashCode方法，返回内存地址转换后的整数，因为p1、p2为不同对象，地址值不同，所以这里不存在与p2相同hashCode值的对象，直接存入对象p2</p>
<p>看到这里已经知道Set集合中出现重复的原因了。都是因为hashCode、equals的不规范使用。</p>
<h3 id="正确的使用姿势"><a href="#正确的使用姿势" class="headerlink" title="正确的使用姿势"></a>正确的使用姿势</h3><p>从Jdk源码的注释中可以看出，hashCode() 在散列表中才会发挥作用，当对象无需创建像HashMap、HashSet等集合时，可以不用重写hashCode方法，但是如果有使用到对象的哈希集合等操作时，必须重写hashCode()和equals()。</p>
<p>修改最初的代码如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class HashEqualsDemo &#123;</span><br><span class="line"></span><br><span class="line">    static class Person &#123;</span><br><span class="line">        private String age;</span><br><span class="line"></span><br><span class="line">        Person(String age) &#123;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //重写equals()</span><br><span class="line">        @Override</span><br><span class="line">        public boolean equals(Object obj) &#123;</span><br><span class="line">            if (obj == null || !(obj instanceof Person)) &#123;</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            //地址相同必相等</span><br><span class="line">            if (obj == this) &#123;</span><br><span class="line">                return true;</span><br><span class="line">            &#125;</span><br><span class="line">            Person person = (Person) obj;</span><br><span class="line">            //地址不同比较值是否相同</span><br><span class="line">            return person.age.equals(this.age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        //重写hashCode()</span><br><span class="line">        @Override</span><br><span class="line">        public int hashCode() &#123;</span><br><span class="line">            return Objects.hash(age);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        @Override</span><br><span class="line">        public String toString() &#123;</span><br><span class="line">            return &quot;Person&#123;&quot; + &quot;age=&#x27;&quot; + age + &#x27;\&#x27;&#x27; + &#x27;&#125;&#x27;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet set1 = new HashSet();</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line">        set1.add(&quot;1&quot;);</span><br><span class="line"></span><br><span class="line">        for (Object a : set1) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HashSet set2 = new HashSet();</span><br><span class="line">        Person p1 = new Person(&quot;1&quot;);</span><br><span class="line">        Person p2 = new Person(&quot;1&quot;);</span><br><span class="line">        set2.add(p1);</span><br><span class="line">        set2.add(p2);</span><br><span class="line"></span><br><span class="line">        for (Object a : set2) &#123;</span><br><span class="line">            System.out.println(a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859</span><br></pre></td></tr></table></figure>

<p>重写了equals和hashCode方法之后，执行结果就恢复正常了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">Person&#123;age=&#x27;1&#x27;&#125;</span><br><span class="line">12</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>hashCode主要用于提升查询效率提高哈希表性能，来确定在散列结构中对象的存储地址</li>
<li>重写equals()必须重写hashCode()</li>
<li>哈希存储结构中，添加元素重复性校验的标准就是先检查hashCode值，后判断equals()</li>
<li>两个对象equals()相等，hashcode()必定相等</li>
<li>两个对象hashcode()不等，equals()必定也不等</li>
<li>两个对象hashcode()相等，对象不一定相等，需要通过equals()进一步判断。</li>
</ul>
<h3 id="参考和感谢"><a href="#参考和感谢" class="headerlink" title="参考和感谢"></a>参考和感谢</h3><p>哈希存储结构中添加元素的逻辑：<a href="https://blog.csdn.net/lijiecao0226/article/details/24609559">https://blog.csdn.net/lijiecao0226/article/details/24609559</a><br>hashcode详解：<a href="https://www.cnblogs.com/whgk/p/6071617.html">https://www.cnblogs.com/whgk/p/6071617.html</a></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA考点解析</title>
    <url>/2021/01/03/JAVA%E8%80%83%E7%82%B9%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="java考点解析"><a href="#java考点解析" class="headerlink" title="java考点解析"></a>java考点解析</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.字符串</span><br><span class="line"></span><br><span class="line">	1.tostring</span><br><span class="line">	 	getClass().getName() + &#x27;@&#x27; + Integer.toHexString(hashCode())</span><br><span class="line">		Integer.toHexString(hashCode())代表将对象的哈希值用16进制表示</span><br><span class="line">	2.关于String</span><br><span class="line">        	1.是一种内容不可辨别的对象</span><br><span class="line">        	2.直接可以用“。。。”    可变类型</span><br><span class="line">        一.判等</span><br><span class="line">        	“==”除非两个引用变量引用了同一个对象，返回ture,否则false.</span><br><span class="line">        	 &quot;equals&quot;只判断字符串内容是否一样，一样ture，否则false.</span><br><span class="line">        ①包含功能：contains(substring);</span><br><span class="line">                  indexof(substring);</span><br><span class="line">                  lastIndexof(substring);</span><br><span class="line">                  Startswith(substring);</span><br><span class="line">                  endsWith(substring);</span><br><span class="line">        ②调整功能：</span><br><span class="line">       		trim将字符串中的首尾空白字符去掉</span><br><span class="line">        ③取字符</span><br><span class="line">            	subString</span><br><span class="line">        ④转换大小写</span><br><span class="line">           	 toUppercase:跳大写</span><br><span class="line">            	 toLowercase:跳小写</span><br><span class="line">        ⑤将串中的字符转换为字符数组</span><br><span class="line">           	 toCharArray</span><br><span class="line">           其他：split.replace.String s=valueOf(123);</span><br><span class="line">           因为串不可变，如果涉及到的程序需要频繁更新，那种用Stringc操作的方式不是最好方案</span><br><span class="line">  	二.StringBulider不涉及到线程安全/StringBuffer多线程安全的</span><br><span class="line">    		在内存中开辟一块缓存区，用于存放字符串信息可以随时调整</span><br><span class="line">2.数组	</span><br><span class="line">	1.Java中按照不同存储方式不同，可以将数据分为两种</span><br><span class="line">       		a.值类型： 存放数据的信息只需要块内存即可。</span><br><span class="line">       		b.引用类型（对象）：需要两块内存来配合</span><br><span class="line">            在栈上，存放该对象的引用变量</span><br><span class="line">            在堆上，存放该数值的引用变量，堆上才是该对象的实际数据</span><br><span class="line">	2.type [] arr 推荐定义数组方式</span><br><span class="line">		    二维数组定义方式</span><br><span class="line">		    type arr[][]=静态初始化的列表</span><br><span class="line">			例：int arr[][]=&#123;&#123;1,2,3,4,&#125;,&#123;5,6,7,8&#125;,&#123;9,10,11,12&#125;,&#123;1,2&#125;&#125;</span><br><span class="line">	3.foreach 增强循环</span><br><span class="line">		for(type  a:arr)</span><br><span class="line">     		&#123;</span><br><span class="line">            		将arr中每个元素，依次赋值给a,通过a来读取该数组的每个元素</span><br><span class="line">    	 	&#125;</span><br><span class="line"></span><br><span class="line">3.异常处理</span><br><span class="line">	  系统定义一个throwable类，该类用于派生各种出错</span><br><span class="line">      该类有两个子类</span><br><span class="line">      1.Error，是错误类，用户没办法处理的出错。</span><br><span class="line">      用户也不用做任何处理. 例如递归调用的栈溢出错误，则需要程序员去规避</span><br><span class="line">      2.Exception异常</span><br><span class="line">        a.非受检异常</span><br><span class="line">         程序员在编程时，可以选择处理或不处理</span><br><span class="line">         如果用户不处理，该异常发生时，JVM就会直接终止程序</span><br><span class="line">        -NullPointerException:空引用异常</span><br><span class="line"> 	b.受检异常,程序员必须处理</span><br><span class="line">        -IOException;输入输出读写异常</span><br><span class="line">        -FileNotFoundException:文件未找到异常</span><br><span class="line">        -SQLException ;数据库操作异常</span><br><span class="line">	 如果程序员想要处理异常，则需要用如下的语句来：</span><br><span class="line">        try&#123;</span><br><span class="line">            A;</span><br><span class="line">        &#125;</span><br><span class="line">        catch(XXXException xe)</span><br><span class="line">        &#123;</span><br><span class="line">            B1;</span><br><span class="line">        &#125;</span><br><span class="line">         catch(YYYException ye)</span><br><span class="line">        &#123;</span><br><span class="line">            B2;</span><br><span class="line">        &#125;</span><br><span class="line">         catch(ZZZException ze)</span><br><span class="line">        &#123;</span><br><span class="line">            B3;</span><br><span class="line">        &#125;</span><br><span class="line">        finally</span><br><span class="line">        &#123;</span><br><span class="line">            C;</span><br><span class="line">        &#125;</span><br><span class="line">	1,上面的语句执行过程是：</span><br><span class="line">        依次执行A.如果有一异常，跳转匹配catch分支，匹配成功则执行Bi分支，完成后执行final</span><br><span class="line">        2.XXXException,YYYException,ZZZException</span><br><span class="line">        异常必须是从细到粗的顺序（子类到父类）</span><br><span class="line">        3.异常处理的原则：</span><br><span class="line">            ①：谁调用，谁处理</span><br><span class="line">            ②：try .....catch....finally立刻去处理</span><br><span class="line">            ③：用throw或者throws向上抛</span><br><span class="line">                throw是在需要抛出异常时直接抛出</span><br><span class="line">                throws是在函数的头部声明，该函数会抛出某种异常对象。</span><br><span class="line"></span><br><span class="line">4.继承中同名函数解决方法</span><br><span class="line">      （1.子类继承父类，实现接口，父类和接口有同名方法</span><br><span class="line">	  子类直接继承父类和实现接口不实现接口方法不报错，说明这种情况下默认父类实现该方法）</span><br><span class="line"></span><br><span class="line">	2.一个类实现多个接口，而多个接口中出现同名方法（需要看同名方法的返回值是否相同）</span><br><span class="line">		1.如果该同名方法的返回值也一样，即同名方法的方法名、参数名、参数个数、返回值都一样，那么该类只需要实现其中一个方法就可以了。</span><br><span class="line">		2.如果多个接口有同名方法，但是它们的返回值不一样，那么需要分别实现返回值不同的同名方法。如果只实现一个是无法编译的。</span><br><span class="line">	3. 创建一个内部类</span><br><span class="line"></span><br><span class="line">5.static关键字</span><br><span class="line">	stactic是Java类的重要关键字；</span><br><span class="line">	1.static是类的成员，由该类的所有对象共享，在系统中只有一个数据</span><br><span class="line">	2.static的访问可见性问题</span><br><span class="line">   	 非静态的成员声明周期只从new开始，到系统自动回收，静态的成员声明和程序共生死</span><br><span class="line">   	 静态的方法可以访问非静态的成员？不可以 该非静态的对象可能还没有相应的对象产生</span><br><span class="line">   	 非静态的方法可以访问静态成员？可以   （非静态）对象方法静态数据已存在</span><br><span class="line"></span><br><span class="line">6.集合类</span><br><span class="line">	set也是继承自collection的另一个接口</span><br><span class="line">        	1.无序</span><br><span class="line">        	2.不能存放重复的元素</span><br><span class="line">     			要在set集合中，对每个元素做到恰当处理</span><br><span class="line">     			1.集合中对象的元素显示，需要重载对象类中toString方法</span><br><span class="line">     			使用sout打印集合时，系统会调用对象的Tosting进行显示</span><br><span class="line">     			系统自带的tostring的返回信息如下</span><br><span class="line">       			public String toString() &#123;</span><br><span class="line">        			return this.getClass().getName() + &quot;@&quot; + Integer.toHexString(this.hashCode());</span><br><span class="line">    			&#125;</span><br><span class="line">    			2.equal()用于比较两个对象是否相等，系统提供的方法</span><br><span class="line">        		遵守5条规律：</span><br><span class="line">            		  a.自反律</span><br><span class="line">           		  b.对称律</span><br><span class="line">            		  c.传递律</span><br><span class="line">           		  d.一致性</span><br><span class="line">            		  e.非空对象和NULL比较返回false</span><br><span class="line">7.实现集合元素的比较相关</span><br><span class="line">    	在set中，如何判断某个对象是否具有相同的hashcode</span><br><span class="line">   		 1.是否具有hashcode</span><br><span class="line">        	 2.否则调用equal()判断重复</span><br><span class="line">	需要定义排序方式</span><br><span class="line">        2种方式</span><br><span class="line">        1.继承comparator类</span><br><span class="line">            可以定制多个排序标准</span><br><span class="line">        2.实现Comparable接口</span><br><span class="line">            只有一个排序标准</span><br><span class="line">8.逆波兰运算</span><br><span class="line">	1.逆波兰式（Reverse Polish notation，RPN，或逆波兰记法），也叫后缀表达式（将运算符写在操作数之后）</span><br><span class="line">	2.基础支持 出栈入栈+操作符</span><br><span class="line"></span><br><span class="line">9.输入输出流</span><br><span class="line">	/**</span><br><span class="line">	 * 缓冲字节输入流</span><br><span class="line">	 * BufferedInputStream</span><br><span class="line">	 * @throws Exception </span><br><span class="line">	 */</span><br><span class="line">	public static void testBufferedInputStream() throws Exception&#123;</span><br><span class="line">		//文件字节输入流对象</span><br><span class="line">		FileInputStream in = new FileInputStream(&quot;D:\\testdemo\\demo\\src\\day13\\tt.txt&quot;);</span><br><span class="line">		</span><br><span class="line">		//把文件字节输入流放到缓冲字节输入流对象</span><br><span class="line">		BufferedInputStream br = new BufferedInputStream(in);</span><br><span class="line">		</span><br><span class="line">		byte[] b = new byte[10];</span><br><span class="line">		</span><br><span class="line">		int len = 0;</span><br><span class="line">		</span><br><span class="line">		while((len = br.read(b)) != -1)&#123;</span><br><span class="line">			System.out.println(new String(b,0,len));</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		//关闭流的时候，本着一个最晚开的最早关，依次关</span><br><span class="line">		br.close();</span><br><span class="line">		in.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 缓冲字节输出流</span><br><span class="line">	 * BufferedOutputStream</span><br><span class="line">	 */</span><br><span class="line">	public static void testBufferedOutputStream() throws Exception&#123;</span><br><span class="line">		//创建字节输出流对象</span><br><span class="line">		FileOutputStream out = new FileOutputStream(&quot;D:\\testdemo\\demo\\src\\day13\\tt1.txt&quot;);</span><br><span class="line">		</span><br><span class="line">		//把字节输出流对象放到缓冲字节输出流中</span><br><span class="line">		BufferedOutputStream bo = new BufferedOutputStream(out);</span><br><span class="line">		</span><br><span class="line">		String s = &quot;hello world&quot;;</span><br><span class="line">		</span><br><span class="line">		bo.write(s.getBytes());//写到内存中</span><br><span class="line">		</span><br><span class="line">		bo.flush();//刷到硬盘上</span><br><span class="line">		</span><br><span class="line">		//关闭流的时候，本着一个最晚开的最早关，依次关</span><br><span class="line">		bo.close();</span><br><span class="line">		out.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">10.socket编程</span><br><span class="line">	1.套接字（socket）是“open—write/read—close”模式的一种实现</span><br><span class="line">	2. Socket socket = new Socket(&quot;127.0.0.1&quot;, 5000);</span><br><span class="line"></span><br><span class="line">        new ClientInputThread(socket).start();</span><br><span class="line">        new ClientOutputThread(socket).start();</span><br><span class="line"></span><br><span class="line">11.object类</span><br><span class="line">1. clone()</span><br><span class="line"></span><br><span class="line">保护方法，实现对象的浅复制，只有实现了Cloneable接口才可以调用该方法，否则抛出CloneNotSupportedException异常。</span><br><span class="line"></span><br><span class="line">2. getClass()</span><br><span class="line"></span><br><span class="line">final方法，返回Class类型的对象，反射来获取对象。</span><br><span class="line"></span><br><span class="line">3. toString()</span><br><span class="line"></span><br><span class="line">该方法用得比较多，一般子类都有覆盖，来获取对象的信息。</span><br><span class="line"></span><br><span class="line">4. finalize()</span><br><span class="line"></span><br><span class="line">该方法用于释放资源。因为无法确定该方法什么时候被调用，很少使用。</span><br><span class="line"></span><br><span class="line">5. equals()</span><br><span class="line"></span><br><span class="line">比较对象的内容是否相等</span><br><span class="line"></span><br><span class="line">6. hashCode()</span><br><span class="line"></span><br><span class="line">该方法用于哈希查找，重写了equals方法一般都要重写hashCode方法。这个方法在一些具有哈希功能的Collection中用到。</span><br><span class="line"></span><br><span class="line">7. wait()</span><br><span class="line"></span><br><span class="line">wait方法就是使当前线程等待该对象的锁，当前线程必须是该对象的拥有者，也就是具有该对象的锁。wait()方法一直等待，直到获得锁或者被中断。wait(long timeout)设定一个超时间隔，如果在规定时间内没有获得锁就返回。</span><br><span class="line"></span><br><span class="line">调用该方法后当前线程进入睡眠状态，直到以下事件发生。</span><br><span class="line"></span><br><span class="line">其他线程调用了该对象的notify方法。</span><br><span class="line">其他线程调用了该对象的notifyAll方法。</span><br><span class="line">其他线程调用了interrupt中断该线程。</span><br><span class="line">时间间隔到了。</span><br><span class="line">此时该线程就可以被调度了，如果是被中断的话就抛出一个InterruptedException异常。</span><br><span class="line"></span><br><span class="line">8. notify()</span><br><span class="line"></span><br><span class="line">该方法唤醒在该对象上等待的某个线程。</span><br><span class="line"></span><br><span class="line">9. notifyAll()</span><br><span class="line"></span><br><span class="line">该方法唤醒在该对象上等待的所有线程。</span><br><span class="line">	</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>考点</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Socket实现上传下载</title>
    <url>/2021/04/07/Socket%E5%AE%9E%E7%8E%B0%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Socket实现上传下载"><a href="#Socket实现上传下载" class="headerlink" title="Socket实现上传下载"></a>Socket实现上传下载</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedInputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.DataOutputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line">        <span class="keyword">import</span> java.io.IOException;</span><br><span class="line">        <span class="keyword">import</span> java.io.InputStream;</span><br><span class="line">        <span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line">        <span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="comment">//服务端server</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">upload</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================服务端server==============&quot;</span>);</span><br><span class="line">        ServerSocket ss = <span class="keyword">new</span> ServerSocket(<span class="number">8888</span>);</span><br><span class="line">        Socket socket = ss.accept();</span><br><span class="line">        <span class="comment">//读取客户端发送的数据</span></span><br><span class="line">        BufferedInputStream buf = <span class="keyword">new</span> BufferedInputStream(socket.getInputStream());</span><br><span class="line">        <span class="comment">//将客户端发送的数据读取到本地</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;E:\\q1.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//边读边写</span></span><br><span class="line">        <span class="keyword">while</span> ((len = buf.read(b)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bos.write(b,<span class="number">0</span>,len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;写出完毕&quot;</span>);</span><br><span class="line">        <span class="comment">//发送消息到客户端</span></span><br><span class="line">        DataOutputStream dos = <span class="keyword">new</span> DataOutputStream(socket.getOutputStream());</span><br><span class="line">        dos.writeUTF(<span class="string">&quot;上传成功&quot;</span>);</span><br><span class="line">        dos.flush();</span><br><span class="line">        dos.close();</span><br><span class="line">        bos.close();</span><br><span class="line">        buf.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">download</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;================客户端Client==============&quot;</span>);</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">8888</span>);</span><br><span class="line">        <span class="comment">//获取读取文件的输入流</span></span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;E:\\q.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//输出信息到服务端的输出流</span></span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(socket.getOutputStream());</span><br><span class="line">        <span class="keyword">byte</span> [] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//边读边写</span></span><br><span class="line">        <span class="keyword">while</span>((len=bis.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            bos.write(b, <span class="number">0</span>, len);</span><br><span class="line">            bos.flush();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在不关闭socket的条件下关闭输出流</span></span><br><span class="line">        socket.shutdownOutput();</span><br><span class="line">        <span class="comment">//获取服务端反馈消息的输入流</span></span><br><span class="line">        DataInputStream dis = <span class="keyword">new</span> DataInputStream(socket.getInputStream());</span><br><span class="line">        String mess = dis.readUTF();</span><br><span class="line">        System.out.println(mess);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>socket连接实现文件复制</p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>To the Eventual &quot;FadeAway&quot;</title>
    <url>/2021/03/02/To%20the%20Eventual%20FadeAway/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="To-the-Eventual-“FadeAway”"><a href="#To-the-Eventual-“FadeAway”" class="headerlink" title="To the Eventual “FadeAway”"></a>To the Eventual “FadeAway”</h1><p>​         <strong>关系变淡，久无音讯就会逐渐淡出彼此的生活，不再麻烦感情就没办法升温，三观不合终将渐行渐远。原来很多时候，我们只能和朋友分享青春，却不能结伴成长，有些人，走着走着就散了，无论是曾经多么要好、无话不谈的朋友，都不可避免地要走向分别。</strong></p>
<p><strong>我们的一生会遇到8263563人，</strong></p>
<p><strong>会打招呼的是39778人，</strong></p>
<p><strong>会和3619人熟悉，</strong></p>
<p><strong>会和275人亲近，</strong></p>
<p><strong>但最终，都会消失在人海。</strong></p>
<p><strong>可是，人生就是一辆不断向前的列车，</strong></p>
<p><strong>有人与你聊得热火朝天，到站之后也要下车，</strong></p>
<p><strong>有人只站了几分钟就会离开，</strong></p>
<p><strong>有人坐过半程才抬头看了你一眼，</strong></p>
<p><strong>有人没挤上来就要等下一辆车。</strong></p>
<p><strong>渐行渐远渐无书，水阔鱼沉何处问？</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FadeAway :①消失殆尽②渐行渐远</span><br><span class="line"></span><br><span class="line">					 </span><br><span class="line">					           一切消失殆尽，</span><br><span class="line"></span><br><span class="line">                               你我渐行渐远。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">																									       To Previous Own</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>心情</tag>
      </tags>
  </entry>
  <entry>
    <title>try catch用法</title>
    <url>/2020/08/29/try%20catch%E7%94%A8%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="try-catch-用法"><a href="#try-catch-用法" class="headerlink" title="try catch 用法"></a>try catch 用法</h1><p>当程序运行过程中发生错误时，就会“ 抛出异常’，抛出异常比终止程序要灵活得多，这是因为可以提供一个“ 捕获” 异常的处理器 （handler) 对异常情况进行处理。</p>
<p>如果没有提供处理器，程序就会终止，并在控制台上打印出一条信息， 其中给出了异常的类型。可能在前面已经看到过一些异常报告， 例如， 偶然使用了 null 引用或者数组越界等。</p>
<p>异常有两种类型： <strong>未检查异常和已检查异常</strong>。 对于已检查异常， 编译器将会检查是否提供了处理器。 然而，有很多常见的异常， 例如，访问 null 引用， 都属于未检查异常。编译器不会査看是否为这些错误提供了处理器。毕竟，应该精心地编写代码来避免这些错误的发生， 而不要将精力花在编写异常处理器上。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>try 语句使你能够测试代码块中的错误。</p>
<p>catch 语句允许你处理错误。</p>
<p>throw 语句允许你创建自定义错误。（抛出错误）</p>
<p>finally 使你能够执行代码，在 try 和 catch 之后，无论结果如何。</p>
<p>执行规则：首先执行try中的代码 如果抛出异常会由catch去捕获并执行 如果没有发生异常 catch去捕获会被忽略掉 但是不管有没有异常最后都会执行</p>
<h1 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">		代码块；</span><br><span class="line">		代码  <span class="keyword">throw</span><span class="string">&quot;字符&quot;</span>   <span class="comment">//抛出错误</span></span><br><span class="line">	&#125;<span class="keyword">catch</span>(参数)&#123;				<span class="comment">//抓住throw抛出的错误</span></span><br><span class="line">			<span class="comment">//处理错误并执行</span></span><br><span class="line">	&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">			<span class="comment">//无论try catch结果如何还是继续执行</span></span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>两数相加</title>
    <url>/2020/11/02/%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h2 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * public class ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode next;</span></span><br><span class="line"><span class="comment"> *     ListNode() &#123;&#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val) &#123; this.val = val; &#125;</span></span><br><span class="line"><span class="comment"> *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">addTwoNumbers</span><span class="params">(ListNode l1, ListNode l2)</span> </span>&#123;</span><br><span class="line">        ListNode head = <span class="keyword">null</span>, tail = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> carry = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (l1 != <span class="keyword">null</span> || l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> n1 = l1 != <span class="keyword">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> n2 = l2 != <span class="keyword">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = n1 + n2 + carry;</span><br><span class="line">            <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">                head = tail = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                tail.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line">                tail = tail.next;</span><br><span class="line">            &#125;</span><br><span class="line">            carry = sum / <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (l1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                l1 = l1.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (l2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                l2 = l2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (carry &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            tail.next = <span class="keyword">new</span> ListNode(carry);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树基本操作</title>
    <url>/2020/06/29/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h1><h2 id="二叉树的建立"><a href="#二叉树的建立" class="headerlink" title="二叉树的建立"></a>二叉树的建立</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Node* <span class="title">CreateBTree</span><span class="params">(Node*&amp; T)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ch;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">if</span> (ch != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			T = (Node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Node));</span><br><span class="line">			T-&gt;data = ch;</span><br><span class="line">			<span class="built_in">CreateBTree</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">CreateBTree</span>(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			T = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">return</span> T;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="二叉树三种排序"><a href="#二叉树三种排序" class="headerlink" title="二叉树三种排序"></a>二叉树三种排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node* T)</span><span class="comment">//先序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">			<span class="built_in">PreOrder</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">PreOrder</span>(T-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Node* T)</span><span class="comment">//中序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>) <span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>) <span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node* T)</span><span class="comment">//后序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PostOrder</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">PostOrder</span>(T-&gt;rchild);</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二叉树结点及深度操作"><a href="#二叉树结点及深度操作" class="headerlink" title="二叉树结点及深度操作"></a>二叉树结点及深度操作</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Node* T)</span><span class="comment">//计算树的深度</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> depl, depr;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			depl = <span class="built_in">Depth</span>(T-&gt;lchild);</span><br><span class="line">			depr = <span class="built_in">Depth</span>(T-&gt;rchild);</span><br><span class="line">			<span class="keyword">if</span> (depl &gt;= depr)</span><br><span class="line">				<span class="keyword">return</span> depl + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> depr + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树结点个数 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Size</span>(T-&gt;lchild) + <span class="built_in">Size</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Size2</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树非叶子节点个数 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">Size2</span>(T-&gt;lchild) + <span class="built_in">Size2</span>(T-&gt;rchild) + <span class="number">1</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	Node* lchild, * rchild;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BTree</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function">Node* <span class="title">CreateBTree</span><span class="params">(Node*&amp; T)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> ch;</span><br><span class="line">		cin &gt;&gt; ch;</span><br><span class="line">		<span class="keyword">if</span> (ch != <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			T = (Node*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(Node));</span><br><span class="line">			T-&gt;data = ch;</span><br><span class="line">			<span class="built_in">CreateBTree</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">CreateBTree</span>(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			T = <span class="literal">NULL</span>;</span><br><span class="line">			<span class="keyword">return</span> T;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(Node* T)</span><span class="comment">//先序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">			<span class="built_in">PreOrder</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">PreOrder</span>(T-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(Node* T)</span><span class="comment">//中序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;lchild != <span class="literal">NULL</span>) <span class="built_in">InOrder</span>(T-&gt;lchild);</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;rchild != <span class="literal">NULL</span>) <span class="built_in">InOrder</span>(T-&gt;rchild);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(Node* T)</span><span class="comment">//后序遍历程序 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">PostOrder</span>(T-&gt;lchild);</span><br><span class="line">			<span class="built_in">PostOrder</span>(T-&gt;rchild);</span><br><span class="line">			cout &lt;&lt; T-&gt;data;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Depth</span><span class="params">(Node* T)</span><span class="comment">//计算树的深度</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">int</span> depl, depr;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			depl = <span class="built_in">Depth</span>(T-&gt;lchild);</span><br><span class="line">			depr = <span class="built_in">Depth</span>(T-&gt;rchild);</span><br><span class="line">			<span class="keyword">if</span> (depl &gt;= depr)</span><br><span class="line">				<span class="keyword">return</span> depl + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> depr + <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Size</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树结点个数 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span> + <span class="built_in">Size</span>(T-&gt;lchild) + <span class="built_in">Size</span>(T-&gt;rchild);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">Size2</span><span class="params">(Node* T)</span><span class="comment">//计算二叉树非叶子节点个数 </span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (T != <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (T-&gt;lchild == <span class="literal">NULL</span> &amp;&amp; T-&gt;rchild == <span class="literal">NULL</span>)</span><br><span class="line">				<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="keyword">return</span> <span class="built_in">Size2</span>(T-&gt;lchild) + <span class="built_in">Size2</span>(T-&gt;rchild) + <span class="number">1</span>;		</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node* S = <span class="literal">NULL</span>;<span class="comment">//实参</span></span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;输入二叉树链表中各个域的值(输入0表示NULL)\n&quot;</span>;</span><br><span class="line">	BTree tree;</span><br><span class="line">	tree.<span class="built_in">CreateBTree</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;建立的二叉树为：\n&quot;</span>;</span><br><span class="line">	tree.<span class="built_in">PreOrder</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 先序\n&quot;</span>;</span><br><span class="line">	tree.<span class="built_in">InOrder</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 中序\n&quot;</span>;</span><br><span class="line">	tree.<span class="built_in">PostOrder</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; 后序\n&quot;</span>;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n该二叉树深度为:\n&quot;</span> &lt;&lt;  tree.<span class="built_in">Depth</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n该二叉树结点个数:\n&quot;</span> &lt;&lt;  tree.<span class="built_in">Size</span>(S);</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot;\n该二叉树非叶子节点个数 :\n&quot;</span> &lt;&lt;  tree.<span class="built_in">Size2</span>(S);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>二叉树建立及基本特点，递归函数的使用方法</p>
<h1 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h1><p>​     了解二叉树的查找算法，丰富二叉树功能。下次呈现！！！</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>位示图计算</title>
    <url>/2021/06/01/%E4%BD%8D%E7%A4%BA%E5%9B%BE%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="位示图计算"><a href="#位示图计算" class="headerlink" title="位示图计算"></a>位示图计算</h1><p>1.题目：某文件管理系统在磁盘上建立了位示图(bitmap) ，记录磁盘的使用情况。若计算机系统的字长为 32 位，磁盘的容量为 300GB ，物理块的大小为4MB ，那么位示图的大小需要（ ）个字。<br>磁盘容量为300GB，物理块大小4MB，则磁盘共300<em>1024/4=75</em>1024个物理块</p>
<p>​            位示图用每1位表示1个磁盘块的使用情况，1个字是32位，所以1个字可以表示32块物理块使用情况，那么需要75*1024/32＝2400个字</p>
<p>2.用字长为16位的200个字组成位示图来指示磁盘使用情况（字号、位号、磁盘块编号均从0开始），请计算：</p>
<p>（1）文件系统发现位示图的第15字、第10位为0而准备将一记录写入，问写入的是哪一块？</p>
<p>（2）若将第500块磁盘的数据删除，则应该讲位示图的哪个字哪一位改为0？</p>
<p>解：</p>
<p>​    （1）b=16(15-1)+（10-9）= 233   块号=字号*字长+位号</p>
<p>​    （2）i = INT[499/16] = 31     j = [499]MOD 16= 4</p>
<p>​            字号=[块号/字长] （截断）</p>
<p>​            位号=块号mod字长</p>
<p>​       由于字号、位号、磁盘块编号均从0开始，应该将</p>
<p>​       第 30行，第3列对应的字改为 0</p>
<p>3.<img src="https://iknow-pic.cdn.bcebos.com/b21bb051f8198618ce18cb9649ed2e738bd4e641"></p>
<p>4.磁盘地址映射<br>柱面号、磁头号、扇区号<br>字号为m，位号为n，物理块号：m * 字长 + n<br>根据物理地址，求柱面号、磁头号、扇区号</p>
<p>柱面号 = 物理块号 / (磁头号 * 扇区号)</p>
<p>磁头号 = 物理块号 % (磁头号 * 扇区号) / 扇区号</p>
<p>扇区号 = 物理块号 % (磁头号 * 扇区号) % 扇区号</p>
<p>题目：某文件管理系统在磁盘上建立了位示图(bitmap) ，记录磁盘的使用情况。若计算机系统的字长为 32 位，磁盘的容量为 300GB ，物理块的大小为4MB ，那么位示图的大小需要（ ）个字。</p>
<p>磁盘容量为300GB，物理块大小4MB，则磁盘共<code>300*1024/4=75*1024</code>个物理块，位示图用每1位表示1个磁盘块的使用情况，1个字是32位，所以1个字可以表示32块物理块使用情况，那么需要75*1024/32＝2400个字</p>
<p>5.有一计算机系统利用位示图来管理磁盘文件空间。假定该磁盘组共有100个柱面，每个柱面有20个磁道，每个磁道分成8个盘块（扇区），每个盘块1KB，位示图如下图所示。1）试给出位示图中的位置(i, j)与对应盘块所在的物理位置（柱面号、磁头号、扇区号）之间的计算公式。假定柱面号、磁头号、扇区号都从0开始编号。2）试说明分配和回收一个盘块的过程。</p>
<p><img src="https://iknow-pic.cdn.bcebos.com/f2deb48f8c5494eea8160e1225f5e0fe99257e80"></p>
<pre><code>(1)根据位示图的位置（i,j），得出盘块的序号b=i*16+j;用C 表示柱面号，H 表示磁头号，S
</code></pre>
<p>表示扇区号，则有：<br>C=b/(20<em>8)<br>H=(b%(20</em>8))/8<br>S=(b%(20<em>8))%8<br>(2)分配：顺序扫描位示图，找出1 个其值为“0”的二进制位，利用上述公式将其转换成相应的序号b，并修改位示图，置（i,j）=1;<br>回收：将回收盘块的盘块号换算成位示图中的i 和j，转换公式为：<br>b=C</em>20<em>8+H</em>8+S<br>i=b/16,j=b%16<br>最后将计算出的（i,j）在位示图中置“0”</p>
]]></content>
      <categories>
        <category>计算机操作系统</category>
      </categories>
      <tags>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>入门测试</title>
    <url>/2021/05/13/%E5%85%A5%E9%97%A8%E6%B5%8B%E8%AF%95%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Excel文件（xls）解析JAVA"><a href="#Excel文件（xls）解析JAVA" class="headerlink" title="Excel文件（xls）解析JAVA"></a>Excel文件（xls）解析JAVA</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>提取表格中”岗位职责“一列的所有数据，以文本格式保存</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>①JAVA   ②jxl.jar包（一个java对excel文件编辑的基础工具包）</p>
<h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jxl.Cell;</span><br><span class="line"><span class="keyword">import</span> jxl.Sheet;</span><br><span class="line"><span class="keyword">import</span> jxl.Workbook;</span><br><span class="line"><span class="keyword">import</span> jxl.read.biff.BiffException;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">select_excel</span><span class="params">(File file)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FileWriter fWriter = <span class="keyword">null</span>;</span><br><span class="line">        PrintWriter out = <span class="keyword">null</span>;</span><br><span class="line">        String fliename = file.getName().replace(<span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        fWriter = <span class="keyword">new</span> FileWriter(file.getParent() + <span class="string">&quot;/&quot;</span> + fliename + <span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">        out = <span class="keyword">new</span> PrintWriter(fWriter);</span><br><span class="line">        InputStream is = <span class="keyword">new</span> FileInputStream(file.getAbsoluteFile());</span><br><span class="line">        Workbook wb = <span class="keyword">null</span>;</span><br><span class="line">        wb = Workbook.getWorkbook(is);</span><br><span class="line">        <span class="keyword">int</span> sheet_size = wb.getNumberOfSheets();</span><br><span class="line">        Sheet sheet = wb.getSheet(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; sheet.getRows(); j++) &#123;</span><br><span class="line">            String cellinfo = sheet.getCell(<span class="number">9</span>, j).getContents();<span class="comment">//岗位需求应该是在第10行，第二行是专业</span></span><br><span class="line">            out.println(cellinfo);</span><br><span class="line">        &#125;</span><br><span class="line">        out.close();</span><br><span class="line">        fWriter.close();</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            select_excel(<span class="keyword">new</span> File(<span class="string">&quot;E:\\original_info_copy1.xls&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/05/13/6XqJg9LHWRiZQjG.png" alt="QQ截图20210513202254.png"></p>
<p><img src="https://i.loli.net/2021/05/13/73ZkUa21DhmoEBF.png" alt="QQ截图20210513200913.png"></p>
<p><img src="https://i.loli.net/2021/05/13/RNj9Tdv13wUqFJ7.png" alt="QQ截图20210513201108.png">)</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​        通过JAVA的jxl实现对excel的操作</p>
<p>​        I/O流进行读取和选择输出</p>
<p>参考文献：<a href="https://blog.csdn.net/cpcpcp123/article/details/82763937?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=xls%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96java&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/cpcpcp123/article/details/82763937?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=xls%E6%95%B0%E6%8D%AE%E6%8F%90%E5%8F%96java&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-.first_rank_v2_pc_rank_v29&amp;spm=1018.2226.3001.4187</a></p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>冒泡排序优化</title>
    <url>/2020/06/19/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><h2 id="稳定性"><a href="#稳定性" class="headerlink" title="稳定性"></a>稳定性</h2><p>//冒泡排序就是把小的元素往前调或者把大的元素往后调。比较是相邻的两个元素比较，交换也发生在这两个元素之间。所以，如果两个元素相等，是不会再交换的；如果两个相等的元素没有相邻，那么即使通过前面的两两交换把两个相邻起来，这时候也不会交换，所以相同元素的前后顺序并没有改变，所以冒泡排序是一种<a href="https://baike.sogou.com/lemma/ShowInnerLink.htm?lemmaId=340252&ss_c=ssc.citiao.link">稳定排序</a>算法。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="普通代码"><a href="#普通代码" class="headerlink" title="普通代码"></a>普通代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(arr&amp;&amp;size)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Optimize_1</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(arr&amp;&amp;size)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">if</span>(size=<span class="number">1</span>)</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>；<span class="comment">//单一元素无需排序  </span></span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="comment">//定义标识符有序或无序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;<span class="comment">//开始置于1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                flag =<span class="number">0</span>;<span class="comment">//交换完成置于0</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//flag为1则已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort_Optimize_2</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">assert</span>(arr&amp;&amp;size)<span class="comment">//判断程序报错终止程序</span></span><br><span class="line">    <span class="keyword">if</span>(size=<span class="number">1</span>)</span><br><span class="line">    	<span class="keyword">return</span> <span class="number">0</span>；<span class="comment">//单一元素无需排序  </span></span><br><span class="line">    <span class="keyword">bool</span> flag=<span class="number">0</span>;<span class="comment">//定义标识符有序或无序</span></span><br><span class="line">    <span class="keyword">int</span> index=size<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> max_index=<span class="number">0</span>;<span class="comment">//每一次找到无序区的上界</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">1</span>;<span class="comment">//开始置于1</span></span><br><span class="line">        max_index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;size<span class="number">-1</span>-i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                array[j+<span class="number">1</span>] = tmp;</span><br><span class="line">                flag =<span class="number">0</span>;<span class="comment">//交换完成置于0</span></span><br><span class="line">                max_index=j;<span class="comment">//注意不要在这里直接将index置为j</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//flag为1则已经有序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><img src="C:\Users\DELL\Desktop\CSDN_1592554770412.jpg" alt="CSDN_1592554770412"></p>
<h2 id="标记理解（flag）"><a href="#标记理解（flag）" class="headerlink" title="标记理解（flag）"></a>标记理解（flag）</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">boolean flag<span class="comment">//用来判断循环后是否有元素位置发生变化</span></span><br><span class="line">   <span class="comment">//控制循环次数，避免多余交换</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>初识ToString</title>
    <url>/2020/09/21/%E5%88%9D%E8%AF%86ToString/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="To-string"><a href="#To-string" class="headerlink" title="To string"></a>To string</h1><p>首先要知道，在JDk中提供一个Object类，它是所有类的父类，即每个类都直接或间接的继承自该类。<br>注：个人理解，即，任何类中，都可以直接使用Object类中定义的方法，例如我们常用toString()方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pers.day02;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">()</span></span>&#123;&#125;   <span class="comment">//不写，也会默认补上这个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnimalDemo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]  args)</span> </span>&#123;</span><br><span class="line">		Animal an = <span class="keyword">new</span> Animal();</span><br><span class="line">		System.out.println(an.toString());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：<img src="https://img-blog.csdnimg.cn/2019032117363665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjQzNzE2NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>oString()方法解析开来，其实就是getClass().getName()+”@”+Integer.toHexString(hashCode());第一眼看上去感觉很复杂，我们对照刚刚打印的信息来看：<br>getClass().getName()+”@”+Integer.toHexString(hashCode())<br>pers.day02.Animal@73035e27<br>1）getClass().getName()代表返回对象所属类的包名.类名，即pers.day02.Anima。<br>2）@对应@;<br>3）Integer.toHexString(hashCode())代表将对象的<strong>哈希值用16进制</strong>表示，其中hashCode()代表返回该对象的哈希值。</p>
<p>3.然而，在实际开发中，通常希望toString()方法返回的不只是基本信息，所以Object的toString()方法通常会被重写，如下，我们只需在Animal类中重写toString()即可。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>友元函数深度理解</title>
    <url>/2020/07/07/%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0%E6%B7%B1%E5%BA%A6%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol>
<li>C++中引入友元函数，是为在该类中提供一个对外（除了他自己意外）访问的窗口;</li>
<li>这个友元函数他不属于该类的成员函数，他是定义在类外的普通函数，只是在类中声明该函数可以直接访问类中的<strong>private</strong>或者<strong>protected</strong>成员。</li>
</ol>
<h2 id="使用友元函数声明的一般形式："><a href="#使用友元函数声明的一般形式：" class="headerlink" title="使用友元函数声明的一般形式："></a>使用友元函数声明的一般形式：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">friend &lt;返回类型&gt; &lt;函数名&gt; (&lt;参数列表&gt;);</span><br></pre></td></tr></table></figure>

<h2 id="使用友元函数注意的要点："><a href="#使用友元函数注意的要点：" class="headerlink" title="使用友元函数注意的要点："></a>使用友元函数注意的要点：</h2><ol>
<li>类中通过使用关键字friend 来修饰友元函数，但该函数并不是类的成员函数，<strong>其声明可以放在类的私有部分，也可放在共有部分</strong>。<em>友元函数的定义在类体外实现，不需要加类限定。</em></li>
<li>一个类中的成员函数可以是另外一个类的友元函数，而且一个函数可以是多个类友元函数。</li>
<li>友元函数可以访问类中的私有成员和其他数据，但是访问不可直接使用数据成员，需要通过对对象进行引用。</li>
<li>友元函数在调用上同一般函数一样，不必通过对对象进行引用。</li>
</ol>
<h3 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">persion</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">persion</span>(<span class="keyword">char</span> *pn); </span><br><span class="line"><span class="comment">//友元函数;</span></span><br><span class="line">      <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">setweigth</span><span class="params">(persion &amp;p,<span class="keyword">int</span> h)</span></span>;<span class="comment">//注意，参数列表中一般会有一个引用类型的形参,原因参考上面的使用要点3和4;</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">disp</span><span class="params">()</span></span>; <span class="comment">//类成员函数</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line">      <span class="keyword">int</span> weigth,age;      </span><br><span class="line">&#125;;</span><br><span class="line">persion::<span class="built_in">persion</span>(<span class="keyword">char</span> *pn)   <span class="comment">//构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="built_in">strcpy</span>(name,pn);</span><br><span class="line">   weigth=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">persion::disp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout&lt;&lt;name&lt;&lt;<span class="string">&quot;--&quot;</span>&lt;&lt;weigth&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//友元函数的具体实现：这里没有类限定例如 (perion::setweigth)这种形式,这里可以与上面的disp()做个对比，一个属于类的成员，有限定，不属于类的成员函数，没有加限定。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setweigth</span><span class="params">(persion &amp;pn,<span class="keyword">int</span> w)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(pn.name,pn);<span class="comment">//实现字符串复制</span></span><br><span class="line">pn.weigth=w;       <span class="comment">//私有成员数据赋值</span></span><br><span class="line"> </span><br><span class="line">&#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="function">persion <span class="title">p</span><span class="params">(<span class="string">&quot;zhansan&quot;</span>)</span></span>;</span><br><span class="line">  <span class="comment">//调用实现setweigth(),与一般函数调用一致。</span></span><br><span class="line">  <span class="built_in">setweigth</span>(p,<span class="number">60</span>); </span><br><span class="line">  p.<span class="built_in">disp</span>();  <span class="comment">//调用类的成员函数。</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">第<span class="number">2</span>点示例</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wheel</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">car</span>(<span class="keyword">char</span> *pn);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(wheel &amp;w)</span></span>;    <span class="comment">//成员函数，做成wheel类中友元函数实现</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"> </span><br><span class="line">&#125;;</span><br><span class="line">car::<span class="built_in">car</span>(<span class="keyword">char</span> *pn)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name,pn);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">wheel</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">wheel</span>(<span class="keyword">int</span> s);</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">car::run</span><span class="params">(wheel &amp;w)</span></span>;   <span class="comment">//这里把car类的成员函数做了友元函数。</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> speed;</span><br><span class="line">&#125;;</span><br><span class="line">wheel::<span class="built_in">wheel</span>(<span class="keyword">int</span> s)</span><br><span class="line">&#123;</span><br><span class="line">  speed=s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">wheel <span class="title">w</span><span class="params">(<span class="number">60</span>)</span></span>;</span><br><span class="line">    <span class="function">car <span class="title">c</span><span class="params">(<span class="string">&quot;New car&quot;</span>)</span></span>;</span><br><span class="line">    c.<span class="built_in">run</span>(w);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">car::run</span><span class="params">(wheel &amp;w)</span>   <span class="comment">//car类成员函数的实现</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;the car is running&quot;</span>&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;name: &quot;</span>&lt;&lt;name&lt;&lt;<span class="string">&quot; speed :&quot;</span>&lt;&lt;w.speed&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>











<p>友元函数没有this指针（因为友元函数不是类的成员），所以参数有三种情况:</p>
<p>1、访问非static成员时需要对象做参数。</p>
<p>2、访问static成员或全局变量时不需要对象做参数</p>
<p>3、如果做参数的对象是全局对象，则不需要对象做参数</p>
<h3 id="使用："><a href="#使用：" class="headerlink" title="使用："></a>使用：</h3><p><strong>友元函数</strong><br>流运算符&lt;&lt;、&gt;&gt;、类型转换运算符不能定义为类的成员函数，只能是友元函数。<br>二元运算符在运算符重载时，一般声明为友元函数</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>双栈封装成队列</title>
    <url>/2020/09/17/%E5%8F%8C%E6%A0%88%E5%B0%81%E8%A3%85%E6%88%90%E9%98%9F%E5%88%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="双栈封装成队列"><a href="#双栈封装成队列" class="headerlink" title="双栈封装成队列"></a>双栈封装成队列</h1><p><em><strong><u>面试常考该思路</u></strong></em></p>
<p>因此总结一下，以免忘记！</p>
<h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><h3 id="1-多文件调用"><a href="#1-多文件调用" class="headerlink" title="1.多文件调用"></a>1.多文件调用</h3><h3 id="2-金蝉脱壳（同名同功能不同实现办法）"><a href="#2-金蝉脱壳（同名同功能不同实现办法）" class="headerlink" title="2.金蝉脱壳（同名同功能不同实现办法）"></a>2.金蝉脱壳（同名同功能不同实现办法）</h3><h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span><span class="comment">//&lt;&gt;从当前软件安装目录去检索 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span><span class="comment">//“”从当前源文件所在的目录去检索，如果无法找到再去当前软件安装目录检索 </span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">stackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; Linkstack;</span><br><span class="line"><span class="function">Linkstack* <span class="title">Create</span><span class="params">(Linkstack *s)</span> </span>&#123; <span class="comment">//建空栈</span></span><br><span class="line">	s=(Linkstack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Linkstack));</span><br><span class="line">	s-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(Linkstack *s,<span class="keyword">int</span> e)</span> </span>&#123; <span class="comment">//进栈</span></span><br><span class="line">	Linkstack *p=<span class="literal">NULL</span>;</span><br><span class="line">	p=(Linkstack*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Linkstack));</span><br><span class="line">	p-&gt;data=e;</span><br><span class="line">	p-&gt;next=s-&gt;next;</span><br><span class="line">	s-&gt;next=p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">(Linkstack *s,<span class="keyword">int</span> *e)</span> </span>&#123; <span class="comment">//出栈,把栈顶元素出栈并赋值给e</span></span><br><span class="line">	Linkstack *p=s-&gt;next;</span><br><span class="line">	<span class="keyword">if</span>(s-&gt;next==<span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;栈为空&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	*e=p-&gt;data; </span><br><span class="line">	s-&gt;next=p-&gt;next;</span><br><span class="line">	<span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Stackempty</span><span class="params">(Linkstack *s)</span> </span>&#123; <span class="comment">//判断栈空</span></span><br><span class="line">	<span class="keyword">if</span>(s-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//栈空 </span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//栈不空 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链栈基本操作</span></span><br><span class="line"><span class="comment">//该文件为第二段代码第3排的“链栈.c”</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span><span class="comment">//&lt;&gt;从当前软件安装目录去检索 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span><span class="comment">//“”从当前源文件所在的目录去检索，如果无法找到再去当前软件安装目录检索 </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;链栈.c&quot;</span><span class="comment">//调用头文件，文件需要在同一文件夹方便检索</span></span></span><br><span class="line">Linkstack *S1;<span class="comment">//创建s1栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">enQueue</span><span class="params">(Linkstack *s,<span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	push(s,e);<span class="comment">//直接压入s即可</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deQueue</span><span class="params">(Linkstack *s,<span class="keyword">int</span> *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m;</span><br><span class="line">	<span class="keyword">if</span>(!Stackempty(S1))<span class="comment">//如果s1不为空，把S1中栈顶元素直接弹出</span></span><br><span class="line">	&#123;</span><br><span class="line">		pop(S1,&amp;m);</span><br><span class="line">		*e=m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span><span class="comment">//如果s1为空，把S中“所有”元素依次弹出并压入s1中，此处所有用while循环实现</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(!Stackempty(s))</span><br><span class="line">		&#123;</span><br><span class="line">			pop(s,&amp;m);</span><br><span class="line">			push(S1,m);</span><br><span class="line">		&#125;</span><br><span class="line">			pop(S1,&amp;m);<span class="comment">//再弹出s1的栈顶元素</span></span><br><span class="line">			*e=m;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Linkstack*S;</span><br><span class="line">	<span class="keyword">int</span> x;</span><br><span class="line">	S=Create(S);</span><br><span class="line">	S1=Create(S1);<span class="comment">//2空栈的创建</span></span><br><span class="line">	enQueue(S,<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1进队列\n&quot;</span>);</span><br><span class="line">	enQueue(S,<span class="number">2</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2进队列\n&quot;</span>);</span><br><span class="line">	deQueue(S,&amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%d出队列\n\n&quot;</span>,x);</span><br><span class="line">	enQueue(S,<span class="number">3</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3进队列\n&quot;</span>);</span><br><span class="line">	enQueue(S,<span class="number">4</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4进队列\n&quot;</span>);</span><br><span class="line">	deQueue(S,&amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%d出队列\n&quot;</span>,x);</span><br><span class="line">	deQueue(S,&amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%d出队列\n&quot;</span>,x);</span><br><span class="line">	deQueue(S,&amp;x);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%d出队列\n&quot;</span>,x);<span class="comment">//注意出栈入栈都是单独进行while循环只是为了达到反转一次效果</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自身问题发现"><a href="#自身问题发现" class="headerlink" title="自身问题发现"></a>自身问题发现</h2><p>指针与引用理解依旧欠缺</p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>封装</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯法</title>
    <url>/2021/06/04/%E5%9B%9E%E6%BA%AF%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><p>回溯（backtracking）法是一种选优搜索法，按选优条件向前搜索，以达到目标。但当探索到某一步时，发现原先选择并不优或达不到目标，就退回一步重新选择，这种走不通就退回再走的技术为回溯法，而满足回溯条件的某个状态的点称为“回溯点”。</p>
<p>回溯法是一个既带有系统性又带有跳跃性的的搜索算法。它在包含问题的所有解的解空间树中，按照深度优先的策略，从根结点出发搜索解空间树。算法搜索至解空间树的任一结点时，总是先判断该结点是否肯定不包含问题的解。如果肯定不包含，则跳过对以该结点为根的子树的系统搜索，逐层向其祖先结点回溯。否则，进入该子树，继续按深度优先的策略进行搜索。回溯法在用来求问题的所有解时，要回溯到根，且根结点的所有子树都已被搜索遍才结束。而回溯法在用来求问题的任一解时，只要搜索到问题的一个解就可以结束。这种以深度优先的方式系统地搜索问题的解的算法称为回溯法，它适用于解一些组合数较大的问题.</p>
<h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>写一个在1，2，…，9（顺序不能变）数字之间插入+或-或什么都不插入，使得计算结果总是100的程序，并输出所有的可能性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//例5.4算法</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 9</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">char</span> op[],<span class="keyword">int</span> sum,<span class="keyword">int</span> prevadd,<span class="keyword">int</span> a[],<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (i==N)						<span class="comment">//扫描完所有位置</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (sum==<span class="number">100</span>)				<span class="comment">//找到一个解</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;  %d&quot;</span>,a[<span class="number">0</span>]);	<span class="comment">//输出解</span></span><br><span class="line">			<span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;N;j++)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (op[j]!=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,op[j]);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,a[j]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;=100\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	op[i]=<span class="string">&#x27;+&#x27;</span>;						<span class="comment">//位置i插入&#x27;+&#x27;</span></span><br><span class="line">	sum+=a[i];						<span class="comment">//计算结果</span></span><br><span class="line">	fun(op,sum,a[i],a,i+<span class="number">1</span>);			<span class="comment">//继续处理下一个位置</span></span><br><span class="line">	sum-=a[i];						<span class="comment">//回溯</span></span><br><span class="line"></span><br><span class="line">	op[i]=<span class="string">&#x27;-&#x27;</span>;						<span class="comment">//位置i插入&#x27;-&#x27;</span></span><br><span class="line">	sum-=a[i];						<span class="comment">//计算结果</span></span><br><span class="line">	fun(op,sum,-a[i],a,i+<span class="number">1</span>);		<span class="comment">//继续处理下一个位置</span></span><br><span class="line">	sum+=a[i];						<span class="comment">//回溯</span></span><br><span class="line"></span><br><span class="line">	op[i]=<span class="string">&#x27; &#x27;</span>;						<span class="comment">//位置i插入&#x27; &#x27;</span></span><br><span class="line">	sum-=prevadd;					<span class="comment">//先减去前面的元素值</span></span><br><span class="line">	<span class="keyword">int</span> tmp;						<span class="comment">//计算新元素值</span></span><br><span class="line">	<span class="keyword">if</span> (prevadd&gt;<span class="number">0</span>)</span><br><span class="line">		tmp=prevadd*<span class="number">10</span>+a[i];		<span class="comment">//如prevadd=5,a[i]=6,结果为56</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		tmp=prevadd*<span class="number">10</span>-a[i];		<span class="comment">//如prevadd=-5,a[i]=6,结果为-56</span></span><br><span class="line">	sum+=tmp;						<span class="comment">//计算合并结果</span></span><br><span class="line">	fun(op,sum,tmp,a,i+<span class="number">1</span>);			<span class="comment">//继续处理下一个位置</span></span><br><span class="line">	sum-=tmp;						<span class="comment">//回溯sum</span></span><br><span class="line">	sum+=prevadd;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[N];</span><br><span class="line">	<span class="keyword">char</span> op[N];					<span class="comment">//op[i]表示在位置i插入运算符</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)		<span class="comment">//为a赋值为1,2，...,9</span></span><br><span class="line">		a[i]=i+<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;求解结果\n&quot;</span>);</span><br><span class="line">	fun(op,a[<span class="number">0</span>],a[<span class="number">0</span>],a,<span class="number">1</span>);		<span class="comment">//插入位置i从1开始</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>作用域运算符</title>
    <url>/2020/07/07/%E5%9F%9F%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="作用域运算符"><a href="#作用域运算符" class="headerlink" title="作用域运算符"></a>作用域运算符</h1><h2 id="一、：："><a href="#一、：：" class="headerlink" title="一、：："></a>一、：：</h2><ol>
<li><p>代码块的作用域。在函数内如果有一个与全局变量重名的变量，可以用 ::a 的形式访问（a是全局变量名）。例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">2</span>;</span><br><span class="line">    cout&lt;&lt;a&lt;&lt;::a;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​    的结果是 21 。</p>
<ol start="2">
<li><p>类的静态成员访问。访问类的静态成员时，要采用 class_name::static_member_name 的方式访问。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">用于表示类的成员函数</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="keyword">int</span> age_;</span><br><span class="line">	string name_;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="keyword">int</span> age)</span> <span class="comment">//域运算符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	age_ = age;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Student::getAge</span><span class="params">()</span> <span class="comment">//域运算符</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	cout&lt;&lt;age_&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">return</span> age_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>命名空间成员访问。访问命名空间中的成员时，要用 namespace_name::member_name 的方式访问。当然，也可以用 using 关键字省去命名空间名和作用域运算符。</p>
</li>
<li><p>枚举类型关键字访问。如果有一个枚举类型叫做 Enum ，其中有一个 one 关键字，可以用 Enum::one 来访问。但是，直接写 one 也是有效的，所以一般不用加上 Enum:: 。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>基数排序</title>
    <url>/2020/10/16/%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h1><p>基数排序不同于其他的七种排序算法，它是基于一种分配法，而非比较。基数排序属于“分配式排序”（distribution sort），基数排序法又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用。它的灵感来自于队列(Queue)，它最独特的地方在于利用了数字的有穷性(阿拉伯数字只有0到9的10个)。</p>
<h2 id="原理示例"><a href="#原理示例" class="headerlink" title="原理示例"></a>原理示例</h2><p><img src="https://i.loli.net/2020/10/16/z5u4SLOYVcRfHlm.gif" alt="基数排序gif"></p>
<h2 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h2><table>
<thead>
<tr>
<th><strong>排序方法</strong></th>
<th><strong>时间复杂度</strong></th>
<th><strong>空间复杂度</strong></th>
<th><strong>稳定性</strong></th>
<th><strong>复杂性</strong></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>平均情况</strong></td>
<td><strong>最坏情况</strong></td>
<td><strong>最好情况</strong></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>基数排序</strong></td>
<td>O(d*(n+r))</td>
<td>O(d*(n+r))</td>
<td>O(d*(n+r))</td>
<td>O(n+r)</td>
<td>稳定</td>
<td>较复杂</td>
</tr>
</tbody></table>
<p>其中，d 为位数，r 为基数，n 为原数组个数。 在基数排序中，因为没有比较操作，所以在复杂上，最好的情况与最坏的情况在时间上是一致的，均为 O(d * (n + r))。</p>
<h2 id="实现要点："><a href="#实现要点：" class="headerlink" title="实现要点："></a>实现要点：</h2><p>首先我们需要一个能够放下所有一位数的桶（bucket），还好阿拉伯数字只有10个，所以我们只需要10个bucket就可以搞定，但是在将所有元素放入bucket时肯定会出现多个元素放入一个bucket的情况，这时候就需要使用链表来解决了（也有使用二维数组的方式，但是空间需要n^2，当排序元素很多时肯定有点吃不消），同时为了方便往bucket中遍历元素以及添加元素，我们让bucket包含两个指针，一个指向bucket中第一个元素（head），另一个指向最后一个元素（tail），而bucket中每个元素都是一个Node，Node中包含一个排序序列中的值（val）以及一个指向下一个元素的指针（next）。<br>有了桶，下一步就是需要将所有数值从个位开始依次放入桶，然后再按顺序取出放回原数组了，这里有个地方需要注意下，就是如何循环到数组中所有元素的最高位就终止循环，这里有两个解决方法：<br>（1）首先遍历一遍数组，找到最大值，确定最高位<br>（2）一直循环直到所有元素的指定位数都是0为止最高位优先(Most Significant Digit first)法，简称<strong>MSD法</strong>：先按k1排序分组，同一组中记录，关键码k1相等，再对各组按k2排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码kd对各子组排序后。再将各组连接起来，便得到一个有序序列。</p>
<p>最低位优先(Least Significant Digit first)法，简称<strong>LSD法</strong>：先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">testBS()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> a[] = &#123;<span class="number">2</span>, <span class="number">343</span>, <span class="number">342</span>, <span class="number">1</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">4343</span>, <span class="number">433</span>, <span class="number">687</span>, <span class="number">654</span>, <span class="number">3</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> *a_p = a;</span><br><span class="line">    <span class="comment">//计算数组长度</span></span><br><span class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(a) / <span class="keyword">sizeof</span>(<span class="keyword">int</span>);</span><br><span class="line">    <span class="comment">//基数排序</span></span><br><span class="line">    bucketSort3(a_p, size);</span><br><span class="line">    <span class="comment">//打印排序后结果</span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//基数排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bucketSort3</span><span class="params">(<span class="keyword">int</span> *p, intn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//获取数组中的最大数</span></span><br><span class="line">    <span class="keyword">int</span> maxNum = findMaxNum(p, n);</span><br><span class="line">    <span class="comment">//获取最大数的位数，次数也是再分配的次数。</span></span><br><span class="line">    <span class="keyword">int</span> loopTimes = getLoopTimes(maxNum);</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//对每一位进行桶分配</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= loopTimes; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sort2(p, n, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取数字的位数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getLoopTimes</span><span class="params">(intnum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> temp = num / <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">while</span>(temp != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        count++;</span><br><span class="line">        temp = temp / <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询数组中的最大数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">findMaxNum</span><span class="params">(<span class="keyword">int</span> *p, intn)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(*(p + i) &gt; max)</span><br><span class="line">        &#123;</span><br><span class="line">            max = *(p + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将数字分配到各自的桶中，然后按照桶的顺序输出排序结果</span></span><br><span class="line">voidsort2(<span class="keyword">int</span> *p, intn, intloop)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//建立一组桶此处的20是预设的根据实际数情况修改</span></span><br><span class="line">    <span class="keyword">int</span> buckets[<span class="number">10</span>][<span class="number">20</span>] = &#123;&#125;;</span><br><span class="line">    <span class="comment">//求桶的index的除数</span></span><br><span class="line">    <span class="comment">//如798个位桶index=(798/1)%10=8</span></span><br><span class="line">    <span class="comment">//十位桶index=(798/10)%10=9</span></span><br><span class="line">    <span class="comment">//百位桶index=(798/100)%10=7</span></span><br><span class="line">    <span class="comment">//tempNum为上式中的1、10、100</span></span><br><span class="line">    <span class="keyword">int</span> tempNum = (<span class="keyword">int</span>)<span class="built_in">pow</span>(<span class="number">10</span>, loop - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> row_index = (*(p + i) / tempNum) % <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[row_index][j] == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                buckets[row_index][j] = *(p + i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将桶中的数，倒回到原有数组中</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; <span class="number">20</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buckets[i][j] != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                *(p + k) = buckets[i][j];</span><br><span class="line">                buckets[i][j] = <span class="literal">NULL</span>;</span><br><span class="line">                k++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>排序算法</tag>
      </tags>
  </entry>
  <entry>
    <title>多态</title>
    <url>/2020/08/28/%E5%A4%9A%E6%80%81/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><h3 id="什么是多态"><a href="#什么是多态" class="headerlink" title="什么是多态"></a><strong>什么是多态</strong></h3><p>多态就是向不同的对象发送同一个消息，不同的对象在接收时会产生不同的行为。也就是说，每个对象可以用自己的方式去响应共同的消息。使用相同的代码实现不同的动作，体现了面向对象编程的<strong>优越性</strong>。</p>
<p>在C++中，多态就是利用基类指针指向子类实例，通过基类指针调用子类（虚）函数从而实现“<strong>一个接口，多种形态</strong>”的效果。</p>
<p>【多态分为两种】</p>
<p>1、编译时多态：主要通过函数的重载和模板来实现。</p>
<p>2、运行时多态：主要通过虚函数来实现。</p>
<h3 id="1-多态的体现"><a href="#1-多态的体现" class="headerlink" title="1.多态的体现"></a>1.多态的体现</h3><p>父类的引用<em><strong>指向</strong></em>自己的子类对象；</p>
<p>父类的引用也可以<em><strong>接收</strong></em>自己的子类对象。</p>
<h3 id="2-多态的前提"><a href="#2-多态的前提" class="headerlink" title="2.多态的前提"></a>2.多态的前提</h3><p>必须是类与类之间的关系，要么是继承(extends)，要么是实现(implements)，通常还有一个前提，就是存在覆盖（重写）。</p>
<h3 id="3-多态的好处"><a href="#3-多态的好处" class="headerlink" title="3.多态的好处"></a>3.多态的好处</h3><p>多态的出现大大的提高了程序的可扩展性。但是只能<strong>使用父类的引用，访问父类的成员。</strong></p>
<h3 id="4-类型转换（向上转型，向下转型）"><a href="#4-类型转换（向上转型，向下转型）" class="headerlink" title="4.类型转换（向上转型，向下转型）"></a>4.类型转换（向上转型，向下转型）</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Anmial a=<span class="keyword">new</span> <span class="built_in">Cat</span>();<span class="comment">//类型提升，向上转型</span></span><br><span class="line"> </span><br><span class="line">Cat c=(Cat)a;<span class="comment">//强制将父类的引用转成子类的类型，向下转型</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Anmial a=new Anmial();</span></span><br><span class="line"><span class="comment">Cat c=(Cat)a;</span></span><br><span class="line"><span class="comment">此段代码有误；</span></span><br><span class="line"><span class="comment">原因：不能将以前有的东西强制转为现有的东西。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="5-多态的应用"><a href="#5-多态的应用" class="headerlink" title="5.多态的应用"></a>5.多态的应用</h3><p>instanceof——-一般用于子类的类型有限，当传的类型需要进行其他操作时，必须要确定它的类型，即用到它的特有方法，这时用instaceof进行比较。</p>
<p><strong>多态示例一：</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">abstract <span class="class"><span class="keyword">class</span> <span class="title">Animal</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> abstract <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="title">extends</span> <span class="title">Animal</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;猫吃鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="title">extends</span> <span class="title">Animal</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;狗吃骨头&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kanJia</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.<span class="built_in">println</span>(<span class="string">&quot;狗看家&quot;</span>);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">duotaiDemo</span>&#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">funcation</span>(<span class="keyword">new</span> <span class="built_in">Dog</span>());</span><br><span class="line">        <span class="built_in">funcation</span>(<span class="keyword">new</span> <span class="built_in">Cat</span>());</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funcation</span><span class="params">(Animal a)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            a.<span class="built_in">eat</span>();</span><br><span class="line">            <span class="keyword">if</span>(a instanceof Cat)</span><br><span class="line">            &#123;</span><br><span class="line">                Cat c=(Cat)a;</span><br><span class="line">                c.<span class="built_in">catchMouse</span>();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a instanceof Dog)&#123;</span><br><span class="line">                Dog d=(Dog)a;</span><br><span class="line">                d.<span class="built_in">kanJia</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>输出结果为：</p>
<p>狗吃骨头</p>
<p>狗看家</p>
<p>猫吃鱼</p>
<p>猫抓老鼠</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程</title>
    <url>/2020/11/24/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 此文只能说是java多线程的一个入门，其实Java里头线程完全可以写一本书了，但是如果最基本的你都学掌握好，又怎么能更上一个台阶呢？如果你觉得此文很简单，那推荐你看看Java并发包的的线程池（<a href="http://blog.csdn.net/evankaka/article/details/51489322">Java并发编程与技术内幕:线程池深入理解</a>），或者看这个专栏：<a href="http://blog.csdn.net/column/details/javahhighconcurrence.html">Java并发编程与技术内幕</a>。你将会对Java里头的高并发场景下的线程有更加深刻的理解。</p>
<p>目录<a href="http://blog.csdn.net/evankaka/article/details/44153709#">(?)</a>[<a href="http://blog.csdn.net/evankaka/article/details/44153709#">-]</a></p>
<ol>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t0">一扩展javalangThread类</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t1">二实现javalangRunnable接口</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t2">三Thread和Runnable的区别</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t3">四线程状态转换</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t4">五线程调度</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t5">六常用函数说明</a></li>
<li><ol>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t6">使用方式</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t7">为什么要用join方法</a></li>
</ol>
</li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t8">七常见线程名词解释</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t9">八线程同步</a></li>
<li><a href="http://blog.csdn.net/evankaka/article/details/44153709#t10">九线程数据传递</a></li>
</ol>
<p>​    本文主要讲了java中多线程的使用方法、线程同步、线程数据传递、线程状态及相应的一些线程函数用法、概述等。在这之前，首先让我们来了解下在操作系统中进程和线程的区别：</p>
<p>　　<strong>进程：每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销，一个进程包含1–n个线程。（进程是资源分配的最小单位）</strong></p>
<p>　　<strong>线程：同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器(PC)，线程切换开销小。（线程是cpu调度的最小单位）</strong></p>
<p>　　线程和进程一样分为五个阶段：创建、就绪、运行、阻塞、终止。</p>
<p>　　多进程是指操作系统能同时运行多个任务（程序）。</p>
<p>　　多线程是指在同一程序中有多个顺序流在执行。</p>
<p>在<em>java</em>中要想实现多线程，有两种手段，一种是继续<em>Thread</em>类，另外一种是实现<em>Runable</em>接口.(<strong>其实准确来讲，应该有三种，还有一种是实现Callable接口</strong>，并与Future、线程池结合使用，此文这里不讲这个，有兴趣看这里<a href="http://blog.csdn.net/evankaka/article/details/51610635">Java并发编程与技术内幕:Callable、Future、FutureTask、CompletionService</a> )</p>
<h1 id="一、扩展java-lang-Thread类"><a href="#一、扩展java-lang-Thread类" class="headerlink" title="一、扩展java.lang.Thread类"></a>一、扩展java.lang.Thread类</h1><p>这里继承Thread类的方法是比较常用的一种，如果说你只是想起一条线程。没有什么其它特殊的要求，那么可以使用Thread.（<strong>笔者推荐使用Runable，后头会说明为什么</strong>）。下面来看一个简单的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.multithread.learning;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@functon</span> 多线程学习</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 林炳文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@time</span> 2015.3.9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(name + <span class="string">&quot;运行  :  &quot;</span> + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sleep((<span class="keyword">int</span>) Math.random() * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh1=<span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh2=<span class="keyword">new</span> Thread1(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>A运行 : 0<br>B运行 : 0<br>A运行 : 1<br>A运行 : 2<br>A运行 : 3<br>A运行 : 4<br>B运行 : 1<br>B运行 : 2<br>B运行 : 3<br>B运行 : 4</p>
<p>再运行一下：</p>
<p>A运行 : 0<br>B运行 : 0<br>B运行 : 1<br>B运行 : 2<br>B运行 : 3<br>B运行 : 4<br>A运行 : 1<br>A运行 : 2<br>A运行 : 3<br>A运行 : 4</p>
<p>说明：</p>
<p>程序启动运行main时候，java虚拟机启动一个进程，主线程main在main()调用时候被创建。随着调用MitiSay的两个对象的start方法，另外两个线程也启动了，这样，整个应用就在多线程下运行。</p>
<p>注意：start()方法的调用后并不是立即执行多线程代码，而是使得该线程变为可运行态（Runnable），什么时候运行是由操作系统决定的。</p>
<p>从程序运行的结果可以发现，多线程程序是乱序执行。因此，只有乱序执行的代码才有必要设计为多线程。</p>
<p>Thread.sleep()方法调用目的是不让当前线程独自霸占该进程所获取的CPU资源，以留出一定时间给其他线程执行的机会。</p>
<p>实际上所有的多线程代码执行顺序都是不确定的，每次执行的结果都是随机的。</p>
<p>但是start方法重复调用的话，会出现java.lang.IllegalThreadStateException异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread1 mTh1=<span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread1 mTh2=mTh1;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mTh1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mTh2.start();</span><br></pre></td></tr></table></figure>


<p>输出：</p>
<p>Exception in thread “main” java.lang.IllegalThreadStateException<br>   at java.lang.Thread.start(Unknown Source)<br>   at com.multithread.learning.Main.main(Main.java:31)<br>A运行 : 0<br>A运行 : 1<br>A运行 : 2<br>A运行 : 3<br>A运行 : 4</p>
<h1 id="二、实现java-lang-Runnable接口"><a href="#二、实现java-lang-Runnable接口" class="headerlink" title="二、实现java.lang.Runnable接口"></a>二、实现java.lang.Runnable接口</h1><p>采用Runnable也是非常常见的一种，我们只需要重写run方法即可。下面也来看个实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@functon</span> 多线程学习</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 林炳文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@time</span> 2015.3.9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.multithread.runnable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Thread2</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	            System.out.println(name + <span class="string">&quot;运行  :  &quot;</span> + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	            	Thread.sleep((<span class="keyword">int</span>) Math.random() * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	                e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread2(<span class="string">&quot;C&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">new</span> Thread(<span class="keyword">new</span> Thread2(<span class="string">&quot;D&quot;</span>)).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<p>C运行 : 0<br>D运行 : 0<br>D运行 : 1<br>C运行 : 1<br>D运行 : 2<br>C运行 : 2<br>D运行 : 3<br>C运行 : 3<br>D运行 : 4<br>C运行 : 4</p>
<p>说明：</p>
<p>Thread2类通过实现Runnable接口，使得该类有了多线程类的特征。run（）方法是多线程程序的一个约定。所有的多线程代码都在run方法里面。Thread类实际上也是实现了Runnable接口的类。</p>
<p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p>
<p>实际上所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是扩展Thread类还是实现Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p>
<h1 id="三、Thread和Runnable的区别"><a href="#三、Thread和Runnable的区别" class="headerlink" title="三、Thread和Runnable的区别"></a>三、Thread和Runnable的区别</h1><p>如果一个类继承Thread，则不适合资源共享。但是如果实现了Runable接口的话，则很容易的实现资源共享。</p>
<p>**总结：<br>**</p>
<p><strong>实现Runnable接口比继承Thread类所具有的优势：</strong></p>
<p><strong>1）：适合多个相同的程序代码的线程去处理同一个资源</strong></p>
<p><strong>2）：可以避免java中的单继承的限制</strong></p>
<p><strong>3）：增加程序的健壮性，代码可以被多个线程共享，代码和数据独立</strong></p>
<p><strong>4）：线程池只能放入实现Runable或callable类线程，不能直接放入继承Thread的类</strong></p>
<p><em>*<em>*提醒一下大家：*</em>*<em>main*</em>*<em>方法其实也是一个线程。在*</em>*<em>java*</em>*<em>中所以的线程都是同时启动的，至于什么时候，哪个先执行，完全看谁先得到*</em>*<em>CPU*</em>*<em>的资源。*</em>*</em></p>
<p><strong>在<strong><strong>java</strong></strong>中，每次程序运行至少启动<strong><strong>2</strong></strong>个线程。一个是<strong><strong>main</strong></strong>线程，一个是垃圾收集线程。因为每当使用<strong><strong>java</strong></strong>命令执行一个类的时候，实际上都会启动一个ＪＶＭ，每一个ｊＶＭ实习在就是在操作系统中启动了一个进程。</strong></p>
<h1 id="四、线程状态转换"><a href="#四、线程状态转换" class="headerlink" title="四、线程状态转换"></a>四、线程状态转换</h1><p>下面的这个图非常重要！你如果看懂了这个图，那么对于多线程的理解将会更加深刻！</p>
<p><img src="https://img-blog.csdn.net/20150309140927553" alt="img"></p>
<p>1、新建状态（New）：新创建了一个线程对象。</p>
<p>2、就绪状态（Runnable）：线程对象创建后，其他线程调用了该对象的start()方法。该状态的线程位于可运行线程池中，变得可运行，等待获取CPU的使用权。</p>
<p>3、运行状态（Running）：就绪状态的线程获取了CPU，执行程序代码。</p>
<p><strong>4、阻塞状态（Blocked）：阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。阻塞的情况分三种：</strong></p>
<p><strong>（一）、等待阻塞：运行的线程执行wait()方法，JVM会把该线程放入等待池中。(wait会释放持有的锁)</strong></p>
<p><strong>（二）、同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。</strong></p>
<p><strong>（三）、其他阻塞：运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。（注意,sleep是不会释放持有的锁）</strong></p>
<p>5、死亡状态（Dead）：线程执行完了或者因异常退出了run()方法，该线程结束生命周期。</p>
<h1 id="五、线程调度"><a href="#五、线程调度" class="headerlink" title="五、线程调度"></a>五、线程调度</h1><p>线程的调度</p>
<p>1、调整线程优先级：Java线程有优先级，优先级高的线程会获得较多的运行机会。</p>
<p>Java线程的优先级用整数表示，取值范围是1~10，Thread类有以下三个静态常量：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MAX_PRIORITY</span><br><span class="line">          线程可以具有的最高优先级，取值为<span class="number">10</span>。</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> MIN_PRIORITY</span><br><span class="line">          线程可以具有的最低优先级，取值为<span class="number">1</span>。</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> NORM_PRIORITY</span><br><span class="line">          分配给线程的默认优先级，取值为<span class="number">5</span>。</span><br></pre></td></tr></table></figure>

<p>Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。</p>
<p> 每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY。</p>
<p>线程的优先级有继承关系，比如A线程中创建了B线程，那么B将和A具有相同的优先级。</p>
<p>JVM提供了10个线程优先级，但与常见的操作系统都不能很好的映射。如果希望程序能移植到各个操作系统中，应该仅仅使用Thread类有以下三个静态常量作为优先级，这样能保证同样的优先级采用了同样的调度方式。</p>
<p>2、线程睡眠：Thread.sleep(long millis)方法，使线程转到阻塞状态。millis参数设定睡眠的时间，以毫秒为单位。当睡眠结束后，就转为就绪（Runnable）状态。sleep()平台移植性好。</p>
<p>3、线程等待：Object类中的wait()方法，导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法。这个两个唤醒方法也是Object类中的方法，行为等价于调用 wait(0) 一样。</p>
<p>4、线程让步：Thread.yield() 方法，暂停当前正在执行的线程对象，把执行机会让给相同或者更高优先级的线程。</p>
<p>5、线程加入：join()方法，等待其他线程终止。在当前线程中调用另一个线程的join()方法，则当前线程转入阻塞状态，直到另一个进程运行结束，当前线程再由阻塞转为就绪状态。</p>
<p>6、线程唤醒：Object类中的notify()方法，唤醒在此对象监视器上等待的单个线程。如果所有线程都在此对象上等待，则会选择唤醒其中一个线程。选择是任意性的，并在对实现做出决定时发生。线程通过调用其中一个 wait 方法，在对象的监视器上等待。 直到当前的线程放弃此对象上的锁定，才能继续执行被唤醒的线程。被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。类似的方法还有一个notifyAll()，唤醒在此对象监视器上等待的所有线程。</p>
<p> 注意：Thread中suspend()和resume()两个方法在JDK1.5中已经废除，不再介绍。因为有死锁倾向。</p>
<h1 id="六、常用函数说明"><a href="#六、常用函数说明" class="headerlink" title="六、常用函数说明"></a>六、常用函数说明</h1><p>**①sleep(long millis): 在指定的毫秒数内让当前正在执行的线程休眠（暂停执行）</p>
<p>②join():指等待t线程终止。**</p>
<h3 id="使用方式。"><a href="#使用方式。" class="headerlink" title="使用方式。"></a>使用方式。</h3><p>join是Thread类的一个方法，启动线程后直接调用，即join()的作用是：“等待该线程终止”，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> AThread(); t.start(); t.join();</span><br></pre></td></tr></table></figure>



<h3 id="为什么要用join-方法"><a href="#为什么要用join-方法" class="headerlink" title="为什么要用join()方法"></a>为什么要用join()方法</h3><p>在很多情况下，主线程生成并起动了子线程，如果子线程里要进行大量的耗时的运算，主线程往往将于子线程之前结束，但是如果主线程处理完其他的事务后，需要用到子线程的处理结果，也就是主线程需要等待子线程执行完成之后再结束，这个时候就要用到join()方法了。</p>
<p>不加join。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@functon</span> 多线程学习,join</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@author</span> 林炳文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *<span class="doctag">@time</span> 2015.3.9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.multithread.join;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Thread1</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    	<span class="keyword">super</span>(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 线程运行开始!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;子线程&quot;</span>+name + <span class="string">&quot;运行 : &quot;</span> + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                sleep((<span class="keyword">int</span>) Math.random() * <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 线程运行结束!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;主线程运行开始!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh1=<span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh2=<span class="keyword">new</span> Thread1(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;主线程运行结束!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>输出结果：<br>main主线程运行开始!<br>main主线程运行结束!<br>B 线程运行开始!<br>子线程B运行 : 0<br>A 线程运行开始!<br>子线程A运行 : 0<br>子线程B运行 : 1<br>子线程A运行 : 1<br>子线程A运行 : 2<br>子线程A运行 : 3<br>子线程A运行 : 4<br>A 线程运行结束!<br>子线程B运行 : 2<br>子线程B运行 : 3<br>子线程B运行 : 4<br>B 线程运行结束!<br>发现主线程比子线程早结束</p>
<p>加join</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+<span class="string">&quot;主线程运行开始!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh1=<span class="keyword">new</span> Thread1(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		Thread1 mTh2=<span class="keyword">new</span> Thread1(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh1.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		mTh2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			mTh1.join();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			mTh2.join();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		System.out.println(Thread.currentThread().getName()+ <span class="string">&quot;主线程运行结束!&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行结果：<br>main主线程运行开始!<br>A 线程运行开始!<br>子线程A运行 : 0<br>B 线程运行开始!<br>子线程B运行 : 0<br>子线程A运行 : 1<br>子线程B运行 : 1<br>子线程A运行 : 2<br>子线程B运行 : 2<br>子线程A运行 : 3<br>子线程B运行 : 3<br>子线程A运行 : 4<br>子线程B运行 : 4<br>A 线程运行结束!<br>主线程一定会等子线程都结束了才结束</p>
<p><strong>③yield():暂停当前正在执行的线程对象，并执行其他线程。</strong></p>
<p>​    Thread.yield()方法作用是：暂停当前正在执行的线程对象，并执行其他线程。</p>
<p>​      ****yield()应该做的是让当前运行线程回到可运行状态，以允许具有相同优先级的其他线程获得运行机会。****因此，使用yield()的目的是让相同优先级的线程之间能适当的轮转执行。但是，实际中无法保证yield()达到让步目的，因为让步的线程还有可能被线程调度程序再次选中。</p>
<p>结论：yield()从未导致线程转到等待/睡眠/阻塞状态。在大多数情况下，yield()将导致线程从运行状态转到可运行状态，但有可能没有效果。可看上面的图。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *@functon 多线程学习 yield</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *@author 林炳文</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> *@time 2015.3.9</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">package com.multithread.yield;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadYield</span> <span class="title">extends</span> <span class="title">Thread</span>&#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadYield</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @<span class="function">Override</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">50</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            System.out.<span class="built_in">println</span>(<span class="string">&quot;&quot;</span> + <span class="keyword">this</span>.<span class="built_in">getName</span>() + <span class="string">&quot;-----&quot;</span> + i);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当i为30时，该线程就会把CPU时间让掉，让其他或者自己的线程执行（也就是谁先抢到谁执行）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (i ==<span class="number">30</span>) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.<span class="built_in">yield</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> &#123;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">		ThreadYield yt1 = <span class="keyword">new</span> <span class="built_in">ThreadYield</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    	ThreadYield yt2 = <span class="keyword">new</span> <span class="built_in">ThreadYield</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        yt1.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        yt2.<span class="built_in">start</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>运行结果：</p>
<p>第一种情况：李四（线程）当执行到30时会CPU时间让掉，这时张三（线程）抢到CPU时间并执行。</p>
<p>第二种情况：李四（线程）当执行到30时会CPU时间让掉，这时李四（线程）抢到CPU时间并执行。</p>
<p><strong>sleep()和yield()的区别</strong><br>    sleep()和yield()的区别):sleep()使当前线程进入停滞状态，所以执行sleep()的线程在指定的时间内肯定不会被执行；yield()只是使当前线程重新回到可执行状态，所以执行yield()的线程有可能在进入到可执行状态后马上又被执行。<br>    sleep 方法使当前运行中的线程睡眼一段时间，进入不可运行状态，这段时间的长短是由程序设定的，yield 方法使当前线程让出 CPU 占有权，但让出的时间是不可设定的。实际上，yield()方法对应了如下操作：先检测当前是否有相同优先级的线程处于同可运行状态，如有，则把 CPU 的占有权交给此线程，否则，继续运行原来的线程。所以yield()方法称为“退让”，它把运行机会让给了同等优先级的其他线程<br>    另外，sleep 方法允许较低优先级的线程获得运行机会，但 yield() 方法执行时，当前线程仍处在可运行状态，所以，不可能让出较低优先级的线程些时获得 CPU 占有权。在一个运行系统中，如果较高优先级的线程没有调用 sleep 方法，又没有受到 I\O 阻塞，那么，较低优先级线程只能等待所有较高优先级的线程运行结束，才有机会运行。</p>
<p><strong>④setPriority(): 更改线程的优先级。</strong></p>
<p>　　　　MIN_PRIORITY = 1<br> 　　  NORM_PRIORITY = 5<br>      MAX_PRIORITY = 10</p>
<p>用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Thread4 t1 = new Thread4(&quot;t1&quot;);</span><br><span class="line">Thread4 t2 = new Thread4(&quot;t2&quot;);</span><br><span class="line">t1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">t2.setPriority(Thread.MIN_PRIORITY);</span><br></pre></td></tr></table></figure>


<p><em>*<em>*⑤interrupt():不要以为它是中断某个线程！它只是线线程发送一个中断信号，让线程在无限等待时（如死锁时）能抛出抛出，从而结束线程，但是如果你吃掉了这个异常，那么*</em>*<em>这个线程还是不会中断的！*</em>*</em></p>
<p>⑥wait()</p>
<p>Obj.wait()，与Obj.notify()必须要与synchronized(Obj)一起使用，也就是wait,与notify是针对已经获取了Obj锁进行操作，从语法角度来说就是Obj.wait(),Obj.notify必须在synchronized(Obj){…}语句块内。从功能上来说wait就是说线程在获取对象锁后，主动释放对象锁，同时本线程休眠。直到有其它线程调用对象的notify()唤醒该线程，才能继续获取对象锁，并继续执行。相应的notify()就是对对象锁的唤醒操作。但有一点需要注意的是notify()调用后，并不是马上就释放对象锁的，而是在相应的synchronized(){}语句块执行结束，自动释放锁后，JVM会在wait()对象锁的线程中随机选取一线程，赋予其对象锁，唤醒线程，继续执行。这样就提供了在线程间同步、唤醒的操作。Thread.sleep()与Object.wait()二者都可以暂停当前线程，释放CPU控制权，主要的区别在于Object.wait()在释放CPU同时，释放了对象锁的控制。</p>
<p>  单单在概念上理解清楚了还不够，需要在实际的例子中进行测试才能更好的理解。对Object.wait()，Object.notify()的应用最经典的例子，应该是三线程打印ABC的问题了吧，这是一道比较经典的面试题，题目要求如下：</p>
<p>  建立三个线程，A线程打印10次A，B线程打印10次B,C线程打印10次C，要求线程同时运行，交替打印10次ABC。这个问题用Object的wait()，notify()就可以很方便的解决。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * wait用法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> DreamSea </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@time</span> 2015.3.9 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.multithread.wait;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadPrinter2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object prev;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object self;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MyThreadPrinter2</span><span class="params">(String name, Object prev, Object self)</span> </span>&#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.name = name;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.prev = prev;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.self = self;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">10</span>;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">synchronized</span> (prev) &#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">synchronized</span> (self) &#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    System.out.print(name);   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    count--;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    self.notify();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    prev.wait();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    e.printStackTrace();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object a = <span class="keyword">new</span> Object();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object b = <span class="keyword">new</span> Object();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object c = <span class="keyword">new</span> Object();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MyThreadPrinter2 pa = <span class="keyword">new</span> MyThreadPrinter2(<span class="string">&quot;A&quot;</span>, c, a);   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MyThreadPrinter2 pb = <span class="keyword">new</span> MyThreadPrinter2(<span class="string">&quot;B&quot;</span>, a, b);   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MyThreadPrinter2 pc = <span class="keyword">new</span> MyThreadPrinter2(<span class="string">&quot;C&quot;</span>, b, c);   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(pa).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);  <span class="comment">//确保按顺序A、B、C执行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(pb).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(pc).start();   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Thread.sleep(<span class="number">100</span>);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>


<p>输出结果：</p>
<p>ABCABCABCABCABCABCABCABCABCABC</p>
<p>   先来解释一下其整体思路，从大的方向上来讲，该问题为三线程间的同步唤醒操作，主要的目的就是ThreadA-&gt;ThreadB-&gt;ThreadC-&gt;ThreadA循环执行三个线程。为了控制线程执行的顺序，那么就必须要确定唤醒、等待的顺序，所以每一个线程必须同时持有两个对象锁，才能继续执行。一个对象锁是prev，就是前一个线程所持有的对象锁。还有一个就是自身对象锁。主要的思想就是，为了控制执行的顺序，必须要先持有prev锁，也就前一个线程要释放自身对象锁，再去申请自身对象锁，两者兼备时打印，之后首先调用self.notify()释放自身对象锁，唤醒下一个等待线程，再调用prev.wait()释放prev对象锁，终止当前线程，等待循环结束后再次被唤醒。运行上述代码，可以发现三个线程循环打印ABC，共10次。程序运行的主要过程就是A线程最先运行，持有C,A对象锁，后释放A,C锁，唤醒B。线程B等待A锁，再申请B锁，后打印B，再释放B，A锁，唤醒C，线程C等待B锁，再申请C锁，后打印C，再释放C,B锁，唤醒A。看起来似乎没什么问题，但如果你仔细想一下，就会发现有问题，就是初始条件，三个线程按照A,B,C的顺序来启动，按照前面的思考，A唤醒B，B唤醒C，C再唤醒A。但是这种假设依赖于JVM中线程调度、执行的顺序。<br>  <strong>wait和sleep区别<br>共同点：</strong><br>\1. 他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。<br>\2. wait()和sleep()都可以通过interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出InterruptedException。<br>  如果线程A希望立即结束线程B，则可以对线程B对应的Thread实例调用interrupt方法。如果此刻线程B正在wait/sleep /join，则线程B会立刻抛出InterruptedException，在catch() {} 中直接return即可安全地结束线程。<br>  需要注意的是，InterruptedException是线程自己从内部抛出的，并不是interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出InterruptedException 。<br><strong>不同点：</strong><br>\1. Thread类的方法：sleep(),yield()等<br>  Object的方法：wait()和notify()等<br>\2. 每个对象都有一个锁来控制同步访问。Synchronized关键字可以和对象的锁交互，来实现线程的同步。<br>  sleep方法没有释放锁，而wait方法释放了锁，使得其他线程可以使用同步控制块或者方法。<br>\3. wait，notify和notifyAll只能在同步控制方法或者同步控制块里面使用，而sleep可以在任何地方使用<br>所以sleep()和wait()方法的最大区别是：<br>　　　　sleep()睡眠时，保持对象锁，仍然占有该锁；<br>　　　　而wait()睡眠时，释放对象锁。<br>　　但是wait()和sleep()都可以通过interrupt()方法打断线程的暂停状态，从而使线程立刻抛出InterruptedException（但不建议使用该方法）。<br><strong>sleep（）方法</strong><br>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CUP的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会;<br>　　 sleep()是Thread类的Static(静态)的方法；因此他不能改变对象的机锁，所以当在一个Synchronized块中调用Sleep()方法是，线程虽然休眠了，但是对象的机锁并木有被释放，其他线程无法访问这个对象（即使睡着也持有对象锁）。<br>　　在sleep()休眠时间期满后，该线程不一定会立即执行，这是因为其它线程可能正在运行而且没有被调度为放弃执行，除非此线程具有更高的优先级。<br><strong>wait（）方法</strong><br>wait()方法是Object类里的方法；当一个线程执行到wait()方法时，它就进入到一个和该对象相关的等待池中，同时失去（释放）了对象的机锁（暂时失去机锁，wait(long timeout)超时时间到后还需要返还对象锁）；其他线程可以访问；<br>　　wait()使用notify或者notifyAlll或者指定睡眠时间来唤醒当前等待池中的线程。<br>　　wiat()必须放在synchronized block中，否则会在program runtime时扔出”java.lang.IllegalMonitorStateException“异常。</p>
<h1 id="七、常见线程名词解释"><a href="#七、常见线程名词解释" class="headerlink" title="七、常见线程名词解释"></a>七、常见线程名词解释</h1><p>主线程：JVM调用程序main()所产生的线程。</p>
<p>当前线程：这个是容易混淆的概念。一般指通过Thread.currentThread()来获取的进程。</p>
<p>后台线程：指为其他线程提供服务的线程，也称为守护线程。JVM的垃圾回收线程就是一个后台线程。 <strong>用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束</strong></p>
<p>前台线程：是指接受后台线程服务的线程，其实前台后台线程是联系在一起，就像傀儡和幕后操纵者一样的关系。傀儡是前台线程、幕后操纵者是后台线程。由前台线程创建的线程默认也是前台线程。可以通过isDaemon()和setDaemon()方法来判断和设置一个线程是否为后台线程。</p>
<p>**线程类的一些常用方法： </p>
<p>　　sleep(): 强迫一个线程睡眠Ｎ毫秒。<br>　　isAlive(): 判断一个线程是否存活。<br>　　join(): 等待线程终止。<br>　　activeCount(): 程序中活跃的线程数。<br>　　enumerate(): 枚举程序中的线程。<br>  currentThread(): 得到当前线程。<br>　　isDaemon(): 一个线程是否为守护线程。<br>　　setDaemon(): 设置一个线程为守护线程。(用户线程和守护线程的区别在于，是否等待主线程依赖于主线程结束而结束)<br>　　setName(): 为线程设置一个名称。<br>　　wait(): 强迫一个线程等待。<br>　　notify(): 通知一个线程继续运行。<br>　　setPriority(): 设置一个线程的优先级。<br>**</p>
<h1 id="八、线程同步"><a href="#八、线程同步" class="headerlink" title="八、线程同步"></a>八、线程同步</h1><p>1、synchronized关键字的作用域有二种：<br>1）是某个对象实例内，synchronized aMethod(){}可以防止多个线程同时访问这个对象的synchronized方法（如果一个对象有多个synchronized方法，只要一个线程访问了其中的一个synchronized方法，其它线程不能同时访问这个对象中任何一个synchronized方法）。这时，不同的对象实例的synchronized方法是不相干扰的。也就是说，其它线程照样可以同时访问相同类的另一个对象实例中的synchronized方法；<br>2）是某个类的范围，synchronized static aStaticMethod{}防止多个线程同时访问这个类中的synchronized static 方法。它可以对类的所有对象实例起作用。</p>
<p>2、除了方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中，表示只对这个区块的资源实行互斥访问。用法是: synchronized(this){/<em>区块</em>/}，它的作用域是当前对象；</p>
<p>3、synchronized关键字是不能继承的，也就是说，基类的方法synchronized f(){} 在继承类中并不自动是synchronized f(){}，而是变成了f(){}。继承类需要你显式的指定它的某个方法为synchronized方法；</p>
<p>Java对多线程的支持与同步机制深受大家的喜爱，似乎看起来使用了synchronized关键字就可以轻松地解决多线程共享数据同步问题。到底如何？――还得对synchronized关键字的作用进行深入了解才可定论。</p>
<p>总的说来，synchronized关键字可以作为函数的修饰符，也可作为函数内的语句，也就是平时说的同步方法和同步语句块。如果再细的分类，synchronized可作用于instance变量、object reference（对象引用）、static函数和class literals(类名称字面常量)身上。</p>
<p>在进一步阐述之前，我们需要明确几点：</p>
<p>A．无论synchronized关键字加在方法上还是对象上，它取得的锁都是对象，而不是把一段代码或函数当作锁――而且同步方法很可能还会被其他线程的对象访问。</p>
<p>B．每个对象只有一个锁（lock）与之相关联。</p>
<p>C．实现同步是要很大的系统开销作为代价的，甚至可能造成死锁，所以尽量避免无谓的同步控制。</p>
<p>接着来讨论synchronized用到不同地方对代码产生的影响：</p>
<p>假设P1、P2是同一个类的不同对象，这个类中定义了以下几种情况的同步块或同步方法，P1、P2就都可以调用它们。</p>
<p>1． 把synchronized当作函数修饰符时，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Public <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">methodAAA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//….</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这也就是同步方法，那这时synchronized锁定的是哪个对象呢？它锁定的是调用这个同步方法对象。也就是说，当一个对象P1在不同的线程中执行这个同步方法时，它们之间会形成互斥，达到同步的效果。但是这个对象所属的Class所产生的另一对象P2却可以任意调用这个被加了synchronized关键字的方法。</p>
<p>上边的示例代码等同于如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAAA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>)      <span class="comment">//  (1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//…..</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p> (1)处的this指的是什么呢？它指的就是调用这个方法的对象，如P1。可见同步方法实质是将synchronized作用于object reference。――那个拿到了P1对象锁的线程，才可以调用P1的同步方法，而对P2而言，P1这个锁与它毫不相干，程序也可能在这种情形下摆脱同步机制的控制，造成数据混乱：（</p>
<p>2．同步块，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">(SomeObject so)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">              </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                     <span class="keyword">synchronized</span>(so)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">//…..</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这时，锁就是so这个对象，谁拿到这个锁谁就可以运行它所控制的那段代码。当有一个明确的对象作为锁时，就可以这样写程序，但当没有明确的对象作为锁，只是想让一段代码同步时，可以创建一个特殊的instance变量（它得是一个对象）来充当锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">byte</span>[] lock = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];  <span class="comment">// 特殊的instance变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">Public <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">synchronized</span>(lock) &#123; <span class="comment">//… &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//…..</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注：零长度的byte数组对象创建起来将比任何对象都经济――查看编译后的字节码：生成零长度的byte[]对象只需3条操作码，而Object lock = new Object()则需要7行操作码。</p>
<p>3．将synchronized作用于static 函数，示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Foo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodAAA</span><span class="params">()</span>   <span class="comment">// 同步的static 函数</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//….</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBBB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">synchronized</span>(Foo.class)   <span class="comment">//  class literal(类名称字面常量)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>



<p>  代码中的methodBBB()方法是把class literal作为锁的情况，它和同步的static函数产生的效果是一样的，取得的锁很特别，是当前调用这个方法的对象所属的类（Class，而不再是由这个Class产生的某个具体对象了）。</p>
<p>记得在《Effective Java》一书中看到过将 Foo.class和 P1.getClass()用于作同步锁还不一样，不能用P1.getClass()来达到锁这个Class的目的。P1指的是由Foo类产生的对象。</p>
<p>可以推断：如果一个类中定义了一个synchronized的static函数A，也定义了一个synchronized 的instance函数B，那么这个类的同一对象Obj在多线程中分别访问A和B两个方法时，不会构成同步，因为它们的锁都不一样。A方法的锁是Obj这个对象，而B的锁是Obj所属的那个Class。</p>
<p><strong>总结一下：</strong></p>
<p>1、线程同步的目的是为了保护多个线程反问一个资源时对资源的破坏。<br>2、线程同步方法是通过锁来实现，每个对象都有切仅有一个锁，这个锁与一个特定的对象关联，线程一旦获取了对象锁，其他访问该对象的线程就无法再访问该对象的其他非同步方法<br>3、对于静态同步方法，锁是针对这个类的，锁对象是该类的Class对象。静态和非静态方法的锁互不干预。一个线程获得锁，当在一个同步方法中访问另外对象上的同步方法时，会获取这两个对象锁。<br>4、对于同步，要时刻清醒在哪个对象上同步，这是关键。<br>5、编写线程安全的类，需要时刻注意对多个线程竞争访问资源的逻辑和安全做出正确的判断，对“原子”操作做出分析，并保证原子操作期间别的线程无法访问竞争资源。<br>6、当多个线程等待一个对象锁时，没有获取到锁的线程将发生阻塞。<br>7、死锁是线程间相互等待锁锁造成的，在实际中发生的概率非常的小。真让你写个死锁程序，不一定好使，呵呵。但是，一旦程序发生死锁，程序将死掉。</p>
<h1 id="九、线程数据传递"><a href="#九、线程数据传递" class="headerlink" title="九、线程数据传递"></a>九、线程数据传递</h1><p>在传统的同步开发模式下，当我们调用一个函数时，通过这个函数的参数将数据传入，并通过这个函数的返回值来返回最终的计算结果。但在多线程的异步开发模式下，数据的传递和返回和同步开发模式有很大的区别。由于线程的运行和结束是不可预料的，因此，在传递和返回数据时就无法象函数一样通过函数参数和return语句来返回数据。</p>
<p>9.1、通过构造方法传递数据<br>在创建线程时，必须要建立一个Thread类的或其子类的实例。因此，我们不难想到在调用start方法之前通过线程类的构造方法将数据传入线程。并将传入的数据使用类变量保存起来，以便线程使用(其实就是在run方法中使用)。下面的代码演示了如何通过构造方法来传递数据： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread1</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello &quot;</span> + name); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread thread = <span class="keyword">new</span> MyThread1(<span class="string">&quot;world&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread.start(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>由于这种方法是在创建线程对象的同时传递数据的，因此，在线程运行之前这些数据就就已经到位了，这样就不会造成数据在线程运行后才传入的现象。如果要传递更复杂的数据，可以使用集合、类等数据结构。使用构造方法来传递数据虽然比较安全，但如果要传递的数据比较多时，就会造成很多不便。由于Java没有默认参数，要想实现类似默认参数的效果，就得使用重载，这样不但使构造方法本身过于复杂，又会使构造方法在数量上大增。因此，要想避免这种情况，就得通过类方法或类变量来传递数据。 </p>
<p>9.2、通过变量和方法传递数据<br>向对象中传入数据一般有两次机会，第一次机会是在建立对象时通过构造方法将数据传入，另外一次机会就是在类中定义一系列的public的方法或变量（也可称之为字段）。然后在建立完对象后，通过对象实例逐个赋值。下面的代码是对MyThread1类的改版，使用了一个setName方法来设置 name变量： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name = name; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">&quot;hello &quot;</span> + name); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyThread2 myThread = <span class="keyword">new</span> MyThread2(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myThread.setName(<span class="string">&quot;world&quot;</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(myThread); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread.start(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>9.3、通过回调函数传递数据 </p>
<p>上面讨论的两种向线程中传递数据的方法是最常用的。但这两种方法都是main方法中主动将数据传入线程类的。这对于线程来说，是被动接收这些数据的。然而，在有些应用中需要在线程运行的过程中动态地获取数据，如在下面代码的run方法中产生了3个随机数，然后通过Work类的process方法求这三个随机数的和，并通过Data类的value将结果返回。从这个例子可以看出，在返回value之前，必须要得到三个随机数。也就是说，这个 value是无法事先就传入线程类的。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> mythread; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Data</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> value = <span class="number">0</span>; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Work</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Data data, Integer numbers)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n : numbers) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data.value += n; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Work work; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyThread3</span><span class="params">(Work work)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.work = work; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">java.util.Random random = <span class="keyword">new</span> java.util.Random(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Data data = <span class="keyword">new</span> Data(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n1 = random.nextInt(<span class="number">1000</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n2 = random.nextInt(<span class="number">2000</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n3 = random.nextInt(<span class="number">3000</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">work.process(data, n1, n2, n3); <span class="comment">// 使用回调函数 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">System.out.println(String.valueOf(n1) + <span class="string">&quot;+&quot;</span> + String.valueOf(n2) + <span class="string">&quot;+&quot;</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+ String.valueOf(n3) + <span class="string">&quot;=&quot;</span> + data.value); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Thread thread = <span class="keyword">new</span> MyThread3(<span class="keyword">new</span> Work()); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread.start(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>



<p> 好了，Java多线程的基础知识就讲到这里了，有兴趣研究多线程的推荐直接看java的源码，你将会得到很大的提升！</p>
<p>转载自<a href="http://blog.csdn.net/evankaka">http://blog.csdn.net/evankaka</a></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>头文件？JAVA-import</title>
    <url>/2020/10/28/%E5%A4%B4%E6%96%87%E4%BB%B6%EF%BC%9FJAVA-Bye-import/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Difference"><a href="#Difference" class="headerlink" title="Difference"></a>Difference</h1><p><strong>C/C++</strong> 之所以需要头文件（.h），有两个用处</p>
<p>​                    一.在开发编译的时候，在各个编译单元（Compile Unit）之间共享同样的定义；</p>
<p>​                    二.在发布程序库的时候，让使用者知道调用接口。</p>
<p>而 Java 程序的目标代码（就是最终发行的可执行程序），其实是中间代码（即 bytecode），它具有很强的自说明性。比如，你拿到一个 .class 文件，就能够知道它里面的类名、包含的属性、方法等，也就是说，所有的调用接口都是已知的（当然，也许你还需要一个文档——开发手册）。一个 .class 本身兼具了“目标代码”和“接口定义”的双重功能，所以不再需要一个单独的头文件。</p>
<p><strong>java</strong>中采用import的方式导入.class文件，.class文件中包含类的方法、属性等的定义，因此不在需要.h头文件</p>
<p>而c或c++编译后的二进制代码不包含函数和类的信息，为了在编译时进行函数格式合法性检查，采用.h的文件给出。</p>
<p>java提供给用户的是.class文件，虽然包含类的完整信息，但是对于开发者“不可读”，因此还需要以文档的方式提供类的声明。</p>
<h1 id="import"><a href="#import" class="headerlink" title="import"></a>import</h1><p>如果你希望使用Java包中的类，就必须先使用import语句导入。</p>
<p>import语句与C语言中的 #include 有些类似，语法为：<br>  import package1[.package2…].classname;<br>package 为包名，classname 为类名。例如：</p>
<p>\1. import java.util.Date; // 导入 java.util 包下的 Date 类</p>
<p>\2. import java.util.Scanner; // 导入 java.util 包下的 Scanner 类</p>
<p>\3. import javax.swing.<em>; // 导入 javax.swing 包下的所有类，</em> 表示所有类</p>
<p>注意：</p>
<p>· import 只能导入包所包含的类，而不能导入包。</p>
<p>· 为方便起见，我们一般不导入单独的类，而是导入包下所有的类，例如 import java.util.*;。</p>
<p>Java 编译器默认为所有的 Java 程序导入了 JDK 的 java.lang 包中所有的类（import java.lang.*;），其中定义了一些常用类，如 System、String、Object、Math 等，因此我们可以直接使用这些类而不必显式导入。但是使用其他类必须先导入。</p>
<p>前面讲到的”Hello World“程序使用了System.out.println(); 语句，System 类位于 java.lang 包，虽然我们没有显式导入这个包中的类，但是Java 编译器默认已经为我们导入了，否则程序会执行失败。</p>
<h2 id="Java类的搜索路径"><a href="#Java类的搜索路径" class="headerlink" title="*Java类的搜索路径*"></a><em><strong>*Java类的搜索路径*</strong></em></h2><p>Java程序运行时要导入相应的类，也就是加载 .class 文件的过程。</p>
<p>假设有如下的 import 语句：</p>
<ol>
<li>import p1.Test;</li>
</ol>
<p>该语句表明要导入 p1 包中的 Test 类。</p>
<p>安装JDK时，我们已经设置了环境变量 CLASSPATH 来指明类库的路径，它的值为 .;%JAVA_HOME%\lib，而 JAVA_HOME 又为 D:\Program Files\jdk1.7.0_71，所以 CLASSPATH 等价于 .;D:\Program Files\jdk1.7.0_71\lib。</p>
<p>Java 运行环境将依次到下面的路径寻找并载入字节码文件 Test.class：</p>
<p>· .p1\Test.class（”.”表示当前路径）</p>
<p>· D:\Program Files\jdk1.7.0_71\lib\p1\Test.class</p>
<p>如果在第一个路径下找到了所需的类文件，则停止搜索，否则继续搜索后面的路径，如果在所有的路径下都未能找到所需的类文件，则编译或运行出错。</p>
<p>你可以在CLASSPATH变量中增加搜索路径，例如 .;%JAVA_HOME%\lib;C:\javalib，那么你就可以将类文件放在 C:\javalib 目录下，Java运行环境一样会找到。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>家庭记账系统JAVA</title>
    <url>/2021/02/28/%E5%AE%B6%E5%BA%AD%E8%AE%B0%E8%B4%A6%E7%B3%BB%E7%BB%9FJAVA/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="家庭记账系统"><a href="#家庭记账系统" class="headerlink" title="家庭记账系统"></a>家庭记账系统</h1><p>1.源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FamilyAccount</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isFlag = <span class="keyword">true</span>;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">		String details=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="comment">//初始金额</span></span><br><span class="line">		<span class="keyword">int</span> balance = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(isFlag)&#123;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;---------家庭收支记账软件---------\n&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;           1.收支明细&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;           2.登记收入&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;           3.登记支出&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;           4.退    出\n&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;           请选择（1-4）&quot;</span>);</span><br><span class="line">            <span class="keyword">char</span> selection = Utility.readMenuSelection();</span><br><span class="line">            <span class="keyword">switch</span>(selection)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;           1.收支明细&quot;);</span></span><br><span class="line">					System.out.println(<span class="string">&quot;---------当前收支明细记录---------\n&quot;</span>);</span><br><span class="line">					System.out.println(<span class="string">&quot;收支\t账户金额\t收支金额\t说明\n&quot;</span>);</span><br><span class="line">					System.out.println(details);</span><br><span class="line">					System.out.println(<span class="string">&quot;----------------------------------\n&quot;</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;           2.登记收入&quot;);</span></span><br><span class="line">					System.out.println(<span class="string">&quot;本次收入金额：&quot;</span>);</span><br><span class="line">					<span class="keyword">int</span> addmoney = Utility.readNumber();</span><br><span class="line">					System.out.println(<span class="string">&quot;本次收入说明:&quot;</span>);</span><br><span class="line">					String addinfo =Utility.readString();</span><br><span class="line">					<span class="comment">//处理banlance</span></span><br><span class="line">					balance += addmoney;</span><br><span class="line">					</span><br><span class="line">					<span class="comment">//处理details</span></span><br><span class="line">					details += (<span class="string">&quot;收入\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + addmoney + <span class="string">&quot;\t\t&quot;</span> + addinfo + <span class="string">&quot;\n&quot;</span> );</span><br><span class="line">					</span><br><span class="line">					System.out.println(<span class="string">&quot;----------登记完成-----------\n&quot;</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;3&#x27;</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;           3.登记支出&quot;);</span></span><br><span class="line">					System.out.println(<span class="string">&quot;本次支出金额：&quot;</span>);</span><br><span class="line">					<span class="keyword">int</span> minusmoney = Utility.readNumber();</span><br><span class="line">					System.out.println(<span class="string">&quot;本次支出说明:&quot;</span>);</span><br><span class="line">					String minusinfo =Utility.readString();</span><br><span class="line">					<span class="comment">//处理banlance</span></span><br><span class="line">					<span class="keyword">if</span>(balance &gt;= minusmoney)&#123;</span><br><span class="line">						balance -= minusmoney;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">else</span>&#123;</span><br><span class="line">						System.out.println(<span class="string">&quot;支出超额，支付失败:&quot;</span>);</span><br><span class="line">					&#125;</span><br><span class="line">					</span><br><span class="line">					<span class="comment">//处理details</span></span><br><span class="line">					details += (<span class="string">&quot;支出\t&quot;</span> + balance + <span class="string">&quot;\t\t&quot;</span> + minusmoney + <span class="string">&quot;\t\t&quot;</span> + minusinfo + <span class="string">&quot;\n&quot;</span> );</span><br><span class="line">					</span><br><span class="line">					System.out.println(<span class="string">&quot;----------登记完成-----------\n&quot;</span>);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">                    <span class="comment">//System.out.println(&quot;           4.退    出&quot;);</span></span><br><span class="line">					System.out.println(<span class="string">&quot;确认是否退出(Y/N)&quot;</span>);</span><br><span class="line">					<span class="keyword">char</span> isExit = Utility.readConfirmSelection();</span><br><span class="line">					<span class="keyword">if</span>(isExit == <span class="string">&#x27;Y&#x27;</span>)&#123;</span><br><span class="line">						isFlag = <span class="keyword">false</span>;</span><br><span class="line">					&#125;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">Utility工具类：</span></span><br><span class="line"><span class="comment">将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utility</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">	用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readMenuSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>);</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c != <span class="string">&#x27;1&#x27;</span> &amp;&amp; c != <span class="string">&#x27;2&#x27;</span> &amp;&amp; c != <span class="string">&#x27;3&#x27;</span> &amp;&amp; c != <span class="string">&#x27;4&#x27;</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">readNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">4</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                n = Integer.parseInt(str);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;数字输入错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">readString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String str = readKeyBoard(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">char</span> <span class="title">readConfirmSelection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="keyword">for</span> (; ; ) &#123;</span><br><span class="line">            String str = readKeyBoard(<span class="number">1</span>).toUpperCase();</span><br><span class="line">            c = str.charAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;Y&#x27;</span> || c == <span class="string">&#x27;N&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;选择错误，请重新输入：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">readKeyBoard</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        String line = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNext()) &#123;</span><br><span class="line">            line = scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (line.length() &lt; <span class="number">1</span> || line.length() &gt; limit) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;输入长度（不大于&quot;</span> + limit + <span class="string">&quot;）错误，请重新输入：&quot;</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> line;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>序列化和反序列化</title>
    <url>/2020/12/03/%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h1><h1 id="对象的序列化"><a href="#对象的序列化" class="headerlink" title="对象的序列化"></a>对象的序列化</h1><ol>
<li><strong>对象序列化机制</strong>允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</li>
</ol>
<p> 序列化的好处在于可将任何实现了Serializable接口的对象转化为<strong>字节数据</strong>，使其在保存和传输时可被还原</p>
<p> 序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础</p>
<p> 如果需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p>
<p>   <strong>Serializable</strong></p>
<p>   Externalizable</p>
<ol start="2">
<li><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p>
<p><strong>private static final long</strong> <strong>serialVersionUID</strong><strong>;</strong></p>
<p>serialVersionUID用来表明类的不同版本间的兼容性</p>
<p>如果类没有显示定义这个静态变量，它的值是Java运行时环境根据类的内部细节自动生成的。若类的源代码作了修改，serialVersionUID 可能发生变化。故建议，显示声明</p>
</li>
</ol>
<p> 显示定义serialVersionUID的用途</p>
<p>   希望类的不同版本对序列化兼容，因此需确保类的不同版本具有相同的serialVersionUID</p>
<p>   不希望类的不同版本对序列化兼容，因此需确保类的不同版本具有不同的serialVersionUID</p>
<h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p><strong>使用对象流序列化对象</strong></p>
<p> 若某个类实现了 Serializable 接口，该类的对象就是可序列化的：</p>
<p>   <strong>创建一个</strong> <strong>ObjectOutputStream</strong></p>
<p>   <strong>调用</strong> <strong>ObjectOutputStream</strong> <strong>对象的</strong> <strong>writeObject(对象)</strong> <strong>方法输出可序列化对象。注意写出一次，操作</strong></p>
<p><strong>flush()</strong></p>
<p> 反序列化</p>
<p>   <strong>创建一个</strong> <strong>ObjectInputStream</strong></p>
<p>   <strong>调用</strong> <strong>readObject</strong>() <strong>方法读取流中的对象</strong></p>
<p> <strong>强调：</strong>如果某个类的字段不是基本数据类型或 String 类型，而是另一个引用类型，那么这个引用类型必须是可序列化的，否则拥有该类型的 Field 的类也不能序列化</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化与反序列化</span></span><br><span class="line"><span class="comment"> * 注意：对象的序列化与反序列化使用的类要严格一致，包名，类名，类机构等等所有都要一致</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> FadeAway</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test5</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//			Test5.testSerialize();</span></span><br><span class="line">			Test5.testDeserialize();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 对象的序列化</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSerialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">//定义对象的输出流，把对象的序列化之后的流放到指定的文件中</span></span><br><span class="line">		ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;D:/testdemo/demo/src/day13/tt9.txt&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		Person p = <span class="keyword">new</span> Person();</span><br><span class="line">		p.name = <span class="string">&quot;zhangsan&quot;</span>;</span><br><span class="line">		p.age = <span class="number">11</span>;</span><br><span class="line">		</span><br><span class="line">		out.writeObject(p);</span><br><span class="line">		out.flush();<span class="comment">//刷写数据到硬盘</span></span><br><span class="line">		</span><br><span class="line">		out.close();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 对象的反序列化</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDeserialize</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">//创建对象输入流对象，从指定的文件中把对象序列化后的流读取出来</span></span><br><span class="line">		ObjectInputStream in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;D:/testdemo/demo/src/day13/tt9.txt&quot;</span>));</span><br><span class="line">		</span><br><span class="line">		Object obj = in.readObject();</span><br><span class="line">		</span><br><span class="line">		Person p = (Person)obj;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//这个时候序列化与反序列化使用的类不是一个类分别是day13.Person和day13.test.Person</span></span><br><span class="line">		<span class="comment">//这个时候反序列化就有异常day13.Person cannot be cast to day13.test.Person</span></span><br><span class="line"><span class="comment">//		day13.test.Person p = (day13.test.Person)obj;</span></span><br><span class="line">		</span><br><span class="line">		System.out.println(p.name);</span><br><span class="line">		System.out.println(p.age);</span><br><span class="line">		</span><br><span class="line">		in.close();</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>复制构造函数（拷贝函数）</title>
    <url>/2020/06/30/%E6%8B%B7%E8%B4%9D%EF%BC%88%E5%A4%8D%E5%88%B6%EF%BC%89%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="复制构造函数"><a href="#复制构造函数" class="headerlink" title="复制构造函数"></a>复制构造函数</h1><h2 id="格式："><a href="#格式：" class="headerlink" title="格式："></a>格式：</h2><p><strong>类名（const 类名&amp; 引用对象名）</strong></p>
<p><strong>{  复制构造函数体 }</strong></p>
<h2 id="类对象的复制"><a href="#类对象的复制" class="headerlink" title="类对象的复制"></a>类对象的复制</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">data</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">   <span class="built_in">data</span>(<span class="keyword">int</span> y,<span class="keyword">int</span> m,<span class="keyword">int</span> d):<span class="built_in">year</span>(y),<span class="built_in">month</span>(m),<span class="built_in">day</span>(d)&#123;&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> year,month,day;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">data <span class="title">d1</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span></span><br><span class="line"><span class="function">    data <span class="title">d2</span><span class="params">(d1)</span><span class="comment">//等于data d2=d1;复制构造函数两种形式。</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="复制构造函数调用时机"><a href="#复制构造函数调用时机" class="headerlink" title="复制构造函数调用时机"></a>复制构造函数调用时机</h2><p>1.对象通过另一个对象进行初始化</p>
<p>2.对象以值传递的方式传入函数参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(data d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="function">data <span class="title">di</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line"> <span class="built_in">fun</span>(d1);<span class="comment">//调用时将实参dl对象完整的传递给形参d对象</span></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.对象以值传递的方式从函数返回</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">data <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function">data <span class="title">temp</span><span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">data <span class="title">d1</span><span class="params">(<span class="number">2016</span>,<span class="number">10</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    d1=<span class="built_in">fun</span>();<span class="comment">//temp是在函数fun中定义，结束程序时，</span></span><br><span class="line">             <span class="comment">//return temp,按temp复制一个新的对象，然后</span></span><br><span class="line">    		 <span class="comment">//赋值给dl;</span></span><br><span class="line">    retrurn <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>注意：以上复制构造函数由编译系统自动<strong>调用，编写</strong></p>
<h2 id="深浅复制"><a href="#深浅复制" class="headerlink" title="深浅复制"></a>深浅复制</h2><p><strong>浅拷贝</strong>（慎用）</p>
<p>​                概念：也称位拷贝，编译器只是将对象中的值采用基本类型值复制的方式拷贝过来，如果对象中管理资源，就会导致多个对象共享同一份资源（资源泄露），当一个对象销毁时就会将该资源释放，而此时另一些对象不知道该资源已经被释放，以为该资源还有效，所以当继续对资源进行操作时，就会发生访问违规。</p>
<p><strong>深拷贝</strong></p>
<p>​                概念： 在“深拷贝”的情况下，对于对象中动态成员，就不能仅仅简单地赋值了，而应该重新动态分配空间</p>
<p><strong>注：浅拷贝只是对指针的拷贝，拷贝后两个指针指向同一个内存空间，深拷贝不但对指针进行拷贝，而且对指针指向的内容进行拷贝，经深拷贝后的指针是指向两个不同地址的指针。</strong></p>
<p>即：动态分配空间地址冲突访问问题。</p>
<p>待补充！！！！</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>指针*与引用&amp;</title>
    <url>/2020/08/29/%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8%E8%A7%84%E5%88%99/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="指针-与引用-amp"><a href="#指针-与引用-amp" class="headerlink" title="指针*与引用&amp;"></a>指针*与引用&amp;</h1><p>1.指针和引用的定义和性质区别：</p>
<p>（1）指针：指针是一个变量，只不过这个变量存储的是一个地址，指向内存的一个存储单元；而引用跟原来</p>
<p>的变量实质上是同一个东西，只不过是原变量的一个别名而已。如：</p>
<p>int a=1;int *p=&a;</p>
<p>int a=1;int &amp;b=a;</p>
<p>上面定义了一个整形变量和一个指针变量p，该指针变量指向a的存储单元，即p的值是a存储单元的地址。</p>
<p>而下面2句定义了一个整形变量a和这个整形a的引用b，事实上a和b是同一个东西，在内存占有同一个存储单</p>
<p>元。</p>
<p>(2)引用不可以为空，当被创建的时候，必须初始化，而指针可以是空值(NULL)，可以在任何时候被初始化。</p>
<p>(3)可以有const指针，但是没有const引用；</p>
<p>(4)指针可以有多级，但是引用只能是一级（int **p；合法 而 int &amp;&amp;a是不合法的）</p>
<p>(5)指针的值可以为空，但是引用的值不能为NULL，并且引用在定义的时候<strong>必须初始化；</strong></p>
<p>(6)指针的值在初始化后可以改变，即指向其它的存储单元，而引用在进行初始化后就<strong>不会再改变</strong>了。</p>
<p>(7)”sizeof引用”得到的是所指向的<strong>变量(对象)的大小</strong>，而”sizeof指针”得到的是<strong>指针本身的大小</strong>；</p>
<p>(8)指针和引用的自增(++)运算意义不一样；</p>
<p>(9)如果返回<strong>动态内存分配的对象或者内存，必须使用指针</strong>，引用可能引起内存泄漏；</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>如下示例，要求在 func( p)中，m_value值和 参数 p 指代的实际内容值相同；<br>且之后 m_value值的改变，会影响 p 的实际内容；</p>
<h2 id="仅一级指针实现"><a href="#仅一级指针实现" class="headerlink" title="仅一级指针实现"></a>仅一级指针实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一级指针参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> * p,  <span class="keyword">int</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_value = dest;</span><br><span class="line">	*p = m_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> *pn = &amp;n;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt; endl; <span class="comment">//初始值</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">func</span>(pn, <span class="number">77</span>);</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//经过 func 函数后</span></span><br><span class="line"></span><br><span class="line">	m_value = <span class="number">88</span>;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//改变 m_value 后</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1234567891011121314151617181920212223</span></span><br></pre></td></tr></table></figure>

<p>程序输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">77</span><br><span class="line">77</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>发现 后面改变了 <code>m_value</code> 值 ，并不影响 <code>*pn</code>。 这不合要求</p>
<h2 id="二级指针实现"><a href="#二级指针实现" class="headerlink" title="二级指针实现"></a>二级指针实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二级指针参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> ** p, <span class="keyword">int</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_value = dest;</span><br><span class="line">	*p = &amp;m_value; <span class="comment">//*p 表示一级指针 ，指向 m_value 内容的地址</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> *pn = &amp;n;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt; endl; <span class="comment">//初始值</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">func</span>(&amp;pn, <span class="number">77</span>); <span class="comment">//pn 是指针变量， &amp;pn 就是二级指针</span></span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//经过 func 函数后</span></span><br><span class="line">	</span><br><span class="line">	m_value = <span class="number">88</span>;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//改变 m_value 后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure>

<p>输出:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">77</span><br><span class="line">88</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>满足要求。</p>
<h2 id="指针引用实现"><a href="#指针引用实现" class="headerlink" title="指针引用实现"></a>指针引用实现</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m_value = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针引用参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> *&amp; p, <span class="keyword">int</span> dest)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	m_value = dest;</span><br><span class="line">	p = &amp;m_value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">int</span> *pn = &amp;n;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt; endl; <span class="comment">//初始值</span></span><br><span class="line">	</span><br><span class="line">	<span class="built_in">func</span>(pn, <span class="number">77</span>); <span class="comment">//传递一级指针就以</span></span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//经过 func 函数后</span></span><br><span class="line">	</span><br><span class="line">	m_value = <span class="number">88</span>;</span><br><span class="line">	cout &lt;&lt; *pn &lt;&lt;endl; <span class="comment">//改变 m_value 后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">77</span><br><span class="line">88</span><br><span class="line">123</span><br></pre></td></tr></table></figure>

<p>满足要求。</p>
<h2 id="In-addtion"><a href="#In-addtion" class="headerlink" title="In addtion"></a>In addtion</h2><h3 id="关于int-a-int-amp-a-int-amp-a-int-amp-a-int-amp-a"><a href="#关于int-a-int-amp-a-int-amp-a-int-amp-a-int-amp-a" class="headerlink" title="关于int *a; int &amp;a; int &amp; *a; int * &amp;a; (int*) &amp;a"></a>关于<code>int *a; int &amp;a; int &amp; *a; int * &amp;a; (int*) &amp;a</code></h3><p>上述的四条语句，前面两个很好理解，而后面两个，大部分C＋＋初学者都会比较困惑，今天我也是查阅了一些资料以后才恍然大悟。下面具体来说明一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">int i;</span><br><span class="line"></span><br><span class="line">int *a = &amp;i;//这里a是一个指针，它指向变量i</span><br><span class="line"></span><br><span class="line">int &amp;b = i;//这里b是一个引用，它是变量i的引用，引用是什么？它的本质是什么？下面会具体讲述</span><br><span class="line"></span><br><span class="line">int * &amp;c = a;//这里c是一个引用，它是指针a的引用</span><br><span class="line"></span><br><span class="line">int &amp; *d;//这里d是一个指针，它指向引用，但引用不是实体，所以这是错误的</span><br><span class="line">123456789</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>(int*) &amp;a</code>为取a的地址，然后进行强制类型转换，转为int类型的指针。</p>
</blockquote>
<h4 id="int-amp-a和int-amp-a"><a href="#int-amp-a和int-amp-a" class="headerlink" title="int * &amp;a和int &amp; *a"></a><code>int * &amp;a</code>和<code>int &amp; *a</code></h4><p>我在写这两句语句时，在<code>int</code> 和<code>*(&amp;)</code>间空了一格，而后面的<code>&amp;(*)</code>紧跟<code>a</code>。原因是：分析此类语句时，最简单的办法就是从<strong>右往左读，离变量名最近的符号对其类型有最直接的影</strong>响，即先看<code>a</code>前紧跟的是什么，它决定了<code>a</code>的类型。例如，对于<code>int &amp; *a</code>，此处是<code>*</code>，表示其首先是个指针，指针的类型是一个int型引用。而<code>int</code>后的一个空格是为了防止<code>int *a, b;//a是指针，而b不是</code>。</p>
<p>假设有一个 int 类型的变量 <code>a</code>，<code>pa</code>是指向它的指针，那么<code>*&amp;a</code>和<code>&amp;*pa</code>分别是什么意思呢？</p>
<p><code>*&amp;a</code>可以理解为<code>*(&amp;a)</code>，<code>&amp;a</code>表示取变量 <code>a</code> 的地址（等价于 <code>pa</code>），<code>*(&amp;a)</code>表示取这个地址上的数据（等价于 <code>*pa</code>），绕来绕去，又回到了原点，<code>*&amp;a</code>仍然等价于 a。</p>
<p><code>&amp;*pa</code>可以理解为<code>&amp;(*pa)</code>，<code>*pa</code>表示取得 <code>pa</code> 指向的数据（等价于 <code>a</code>），<code>&amp;(*pa)</code>表示数据的地址（等价于 <code>&amp;a</code>），所以<code>&amp;*pa</code>等价于 <code>pa</code>。</p>
<h4 id="int-a"><a href="#int-a" class="headerlink" title="int **a;"></a><code>int **a;</code></h4><p>它的功能和<code>int *&amp;a</code>一样，两者生成的二进制代码一样。这再一次说明了引用就是指针。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构答辩</title>
    <url>/2020/10/28/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%AD%94%E8%BE%A9/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="基数排序临时数组bucket"><a href="#基数排序临时数组bucket" class="headerlink" title="基数排序临时数组bucket"></a>基数排序临时数组bucket</h1><h2 id="课题要求"><a href="#课题要求" class="headerlink" title="课题要求"></a>课题要求</h2><p>​    随机生成100000个10000以内的随机数并使用基数排序记录排序时间</p>
<h2 id="代码展示"><a href="#代码展示" class="headerlink" title="代码展示"></a>代码展示</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[N],<span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      <span class="keyword">int</span> temp[N]; <span class="comment">//临时数组</span></span><br><span class="line">      <span class="keyword">int</span> i, bucket[<span class="number">10</span>];</span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">            bucket[i] = <span class="number">0</span>;<span class="comment">//初始化桶（见本站基数排序Radix_sort）</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">          bucket[ (a[i]/k)%<span class="number">10</span> ]++;<span class="comment">//a[i]/k)%10用于取每个数的各个位数</span></span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">          bucket[i] += bucket[i - <span class="number">1</span>];<span class="comment">//计算所有桶，用于找到其处于临时数组的位置</span></span><br><span class="line">      <span class="keyword">for</span> (i = N - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)<span class="comment">//逆序输出，与排序方式有关（先进先出）</span></span><br><span class="line">      &#123;</span><br><span class="line">          temp[bucket[ (a[i]/k)%<span class="number">10</span> ] - <span class="number">1</span>] = a[i];<span class="comment">//数组从零开始所以减一</span></span><br><span class="line">          bucket[ (a[i]/k)%<span class="number">10</span> ]--;<span class="comment">//出一减一</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt;N; i++)</span><br><span class="line">         a[i] = temp[i];<span class="comment">//将临时数组放回原始数组（进行5次）</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">radix_sort</span><span class="params">(<span class="keyword">int</span> a[N])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=<span class="number">10000</span>;k*= <span class="number">10</span>)<span class="comment">//跟据10000以内可得循环5次</span></span><br><span class="line">		sort(a,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a[N],i;</span><br><span class="line">	<span class="keyword">clock_t</span> x,y;</span><br><span class="line">	srand(time(<span class="number">0</span>));<span class="comment">//以当前时间随机生成整数</span></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		a[i]=rand()%<span class="number">10000</span>;<span class="comment">//取余控制随机数在0~10000以内</span></span><br><span class="line">	x=clock();</span><br><span class="line">	radix_sort(a);<span class="comment">//基数排序（稳定排序直到循环结束才能完成排序）</span></span><br><span class="line">	y=clock();</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,a[i]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n运行时间：%f ms\n&quot;</span>,(<span class="keyword">float</span>)(y-x));<span class="comment">//clock_t类强制转换为float计算时间差</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动图理解"><a href="#动图理解" class="headerlink" title="动图理解"></a>动图理解</h2><p><img src="https://i.loli.net/2020/10/16/z5u4SLOYVcRfHlm.gif" alt="基数排序gif"></p>
]]></content>
      <categories>
        <category>答辩材料</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>暴力法</title>
    <url>/2021/05/28/%E6%9A%B4%E5%8A%9B%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="暴力法"><a href="#暴力法" class="headerlink" title="暴力法"></a>暴力法</h1><p><strong>暴力法</strong>：根据问题的描述和所涉及的概念，简单直接的解决问题的方法。</p>
<p>暴力法是可以用来解决广阔领域的各种问题，它也可能也是唯一一种几乎什么问题都能解决的一般性方法。在输入数据的规模并不巨大的情况下，我们可以使用暴力法来解决一些问题。同样，暴力法也是用来衡量一个算法高效与否的基准。</p>
<p>冒泡排序和选择排序就是两个很好的例子，它们就是从直观上出发，根据排序的定义做出的直观算法</p>
<h5 id="最近对问题"><a href="#最近对问题" class="headerlink" title="最近对问题"></a>最近对问题</h5><p>最近对问题并不复杂，它要求在包含有n个点的集合S中，找出距离最近的两个点。这就是最近对问题。暴力法就是对每一个点之间的距离都进行求解，然后求出最小值。具体实现如下。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Point</span><span class="params">(complex&lt;<span class="keyword">int</span>&gt; *num,<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	complex&lt;<span class="keyword">int</span>&gt; n[<span class="number">5</span>];		<span class="comment">//这里用复数类型代替点</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; n[i];</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">Point</span>(n, <span class="number">5</span>) &lt;&lt; endl;;</span><br><span class="line">	<span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Point</span><span class="params">(complex&lt;<span class="keyword">int</span>&gt; *num,<span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> min = INT_MAX;</span><br><span class="line">	<span class="keyword">double</span> temp;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; size; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			temp = <span class="built_in">pow</span>((num[j].<span class="built_in">real</span>() - num[i].<span class="built_in">real</span>()), <span class="number">2</span>) + <span class="built_in">pow</span>(num[j].<span class="built_in">imag</span>() - num[i].<span class="built_in">imag</span>(), <span class="number">2</span>);</span><br><span class="line">			<span class="keyword">if</span> (min &gt; temp)</span><br><span class="line">			&#123;</span><br><span class="line">				min = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">sqrt</span>(min);</span><br><span class="line"></span><br><span class="line">&#125;<span class="comment">//时间复杂度是O(n²)</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>构造函数与析构函数（重载）</title>
    <url>/2020/06/30/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0%EF%BC%88%E9%87%8D%E8%BD%BD%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="构造函数（可重载）"><a href="#构造函数（可重载）" class="headerlink" title="构造函数（可重载）"></a>构造函数（可重载）</h1><h1 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a>重载规则</h1><p>1 函数名相同。<br>2 参数个数不同,参数的类型不同,参数<strong>顺序</strong>不同,均可构成重载。<br>3 返回值类型不同则不可以构成重载</p>
<h2 id="无参构造"><a href="#无参构造" class="headerlink" title="无参构造"></a>无参构造</h2><h3 id="（系统默认构造函数）"><a href="#（系统默认构造函数）" class="headerlink" title="（系统默认构造函数）"></a>（系统默认构造函数）</h3><p>类名（）</p>
<p>{ 函数体 }</p>
<p>注意：一旦定义了构造函数，默认构造函数就不存在了！</p>
<h2 id="含参构造"><a href="#含参构造" class="headerlink" title="含参构造"></a>含参构造</h2><p>类名（形式参数列表）</p>
<p>{ 函数体 }</p>
<h2 id="参数初始化表的特殊形式"><a href="#参数初始化表的特殊形式" class="headerlink" title="参数初始化表的特殊形式"></a>参数初始化表的特殊形式</h2><p><em><strong>类名（参数）：数据成员名1（初始化值），数据成员名2（）…</strong></em></p>
<p><em><strong>{ 函数体 }</strong></em></p>
<p>说明：如果数据成员是数组，则应当在构造函数的函数体中用语句对其赋值，而不是在<strong>参数初始化表</strong>中对其初始化。如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Class Student</span><br><span class="line"></span><br><span class="line">&#123;<span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Student</span>(<span class="keyword">int</span> n,chars,nam[]):<span class="built_in">num</span>(n),<span class="built_in">sex</span>(s)</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="built_in">strcpy</span>(name,nam);&#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> sex;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h2 id="构造函数默认值"><a href="#构造函数默认值" class="headerlink" title="构造函数默认值"></a>构造函数默认值</h2><p>C++函数的默认参数指的是在函数声明或者定义时给形式参数指定默认值，，从而在调用参数时可以少写参数，少掉的参数用默认值代替。</p>
<p>注意：</p>
<p>1、函数的默认参数只能指定一次，所以一般是在声明中；</p>
<p>2、声明中的任何一个默认参数右边的参数都必须全部是默认参数，也就是默认参数必须从<strong>最右边开始连续指定</strong>；</p>
<p>3、调用时任何一个给出值的参数左边的参数都必须全部给出具体值，也就是从左边开始连续给出参数值，不能隔空跳过。</p>
<h3 id="实列"><a href="#实列" class="headerlink" title="实列"></a>实列</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Box</span>(<span class="keyword">int</span> h=<span class="number">2</span>,<span class="keyword">int</span> w=<span class="number">2</span>,<span class="keyword">int</span> l=<span class="number">2</span>);<span class="comment">//在声明构造函数时指定默认参数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">volume</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> height,width,length;</span><br><span class="line">&#125;;</span><br><span class="line">Box::<span class="built_in">Box</span>(<span class="keyword">int</span> h,<span class="keyword">int</span> w,<span class="keyword">int</span> len)&#123;<span class="comment">//在定义函数时可以不指定默认参数</span></span><br><span class="line">    height=h;</span><br><span class="line">    width=w;</span><br><span class="line">    length=len;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Box::volume</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> height*width*length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Box <span class="title">box1</span><span class="params">(<span class="number">1</span>)</span></span>;<span class="comment">//不指定第2、3个实参</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;box1&#x27;s volume: &quot;</span>&lt;&lt;box1.<span class="built_in">volume</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="function">Box <span class="title">box2</span><span class="params">(<span class="number">1</span>,<span class="number">3</span>)</span></span>;<span class="comment">// 不指定第3个实参</span></span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;box2&#x27;s volume: &quot;</span>&lt;&lt;box2.<span class="built_in">volume</span>()&lt;&lt;endl;</span><br><span class="line">    Box box3;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;box3&#x27;s volume:&quot;</span>&lt;&lt;box3.<span class="built_in">volume</span>()&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h1 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><p><strong>~类名（）</strong></p>
<p><strong>{ 函数体 }</strong></p>
<p>①析构函数与类名同名<br>②析构函数无参（不可重载</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>   对象的释放顺序严格与定义顺序相反</p>
<p>（即析构函数的调用顺序严格与构造函数相反）</p>
<h3 id="可以理解为栈（先入后出）"><a href="#可以理解为栈（先入后出）" class="headerlink" title="可以理解为栈（先入后出）"></a>可以理解为栈（先入后出）</h3><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>销毁动态分配的资源</p>
<h3 id="默认析构函数"><a href="#默认析构函数" class="headerlink" title="默认析构函数"></a>默认析构函数</h3><p><strong>~类名（）</strong></p>
<p><strong>{    }</strong></p>
<p>注意：不能释放由new分配的空间，显式使用delete运算符来释放</p>
<p>构造函数使用new分配的内存</p>
<p>局部对象：在函数内用类名定义的对象<br>全局对象：在函数外用类名定义的对象<br>i：局部对象在函数运行完成时要释放<br>全局对象在整个程序执行完成后释放<br>ii：全局对象在编译阶段即分配单元</p>
<p>示例：类内new在类内delete</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myclass</span>&#123;</span></span><br><span class="line">	<span class="keyword">private</span>:</span><br><span class="line">		<span class="keyword">int</span> *px;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Myclass</span>()&#123;</span><br><span class="line">			px=<span class="keyword">new</span> <span class="built_in"><span class="keyword">int</span></span>(<span class="number">3</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">		</span>&#123;</span><br><span class="line">			cout&lt;&lt;*px&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">		~<span class="built_in">Myclass</span>()</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">delete</span> px;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Myclass my;</span><br><span class="line">	my.<span class="built_in">Print</span>();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>补充：构造函数==构造器</strong></p>
<p>​            <strong>析构函数==析构器</strong></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>泛型理解1</title>
    <url>/2020/06/18/%E6%B3%9B%E5%9E%8B%E7%90%86%E8%A7%A31/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="泛型：将类型参数化"><a href="#泛型：将类型参数化" class="headerlink" title="泛型：将类型参数化"></a>泛型：将类型参数化</h1><h2 id="普通栈"><a href="#普通栈" class="headerlink" title="普通栈"></a>普通栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">     <span class="keyword">private</span> <span class="keyword">int</span>[] m_item;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(<span class="keyword">int</span> item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">     </span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">this</span>.m_item = <span class="keyword">new</span> <span class="keyword">int</span>[i];</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="数据类型Object来实现这个栈"><a href="#数据类型Object来实现这个栈" class="headerlink" title="数据类型Object来实现这个栈"></a>数据类型Object来实现这个栈</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> object[] m_item;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> object <span class="title">Pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(object item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.m_item = <span class="keyword">new</span>[i];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用泛型"><a href="#使用泛型" class="headerlink" title="使用泛型"></a>使用泛型</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下面是用泛型来重写上面的栈，用一个通用的数据类型T来作为一个占位符，等待在实例化时用一个实际的类型来代替。让我们来看看泛型的威力：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stack</span>&lt;</span>T&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T[] m_item;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">Pop</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Push</span><span class="params">(T item)</span></span>&#123;...&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Stack</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">         <span class="keyword">this</span>.m_item = <span class="keyword">new</span> T[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类的写法不变，只是引入了通用数据类型T就可以适用于任何数据类型，并且类型安全的。这个类的调用方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化只能保存int类型的类</span></span><br><span class="line"></span><br><span class="line">Stack&lt;<span class="keyword">int</span>&gt; a = <span class="keyword">new</span> Stack&lt;<span class="keyword">int</span>&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">   a.<span class="built_in">Push</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">   a.<span class="built_in">Push</span>(<span class="string">&quot;8888&quot;</span>);<span class="comment">//这行编译不通过，因为类a只接收int类型的数据</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> x = a.<span class="built_in">Pop</span>();</span><br><span class="line"></span><br><span class="line">Stack&lt;String&gt; b = <span class="keyword">new</span> Stack&lt;String&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    b.<span class="built_in">Push</span>(<span class="number">10</span>);<span class="comment">//这行编译不通过，因为类b只接收String类型的数据</span></span><br><span class="line"></span><br><span class="line">   String y = b.<span class="built_in">Pop</span>();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>简易网络通信框</title>
    <url>/2020/12/16/%E7%AE%80%E6%98%93%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简易网络通信框"><a href="#简易网络通信框" class="headerlink" title="简易网络通信框"></a>简易网络通信框</h1><p>实现分为七部分</p>
<p><img src="https://i.loli.net/2021/01/26/txYzGRQjP67UHK1.png"></p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line">    <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientInputThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientInputThread</span> <span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">            socket = s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                InputStream is =socket.getInputStream();</span><br><span class="line">                <span class="keyword">byte</span>[]buffer=<span class="keyword">new</span>  <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                <span class="keyword">int</span> length;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                    length = is.read();</span><br><span class="line">                    String str = <span class="keyword">new</span> String(buffer,<span class="number">0</span>,length);</span><br><span class="line">                    System.out.println(str);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2.</span></span><br><span class="line">   <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientOutputThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ClientOutputThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        socket = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is=socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[]buffer=<span class="keyword">new</span>  <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                length = is.read(buffer);</span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, length);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3.</span></span><br><span class="line">    <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">new</span> Socket(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> ClientInputThread(socket).start();</span><br><span class="line">        <span class="keyword">new</span> ClientOutputThread(socket).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">4.</span></span><br><span class="line">    <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket serverSocket=<span class="keyword">new</span> ServerSocket(<span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        Socket socket=serverSocket.accept();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> ServerInputThread(socket).start();</span><br><span class="line">        <span class="keyword">new</span> ServerOutputThread(socket).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5.</span></span><br><span class="line">    <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerInputThread</span>  <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerInputThread</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        socket = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream is=socket.getInputStream();</span><br><span class="line">            <span class="keyword">byte</span>[]buffer=<span class="keyword">new</span>  <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> length;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">                length = is.read(buffer);</span><br><span class="line">                String str = <span class="keyword">new</span> String(buffer, <span class="number">0</span>, length);</span><br><span class="line">                System.out.println(str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">6.</span></span><br><span class="line">    <span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerOutputThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Socket socket;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerOutputThread</span><span class="params">(Socket s)</span></span>&#123;</span><br><span class="line">        socket=s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            OutputStream os=socket.getOutputStream();</span><br><span class="line">            BufferedReader br=<span class="keyword">new</span> BufferedReader(</span><br><span class="line">                    <span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                String line=br.readLine();<span class="comment">//从键盘读入一行</span></span><br><span class="line">                os.write(line.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">6.</span></span><br><span class="line"><span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">socket编程：让开发网络更简单。屏蔽掉网络协议的复杂性</span></span><br><span class="line"><span class="comment">socket 被翻译为“套接字“编程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">服务器端：</span></span><br><span class="line"><span class="comment">    1.需要建立一个ServerSocket对象</span></span><br><span class="line"><span class="comment">    2.在该对象上进行监听客户端连接请求。-----accept</span></span><br><span class="line"><span class="comment">    3.由2返回一个连接到该客户端的客户套接字</span></span><br><span class="line"><span class="comment">    4.可以获得套接字对应的输入输出流</span></span><br><span class="line"><span class="comment">    5.进行输入输出</span></span><br><span class="line"><span class="comment">    6.关闭流，关闭套接字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">客户端：</span></span><br><span class="line"><span class="comment">    需要：</span></span><br><span class="line"><span class="comment">    1.利用Socket类，创建一个连接到服务器端（IP:port）的套接字:socket</span></span><br><span class="line"><span class="comment">    2.通过Socket得到该Socket对应的输入输出流</span></span><br><span class="line"><span class="comment">    3.进行输入输出</span></span><br><span class="line"><span class="comment">    4.关闭流，关闭套接字符</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">java.linux.c#支持几乎一样</span></span><br><span class="line"><span class="comment">端点，至少有两个</span></span><br><span class="line"><span class="comment">1.server 提供数据和服务端点</span></span><br><span class="line"><span class="comment">2.client 请求数据的客户端</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">B/S 或者 C/S构架做系统，都会端点区分</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">客户端发出数据请求，服务端响应应该请求</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">网址+端口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Story</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello console &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>简易计算器</title>
    <url>/2020/12/16/%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="简易计算器"><a href="#简易计算器" class="headerlink" title="简易计算器"></a>简易计算器</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.cduestc.fire;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line">        <span class="keyword">import</span> java.awt.*;</span><br><span class="line">        <span class="keyword">import</span> java.awt.event.*;</span><br><span class="line">        <span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line">        <span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Story</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">          MyFrame myFrame = <span class="keyword">new</span> MyFrame();</span><br><span class="line">          myFrame.setTitle(<span class="string">&quot;简易计算器--单次计算完成请点击AC继续下一次运算&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TextField textField = <span class="keyword">new</span> TextField();</span><br><span class="line"></span><br><span class="line">    Panel panel1 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    Button button1 = <span class="keyword">new</span> Button(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    Button button2 = <span class="keyword">new</span> Button(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    Button button3 = <span class="keyword">new</span> Button(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    Button buttonadd = <span class="keyword">new</span> Button(<span class="string">&quot;+&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Panel panel2 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    Button button4 = <span class="keyword">new</span> Button(<span class="string">&quot;4&quot;</span>);</span><br><span class="line">    Button button5 = <span class="keyword">new</span> Button(<span class="string">&quot;5&quot;</span>);</span><br><span class="line">    Button button6 = <span class="keyword">new</span> Button(<span class="string">&quot;6&quot;</span>);</span><br><span class="line">    Button buttonsubtract = <span class="keyword">new</span> Button(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Panel panel3 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    Button button7 = <span class="keyword">new</span> Button(<span class="string">&quot;7&quot;</span>);</span><br><span class="line">    Button button8 = <span class="keyword">new</span> Button(<span class="string">&quot;8&quot;</span>);</span><br><span class="line">    Button button9 = <span class="keyword">new</span> Button(<span class="string">&quot;9&quot;</span>);</span><br><span class="line">    Button buttonmultiply = <span class="keyword">new</span> Button(<span class="string">&quot;x&quot;</span>);</span><br><span class="line"></span><br><span class="line">    Panel panel4 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    Button button0 = <span class="keyword">new</span> Button(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">    Button button_equal = <span class="keyword">new</span> Button(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">    Button buttondivide = <span class="keyword">new</span> Button(<span class="string">&quot;÷&quot;</span>);</span><br><span class="line">    Button buttonpoint = <span class="keyword">new</span> Button(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    Panel panel5 = <span class="keyword">new</span> Panel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">4</span>));</span><br><span class="line">    JButton button_eliminate = <span class="keyword">new</span> JButton(<span class="string">&quot;AC&quot;</span>);</span><br><span class="line">    Button buttonremainder = <span class="keyword">new</span> Button(<span class="string">&quot;%&quot;</span>);</span><br><span class="line">    Button buttonclose = <span class="keyword">new</span> Button(<span class="string">&quot;close&quot;</span>);</span><br><span class="line">    Button buttonsqure = <span class="keyword">new</span> Button(<span class="string">&quot;²&quot;</span>);</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">MyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JFrame jf=<span class="keyword">new</span> JFrame(<span class="string">&quot;简易计算器&quot;</span>);</span><br><span class="line">        setBounds(<span class="number">300</span>, <span class="number">0</span>, <span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">        button_eliminate.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">100</span>));</span><br><span class="line">        buttonadd.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonsubtract.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonmultiply.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttondivide.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        button_equal.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonpoint.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonremainder.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonclose.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        buttonsqure.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        textField.setFont(<span class="keyword">new</span> java.awt.Font(</span><br><span class="line">                <span class="string">&quot;SimSun&quot;</span>, <span class="number">1</span>, <span class="number">50</span>));</span><br><span class="line">        setLayout(<span class="keyword">new</span> GridLayout(<span class="number">6</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        add(textField);</span><br><span class="line">        panel1.add(buttonadd);</span><br><span class="line">        panel1.add(button1);</span><br><span class="line">        panel1.add(button2);</span><br><span class="line">        panel1.add(button3);</span><br><span class="line"></span><br><span class="line">        add(panel1);</span><br><span class="line">        panel2.add(buttonsubtract);</span><br><span class="line">        panel2.add(button4);</span><br><span class="line">        panel2.add(button5);</span><br><span class="line">        panel2.add(button6);</span><br><span class="line"></span><br><span class="line">        add(panel2);</span><br><span class="line">        panel3.add(buttonmultiply);</span><br><span class="line">        panel3.add(button7);</span><br><span class="line">        panel3.add(button8);</span><br><span class="line">        panel3.add(button9);</span><br><span class="line"></span><br><span class="line">        add(panel3);</span><br><span class="line">        panel4.add(buttondivide);</span><br><span class="line">        panel4.add(button_equal);</span><br><span class="line">        panel4.add(button0);</span><br><span class="line"></span><br><span class="line">        panel4.add(buttonpoint);</span><br><span class="line">        add(panel4);</span><br><span class="line">        panel5.add(buttonremainder);</span><br><span class="line">        panel5.add(buttonsqure);</span><br><span class="line">        panel5.add(buttonclose);</span><br><span class="line">        panel5.add(button_eliminate);</span><br><span class="line">        add(panel5);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Button&gt; arrayList=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Collections.addAll(arrayList,button0,button1,button2,button3,button4,button5,button6,button7,button8,button9,button_equal,buttonadd,buttonsubtract,buttonmultiply,buttondivide,buttonpoint,buttonremainder,buttonclose,buttonsqure);</span><br><span class="line">        button_eliminate.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">for</span>(Button button:arrayList)&#123;</span><br><span class="line">            button.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        addWindowListener(<span class="keyword">new</span> WindowAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    String str1=<span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">        String str = e.getActionCommand();</span><br><span class="line">        <span class="keyword">if</span>(str.equals(<span class="string">&quot;=&quot;</span>))&#123;</span><br><span class="line">            String text=textField.getText();</span><br><span class="line">            String[] text1;</span><br><span class="line">            <span class="keyword">float</span> c;</span><br><span class="line">            <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;\\+&quot;</span>)).length == <span class="number">2</span>) &#123;</span><br><span class="line">                c = Float.parseFloat(text1[<span class="number">0</span>]) + Float.parseFloat(text1[<span class="number">1</span>]);</span><br><span class="line">                textField.setText(String.valueOf(c));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;-&quot;</span>)).length == <span class="number">2</span>) &#123;</span><br><span class="line"></span><br><span class="line">                c = Float.parseFloat(text1[<span class="number">0</span>]) - Float.parseFloat(text1[<span class="number">1</span>]);</span><br><span class="line">                textField.setText(String.valueOf(c));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;x&quot;</span>)).length == <span class="number">2</span>) &#123;</span><br><span class="line">                c = Float.parseFloat(text1[<span class="number">0</span>]) * Float.parseFloat(text1[<span class="number">1</span>]);</span><br><span class="line">                textField.setText(String.valueOf(c));</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;÷&quot;</span>)).length == <span class="number">2</span>) &#123;</span><br><span class="line">                c = Float.parseFloat(text1[<span class="number">0</span>]) / Float.parseFloat(text1[<span class="number">1</span>]);</span><br><span class="line">                textField.setText(String.valueOf(c));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;%&quot;</span>)).length == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(text1[<span class="number">0</span>].equals(<span class="string">&quot;.&quot;</span>))&#123;</span><br><span class="line">                    textField.setText(<span class="string">&quot;操作错误&quot;</span>);</span><br><span class="line">                    System.exit(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(Float.parseFloat(text1[<span class="number">0</span>]) &gt;Float.parseFloat(text1[<span class="number">1</span>])) &#123;</span><br><span class="line">                    c = (Float.parseFloat(text1[<span class="number">0</span>])%Float.parseFloat(text1[<span class="number">1</span>]));</span><br><span class="line">                    textField.setText(String.valueOf(c));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    c=Float.parseFloat(text1[<span class="number">0</span>]);</span><br><span class="line">                    textField.setText(String.valueOf(c));</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> ((text1 = text.split(<span class="string">&quot;²&quot;</span>)).length == <span class="number">1</span>) &#123;</span><br><span class="line">                c =  (<span class="keyword">float</span>) Math.pow(Float.parseFloat(text1[<span class="number">0</span>]),<span class="number">2</span>);</span><br><span class="line">                textField.setText(String.valueOf(c));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(str.equals(<span class="string">&quot;AC&quot;</span>))&#123;</span><br><span class="line">            str1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            textField.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span> (str.equals(<span class="string">&quot;close&quot;</span>)) &#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            textField.setText(str1=str1+str);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>学习重点：</p>
<p>1.split()函数的用法</p>
<p>2.setfont()函数</p>
<p>3.Java Collections.addAll() 与 ArrayList.addAll() 的区别</p>
<p>4.Java中的监听方式</p>
<p>5.编写一个ActionListener类的侦听器，组件注册该侦听器，侦听器内部要编写这个actionPerformed方法。</p>
<p>6.正则表达式操作</p>
<h4 id="使用split方法应该注意的事项"><a href="#使用split方法应该注意的事项" class="headerlink" title="使用split方法应该注意的事项"></a>使用split方法应该注意的事项</h4><p>(1)、如果用“.”作为分隔的话,必须是如下写法,String.split(“\.”),这样才能正确的分隔开,不能用String.split(“.”)，因为“.”是是正则表达式中的一部分，如果想用该字符本身,字符需要进行转义才能表示它本身，这种字符包括：<em><strong>*| , + , * , ^ , $ , / , | , [ , ] , ( , ) , - , . , \等*</strong></em>;</p>
<p>案例：</p>
<p>1.错误的案例：</p>
<p>​     String str=”5678^abc”;<br>​     String[] b = str.split(“^”); //注意直接使用 ^ 该字符是正则表达式的一部分，<br>​     for(int i=0;i&lt;b.length;i++){<br>​        System.out.println(b[i]+”==”+i);<br>​     }<br> 返回的结果为(该结果很明显没有达到我们想到的)：</p>
<p>5678^abc==0</p>
<p>2.正确的案例</p>
<p>  String str=”5678^abc”;<br>     String[] b = str.split(“\^”); //注意直接使用 ^ 该字符是正则表达式的一部分，<br>     for(int i=0;i&lt;b.length;i++){<br>        System.out.println(b[i]+”==”+i);<br>     }  </p>
<p>返回的结果：</p>
<p>5678==0<br>abc==1</p>
]]></content>
      <categories>
        <category>实践</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>继承与派生（粗略）</title>
    <url>/2020/07/02/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%B4%BE%E7%94%9F%EF%BC%88%E7%B2%97%E7%95%A5%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="继承与派生（粗略）"><a href="#继承与派生（粗略）" class="headerlink" title="继承与派生（粗略）"></a>继承与派生（粗略）</h1><h2 id="派生权限"><a href="#派生权限" class="headerlink" title="派生权限"></a>派生权限</h2><p><img src="https://i.loli.net/2020/07/03/DnQ5U1eTNdRZJkS.png"></p>
<h2 id="派生（继承）："><a href="#派生（继承）：" class="headerlink" title="派生（继承）："></a>派生（继承）：</h2><p>​        通过派生，派生类（子类）会获得（父类）除了构造器和析构器之外的所有成员（包括数据和函数成员）。是最自然的一种代码反用的方式</p>
<h3 id="派生语法："><a href="#派生语法：" class="headerlink" title="派生语法："></a>派生语法：</h3><p>**class 派生类名: [派生方式] 基类名<br>        **{<br>            <strong>派生类新增加的成员</strong><br>        }</p>
<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意</strong>：</h3><p>1.基类的构造函数和析构函数不能被继承，在派生类中，如果对派生类新增的成员进行初始化，需要加入派生类的构造函数 当派生类创建对象时，首先执行基类的构造函数，随后执行派生类的构造函数；</p>
<p>2.当撤销派生类对象时，先执行派生类的析构函数，在执行基类的析构函数。<br>当基类的构造函数没有参数或没有显式定义构造函数时，派生类可以不向基类传递参数，甚至可以不定义构造函数。</p>
<p>3.当基类构造函数不带参数时，派生类不一定需要定义构造函数，然而当基类构造函数哪怕只是带有一个参数，他所有的派生类都必须定义构造函数，甚至所定义的派生类构造函数可能为空，仅仅起参数传递的作用。 </p>
<p><strong>在定义派生类对象时，构造函数的执行顺序如下</strong>：<br>1.调用基类的构造函数，对基类数据成员初始化<br>2.调用内嵌对象成员的构造函数，对内嵌对象成员的数据初始化；<br>3.执行派生类的构造函数体，对派生类数据成员初始化。<br>撤销对象时，析构函数的调用顺序与构造函数的调用顺序正好相反。</p>
<h3 id="继承体系中的作用域"><a href="#继承体系中的作用域" class="headerlink" title="继承体系中的作用域"></a>继承体系中的作用域</h3><p>   1.在继承体系中，基类和派生类是两个不同的作用域，由此也进一步证明 ，基类的私有成员，无论在那种继承体系下都不能在派生类中访问。<br>   2.在继承体系中，基类和派生类中如果存在相同名字的成员，如果使用派生类对象调用此成员，会优先调用派生类中存在的成员，把基类中存在的隐藏掉—-&gt;同名隐藏<br>   相同名字的成员：同名成员变量、同名成名函数（与变量和函数的类型无关，只要是相同名字就好）<br>   所以，不要在继承体系中使用相同名字的成员   </p>
<h3 id="继承与派生之间的关系—-gt-赋值兼容规则"><a href="#继承与派生之间的关系—-gt-赋值兼容规则" class="headerlink" title="继承与派生之间的关系—&gt;赋值兼容规则"></a>继承与派生之间的关系—&gt;赋值兼容规则</h3><p><img src="https://i.loli.net/2020/07/03/eioOl8xcjgI65EU.png"></p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>多重继承</title>
    <url>/2020/07/03/%E8%99%9A%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h1 id="多重继承"><a href="#多重继承" class="headerlink" title="多重继承"></a>多重继承</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>一个派生类具有两个或两个以上的直接基类就是多重继承</p>
<ul>
<li>1 一个子类可以拥有多个父类；</li>
<li>2 子类拥有所有父类的成员变量；</li>
<li>3 子类继承所有父类的成员函数；</li>
<li>4 子类对象可以当作任意父类对象使用；</li>
</ul>
<h1 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h1><h3 id="多重继承派生类的格式"><a href="#多重继承派生类的格式" class="headerlink" title="多重继承派生类的格式"></a>多重继承派生类的格式</h3><p>class 派生类名：继承方式1 基类名1，继承方式2 基类名，….</p>
<p>{  派生类类体  }；</p>
<h3 id="多重继承派生类的构造函数格式"><a href="#多重继承派生类的构造函数格式" class="headerlink" title="多重继承派生类的构造函数格式"></a>多重继承派生类的构造函数格式</h3><p>派生类名（总参数表）：基类名1（参数表1），基类名2（参数表2）,…</p>
<p>子对象名（参数表n+1），…//如果有子对象的话</p>
<p>{ 派生类函数体 }</p>
<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base1</span>(<span class="keyword">int</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base1(int)called&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">Base1</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base1()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Base1</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Base1()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="built_in">Base2</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;Base2()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	~<span class="built_in">Base2</span>()</span><br><span class="line">	&#123;</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;~Base2()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span> :</span><span class="keyword">public</span> Base1, Base2</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">public</span>:</span><br><span class="line">		<span class="built_in">Derived</span>():<span class="built_in">Base2</span>(),<span class="built_in">Base1</span>()</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Derived()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Derived</span>(<span class="keyword">int</span> x) :<span class="built_in">Base1</span>(x)</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;Derived(int)called&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">		~<span class="built_in">Derived</span>()</span><br><span class="line">		&#123;</span><br><span class="line">			cout &lt;&lt; <span class="string">&quot;~Derived()called&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Derived d;<span class="comment">//d对象创建时调用了那个构造器</span></span><br><span class="line">	Derived d3 = <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//等价于：Derived d3(3);该等价关系只出现于定义	  新对象语句中</span></span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	上面语句是一个语句Derived d3定义对象的语句,d3=3是一个赋值句，</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	Derived* d2 = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">	<span class="keyword">delete</span> d2;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>运算符重载</title>
    <url>/2020/07/07/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h1><ol>
<li>C++运算符重载的概念和原理<ol start="2">
<li>C++重载=（C++重载赋值运算符）<ol start="3">
<li>C++深拷贝和浅拷贝（C++深复制和浅复制）<ol start="4">
<li>C++运算符重载为友元函数<ol start="5">
<li>C++实现可变长度的动态数组<ol start="6">
<li>C++重载&lt;&lt;和&gt;&gt;（C++重载输出运算符和输入运算符）<ol start="7">
<li>C++重载()（强制类型转换运算符）<ol start="8">
<li>C++重载++和–（自增和自减运算符）<ol start="9">
<li>C++运算符重载注意事项以及汇总</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="C-运算符重载的概念和原理"><a href="#C-运算符重载的概念和原理" class="headerlink" title="C++运算符重载的概念和原理"></a>C++运算符重载的概念和原理</h2><p>希望对象之间也能用这些运算符进行运算，以达到使程序更简洁、易懂的目的。例如，复数是可以进行四则运算的</p>
<p>利用 C++ 提供的“运算符重载”机制，赋予运算符新的功能，就能解决用<code>+</code>将两个复数对象相加这样的问题。</p>
<p>运算符重载，就是<strong>对已有的运算符赋予多重含义，使同一运算符作用于不同类型的数据时产生不同的行为。</strong>运算符重载的目的是使得 C++ 中的运算符也能够用来操作对象。</p>
<p>运算符重载的实质是编写以运算符作为名称的<strong>函数</strong>。</p>
<p>包含被重载的运算符的表达式会被编译成对运算符函数的调用，运算符的操作数成为函数调用时的实参，运算的结果就是函数的返回值。运算符可以被多次重载。</p>
<h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">返回值类型  <span class="keyword">operator</span>  运算符(形参表)</span><br><span class="line">&#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运算符可以被重载为全局函数，也可以被重载为成员函数。一般来说，倾向于将运算符重载为成员函数，这样能够较好地体现运算符和类的关系。</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">double</span> real, imag;</span><br><span class="line">    <span class="built_in">Complex</span>(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) : <span class="built_in">real</span>(r), <span class="built_in">imag</span>(i) &#123; &#125;</span><br><span class="line">    Complex <span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp; c);</span><br><span class="line">&#125;;</span><br><span class="line">Complex <span class="keyword">operator</span> + (<span class="keyword">const</span> Complex &amp; a, <span class="keyword">const</span> Complex &amp; b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(a.real + b.real, a.imag + b.imag); <span class="comment">//返回一个临时对象</span></span><br><span class="line">&#125;</span><br><span class="line">Complex Complex::<span class="keyword">operator</span> - (<span class="keyword">const</span> Complex &amp; c)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Complex</span>(real - c.real, imag - c.imag); <span class="comment">//返回一个临时对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">Complex <span class="title">a</span><span class="params">(<span class="number">4</span>, <span class="number">4</span>)</span>, <span class="title">b</span><span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>, c</span>;</span><br><span class="line">    c = a + b; <span class="comment">//等价于 c = operator + (a,b);</span></span><br><span class="line">    cout &lt;&lt; c.real &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; c.imag &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (a - b).real &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; (a - b).imag &lt;&lt; endl; <span class="comment">//a-b等价于a.operator - (b)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//程序将+重载为一个全局函数（只是为了演示这种做法，否则重载为成员函数更好），将-重载为一个成员函数。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title>迭代器</title>
    <url>/2020/11/09/%E8%BF%AD%E4%BB%A3%E5%99%A8/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><h3 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h3><p><strong>1.概述：</strong></p>
<blockquote>
<p>帮助我们做集合遍历的工具。</p>
</blockquote>
<p><strong>2.作用：</strong><br>java中提供了很多种集合，它们在存储元素时，采用的存储方式不同。所以当我们要取出这些集合中的元素时，可以通过一种通用的获取方式来完成。</p>
<blockquote>
<p><strong>Collection集合元素的通用获取方式：</strong> 在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来；继续再判断，如果还有就再取出来。一直到把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。</p>
</blockquote>
<p>集合中把这种取元素的方式描述在<strong>Iterator接口</strong>中。</p>
<p><strong>3.Iterator接口的常用方法:</strong></p>
<table>
<thead>
<tr>
<th>修饰语和类型</th>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>boolean</td>
<td>hasNext()</td>
<td>判断集合中还有没有可以被取出的元素,如果有返回true</td>
</tr>
<tr>
<td>E</td>
<td>next()</td>
<td>取出集合中的下一个元素</td>
</tr>
</tbody></table>
<p><strong>4.示例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;String&gt;();	<span class="comment">//多态</span></span><br><span class="line">		coll.add(<span class="string">&quot;abc1&quot;</span>);</span><br><span class="line">		coll.add(<span class="string">&quot;abc2&quot;</span>);</span><br><span class="line">		coll.add(<span class="string">&quot;abc3&quot;</span>);</span><br><span class="line">		coll.add(<span class="string">&quot;abc4&quot;</span>);</span><br><span class="line">		<span class="comment">// 迭代器,对集合ArrayList中的元素进行取出</span></span><br><span class="line">		<span class="comment">// 调用集合的方法iterator()获取Iterator接口的实现类的对象</span></span><br><span class="line">		Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line">		<span class="comment">// 接口实现类对象,调用方法hasNext()判断集合中是否有元素</span></span><br><span class="line">		<span class="comment">// boolean b = it.hasNext();</span></span><br><span class="line">		<span class="comment">// System.out.println(b);</span></span><br><span class="line">		<span class="comment">// 接口的实现类对象,调用方法next()取出集合中的元素</span></span><br><span class="line">		<span class="comment">// String s = it.next();</span></span><br><span class="line">		<span class="comment">// System.out.println(s);</span></span><br><span class="line"></span><br><span class="line">		<span class="comment">// 迭代是反复内容,使用循环实现,循环的终止条件：集合中没元素, hasNext()返回了false</span></span><br><span class="line">		<span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">			String s = it.next();</span><br><span class="line">			System.out.println(s);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">123456789101112131415161718192021222324</span></span><br></pre></td></tr></table></figure>

<p>输出为：</p>
<blockquote>
<p>abc1<br>abc2<br>abc3<br>abc4</p>
</blockquote>
<p>分析：<br>当<code>Iterator&lt;String&gt; it = coll.iterator();</code>这段代码执行时，在集合内部就建立了一个指针（Java中没有指针概念，这里用指针来描述便于理解）。而指针的初识位置并不是指向内存中的0位，而是指向-1位。<br><img src="https://img-blog.csdnimg.cn/20190227203003763.png" alt="在这里插入图片描述"><br>每执行一次<code>String s = it.next();</code>，该指针便移向下一个位。当指针移到最后一位后，它的下一位就没有元素了，也就是<code>it.hasNext()</code>的返回值为<code>false</code>时，结束遍历，跳出循环。并且一旦指针移到了最后一位，理论上便回不去了，所以说迭代器是一次性的。如果这时再调用<code>String s = it.next();</code>，便会抛出空元素异常了。</p>
<p><strong>5.迭代器的转型</strong></p>
<p>由于集合是可以存储任意类型的对象的，所以就产生了转型的问题。</p>
<p>通过如下示例代码来分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合可以存储任意类型的对象</span></span><br><span class="line"><span class="comment">//当集合中不用泛型指定存储的数据类型时，集合什么都存。</span></span><br><span class="line">Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">coll.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">coll.add(<span class="string">&quot;opq&quot;</span>);</span><br><span class="line"><span class="comment">//获取迭代器</span></span><br><span class="line">Iterator it = coll.iterator();</span><br><span class="line"><span class="keyword">while</span> (it.hasNext()) &#123;</span><br><span class="line">	<span class="comment">// it.next()获取出来的对象数据类型为Object</span></span><br><span class="line">	<span class="comment">//Object obj = it.next();</span></span><br><span class="line">	<span class="comment">//当需要使用子类对象特有方法时，需要向下转型</span></span><br><span class="line">	String str = (String) it.next();</span><br><span class="line"> 	System.out.println(str.length());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：如果集合中存放的是多种对象，这时进行向下转型会发生类型转换异常。</span></span><br><span class="line"><span class="number">1234567891011121314151617</span></span><br></pre></td></tr></table></figure>

<p>上述示例代码中，由于元素被存放进集合后全部被提升为Object类型，当需要使用子类对象特有方法时，需要向下转型。</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
